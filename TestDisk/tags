!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADCbitAdjust	./src/file_spe.c	/^  uint16_t  ADCbitAdjust;      \/*  196  ADC bit adjust                     *\/$/;"	m	struct:header_spe	file:
ADCrate	./src/file_spe.c	/^  uint16_t  ADCrate;           \/*  190  ADC rate                           *\/$/;"	m	struct:header_spe	file:
ADCresolution	./src/file_spe.c	/^  uint16_t  ADCresolution;     \/*  194  ADC resolution                     *\/$/;"	m	struct:header_spe	file:
ADCtype	./src/file_spe.c	/^  uint16_t  ADCtype;           \/*  192  ADC type                           *\/$/;"	m	struct:header_spe	file:
AFF_PART_BASE	./src/common.h	280;"	d
AFF_PART_ORDER	./src/common.h	281;"	d
AFF_PART_STATUS	./src/common.h	282;"	d
ALIGN_TYPE	./src/suspend.c	87;"	d	file:
AM_MEMORY_MANAGER	./src/suspend.c	44;"	d	file:
ANALYSE_X	./src/godmode.c	69;"	d	file:
ANALYSE_Y	./src/godmode.c	70;"	d	file:
APE_COMMON_HEADER	./src/file_ape.c	/^struct APE_COMMON_HEADER$/;"	s	file:
APE_DESCRIPTOR	./src/file_ape.c	/^struct APE_DESCRIPTOR$/;"	s	file:
APE_HEADER	./src/file_ape.c	/^struct APE_HEADER$/;"	s	file:
APE_HEADER_OLD	./src/file_ape.c	/^struct APE_HEADER_OLD$/;"	s	file:
ASK_LOCATION_NEWDIR	./src/askloc.c	98;"	d	file:
ASK_LOCATION_QUIT	./src/askloc.c	99;"	d	file:
ASK_LOCATION_UPDATE	./src/askloc.c	97;"	d	file:
ASK_LOCATION_WAITKEY	./src/askloc.c	96;"	d	file:
ATTR_ARCH	./src/exfat_dir.c	108;"	d	file:
ATTR_ARCH	./src/fat.c	66;"	d	file:
ATTR_ARCH	./src/fat.h	139;"	d
ATTR_DIR	./src/exfat_dir.c	107;"	d	file:
ATTR_DIR	./src/fat.c	65;"	d	file:
ATTR_DIR	./src/fat.h	138;"	d
ATTR_EXT	./src/fat.c	71;"	d	file:
ATTR_EXT	./src/fat.h	144;"	d
ATTR_EXT_MASK	./src/fat.c	72;"	d	file:
ATTR_EXT_MASK	./src/fat.h	145;"	d
ATTR_HIDDEN	./src/exfat_dir.c	105;"	d	file:
ATTR_HIDDEN	./src/fat.c	62;"	d	file:
ATTR_HIDDEN	./src/fat.h	135;"	d
ATTR_NONE	./src/fat.c	68;"	d	file:
ATTR_NONE	./src/fat.h	141;"	d
ATTR_RO	./src/exfat_dir.c	104;"	d	file:
ATTR_RO	./src/fat.c	61;"	d	file:
ATTR_RO	./src/fat.h	134;"	d
ATTR_SYS	./src/exfat_dir.c	106;"	d	file:
ATTR_SYS	./src/fat.c	63;"	d	file:
ATTR_SYS	./src/fat.h	136;"	d
ATTR_UNUSED	./src/fat.c	69;"	d	file:
ATTR_UNUSED	./src/fat.h	142;"	d
ATTR_VOLUME	./src/fat.c	64;"	d	file:
ATTR_VOLUME	./src/fat.h	137;"	d
AddressOfEntryPoint	./src/pe.h	/^  uint32_t AddressOfEntryPoint;$/;"	m	struct:pe_image_optional_hdr32
AddressOfEntryPoint	./src/pe.h	/^  uint32_t AddressOfEntryPoint;$/;"	m	struct:pe_image_optional_hdr64
BACKUP_MAXSIZE	./src/savehdr.c	45;"	d	file:
BAD_EBS	./src/common.h	/^enum errcode_type {BAD_NOERR, BAD_SS, BAD_ES, BAD_SH, BAD_EH, BAD_EBS, BAD_RS, BAD_SC, BAD_EC, BAD_SCOUNT};$/;"	e	enum:errcode_type
BAD_EC	./src/common.h	/^enum errcode_type {BAD_NOERR, BAD_SS, BAD_ES, BAD_SH, BAD_EH, BAD_EBS, BAD_RS, BAD_SC, BAD_EC, BAD_SCOUNT};$/;"	e	enum:errcode_type
BAD_EH	./src/common.h	/^enum errcode_type {BAD_NOERR, BAD_SS, BAD_ES, BAD_SH, BAD_EH, BAD_EBS, BAD_RS, BAD_SC, BAD_EC, BAD_SCOUNT};$/;"	e	enum:errcode_type
BAD_ES	./src/common.h	/^enum errcode_type {BAD_NOERR, BAD_SS, BAD_ES, BAD_SH, BAD_EH, BAD_EBS, BAD_RS, BAD_SC, BAD_EC, BAD_SCOUNT};$/;"	e	enum:errcode_type
BAD_NOERR	./src/common.h	/^enum errcode_type {BAD_NOERR, BAD_SS, BAD_ES, BAD_SH, BAD_EH, BAD_EBS, BAD_RS, BAD_SC, BAD_EC, BAD_SCOUNT};$/;"	e	enum:errcode_type
BAD_RS	./src/common.h	/^enum errcode_type {BAD_NOERR, BAD_SS, BAD_ES, BAD_SH, BAD_EH, BAD_EBS, BAD_RS, BAD_SC, BAD_EC, BAD_SCOUNT};$/;"	e	enum:errcode_type
BAD_SC	./src/common.h	/^enum errcode_type {BAD_NOERR, BAD_SS, BAD_ES, BAD_SH, BAD_EH, BAD_EBS, BAD_RS, BAD_SC, BAD_EC, BAD_SCOUNT};$/;"	e	enum:errcode_type
BAD_SCOUNT	./src/common.h	/^enum errcode_type {BAD_NOERR, BAD_SS, BAD_ES, BAD_SH, BAD_EH, BAD_EBS, BAD_RS, BAD_SC, BAD_EC, BAD_SCOUNT};$/;"	e	enum:errcode_type
BAD_SH	./src/common.h	/^enum errcode_type {BAD_NOERR, BAD_SS, BAD_ES, BAD_SH, BAD_EH, BAD_EBS, BAD_RS, BAD_SC, BAD_EC, BAD_SCOUNT};$/;"	e	enum:errcode_type
BAD_SS	./src/common.h	/^enum errcode_type {BAD_NOERR, BAD_SS, BAD_ES, BAD_SH, BAD_EH, BAD_EBS, BAD_RS, BAD_SC, BAD_EC, BAD_SCOUNT};$/;"	e	enum:errcode_type
BBSIZE	./src/bsd.h	33;"	d
BFS_BIG_ENDIAN	./src/bfs.h	83;"	d
BFS_CLEAN	./src/bfs.h	74;"	d
BFS_DIRTY	./src/bfs.h	75;"	d
BFS_SUPERBLOCK_SIZE	./src/bfs.h	27;"	d
BF_EACCES	./src/phbf.c	/^typedef enum { BF_OK=0, BF_STOP=1, BF_EACCES=2, BF_ENOSPC=3, BF_FRAG_FOUND=4, BF_EOF=5, BF_ENOENT=6, BF_ERANGE=7} bf_status_t;$/;"	e	enum:__anon64	file:
BF_ENOENT	./src/phbf.c	/^typedef enum { BF_OK=0, BF_STOP=1, BF_EACCES=2, BF_ENOSPC=3, BF_FRAG_FOUND=4, BF_EOF=5, BF_ENOENT=6, BF_ERANGE=7} bf_status_t;$/;"	e	enum:__anon64	file:
BF_ENOSPC	./src/phbf.c	/^typedef enum { BF_OK=0, BF_STOP=1, BF_EACCES=2, BF_ENOSPC=3, BF_FRAG_FOUND=4, BF_EOF=5, BF_ENOENT=6, BF_ERANGE=7} bf_status_t;$/;"	e	enum:__anon64	file:
BF_EOF	./src/phbf.c	/^typedef enum { BF_OK=0, BF_STOP=1, BF_EACCES=2, BF_ENOSPC=3, BF_FRAG_FOUND=4, BF_EOF=5, BF_ENOENT=6, BF_ERANGE=7} bf_status_t;$/;"	e	enum:__anon64	file:
BF_ERANGE	./src/phbf.c	/^typedef enum { BF_OK=0, BF_STOP=1, BF_EACCES=2, BF_ENOSPC=3, BF_FRAG_FOUND=4, BF_EOF=5, BF_ENOENT=6, BF_ERANGE=7} bf_status_t;$/;"	e	enum:__anon64	file:
BF_FRAG_FOUND	./src/phbf.c	/^typedef enum { BF_OK=0, BF_STOP=1, BF_EACCES=2, BF_ENOSPC=3, BF_FRAG_FOUND=4, BF_EOF=5, BF_ENOENT=6, BF_ERANGE=7} bf_status_t;$/;"	e	enum:__anon64	file:
BF_OK	./src/phbf.c	/^typedef enum { BF_OK=0, BF_STOP=1, BF_EACCES=2, BF_ENOSPC=3, BF_FRAG_FOUND=4, BF_EOF=5, BF_ENOENT=6, BF_ERANGE=7} bf_status_t;$/;"	e	enum:__anon64	file:
BF_STOP	./src/phbf.c	/^typedef enum { BF_OK=0, BF_STOP=1, BF_EACCES=2, BF_ENOSPC=3, BF_FRAG_FOUND=4, BF_EOF=5, BF_ENOENT=6, BF_ERANGE=7} bf_status_t;$/;"	e	enum:__anon64	file:
BLKGETSIZE	./src/ntfs_io.c	60;"	d	file:
BLOCK0_SIGNATURE	./src/partmac.h	28;"	d
BPB_Reserved	./src/fat.h	/^	uint8_t	BPB_Reserved[12];	\/* 0x34 Unused *\/$/;"	m	struct:fat_boot_sector
BSD_DISKLABEL_SIZE	./src/bsd.h	30;"	d
BSD_MAXPARTITIONS	./src/common.h	436;"	d
BS_BootSig	./src/fat.h	/^	uint8_t	BS_BootSig;		\/* 0x42 *\/$/;"	m	struct:fat_boot_sector
BS_DrvNum	./src/fat.h	/^	uint8_t	BS_DrvNum;		\/* 0x40 *\/$/;"	m	struct:fat_boot_sector
BS_FilSysType	./src/fat.h	/^	uint8_t	BS_FilSysType[8];	\/* 0x52=82*\/$/;"	m	struct:fat_boot_sector
BS_Reserved1	./src/fat.h	/^	uint8_t	BS_Reserved1;		\/* 0x41 *\/$/;"	m	struct:fat_boot_sector
BS_VolID	./src/fat.h	/^	uint8_t	BS_VolID[4];		\/* 0x43 *\/$/;"	m	struct:fat_boot_sector
BS_VolLab	./src/fat.h	/^	uint8_t	BS_VolLab[11];		\/* 0x47 *\/$/;"	m	struct:fat_boot_sector
BTRFS_CSUM_SIZE	./src/btrfs.h	36;"	d
BTRFS_FSID_SIZE	./src/btrfs.h	33;"	d
BTRFS_LABEL_SIZE	./src/btrfs.h	42;"	d
BTRFS_MAGIC	./src/btrfs.h	31;"	d
BTRFS_SUPER_INFO_OFFSET	./src/btrfs.h	26;"	d
BTRFS_SUPER_INFO_SIZE	./src/btrfs.h	27;"	d
BTRFS_SUPER_MIRROR_MAX	./src/btrfs.h	29;"	d
BTRFS_SUPER_MIRROR_SHIFT	./src/btrfs.h	30;"	d
BTRFS_SYSTEM_CHUNK_ARRAY_SIZE	./src/btrfs.h	41;"	d
BTRFS_UUID_SIZE	./src/btrfs.h	51;"	d
BUFFER_LINE_LENGTH	./src/intrf.h	33;"	d
BUF_SIZE	./src/file_ace.c	137;"	d	file:
B_OS_NAME_LENGTH	./src/bfs.h	39;"	d
BackGrndApplied	./src/file_spe.c	/^  int16_t           BackGrndApplied;   \/*  150  set to 1 if background sub done    *\/$/;"	m	struct:header_spe	file:
BaseOfCode	./src/pe.h	/^  uint32_t BaseOfCode;$/;"	m	struct:pe_image_optional_hdr32
BaseOfCode	./src/pe.h	/^  uint32_t BaseOfCode;$/;"	m	struct:pe_image_optional_hdr64
BaseOfData	./src/pe.h	/^  uint32_t BaseOfData;$/;"	m	struct:pe_image_optional_hdr32
BitsPerPixel	./src/file_pcx.c	/^  uint8_t  BitsPerPixel;$/;"	m	struct:pcx_file_entry	file:
BlemishApplied	./src/file_spe.c	/^  int16_t           BlemishApplied;    \/* 1436 set to 1 if blemish removal applied *\/$/;"	m	struct:header_spe	file:
Block0	./src/partmac.h	/^struct Block0 {$/;"	s
BlockNumber	./src/file_bac.c	/^  uint32_t BlockNumber;             \/* Block number *\/$/;"	m	struct:block_header	file:
BlockSize	./src/file_bac.c	/^  uint32_t BlockSize;               \/* Block byte size including the header *\/$/;"	m	struct:block_header	file:
BytesPerLine	./src/file_pcx.c	/^  uint16_t BytesPerLine;$/;"	m	struct:pcx_file_entry	file:
CACHE_BUFFER_NBR	./src/hdcache.c	37;"	d	file:
CACHE_DEFAULT_SIZE	./src/hdcache.c	38;"	d	file:
CAPA_LIST_ADS	./src/dir.h	39;"	d
CAPA_LIST_DELETED	./src/dir.h	38;"	d
CHS2offset	./src/fnctdsk.c	/^uint64_t CHS2offset(const disk_t *disk_car,const CHS_t*CHS)$/;"	f
CHS2offset_inline	./src/godmode.c	/^static inline uint64_t CHS2offset_inline(const disk_t *disk_car,const CHS_t*CHS)$/;"	f	file:
CHS_struct	./src/common.h	/^struct CHS_struct$/;"	s
CHS_t	./src/common.h	/^typedef struct CHS_struct CHS_t;$/;"	t	typeref:struct:CHS_struct
CHS_to_offset	./src/next.c	/^static inline uint64_t CHS_to_offset(const unsigned int C, const int H, const int S,const disk_t *disk_car)$/;"	f	file:
CHSgeometry_t	./src/common.h	/^} CHSgeometry_t;$/;"	t	typeref:struct:__anon40
COH_NICFREE	./src/sysv.h	178;"	d
COH_NICINOD	./src/sysv.h	177;"	d
COLUMNS	./src/intrfn.c	73;"	d	file:
CRAMFS_GID_WIDTH	./src/cramfs.h	44;"	d
CRAMFS_MAGIC	./src/cramfs.h	27;"	d
CRAMFS_MAXPATHLEN	./src/cramfs.h	52;"	d
CRAMFS_MODE_WIDTH	./src/cramfs.h	41;"	d
CRAMFS_NAMELEN_WIDTH	./src/cramfs.h	45;"	d
CRAMFS_OFFSET_WIDTH	./src/cramfs.h	46;"	d
CRAMFS_SIGNATURE	./src/cramfs.h	28;"	d
CRAMFS_SIZE_WIDTH	./src/cramfs.h	43;"	d
CRAMFS_SUPERBLOCK_SIZE	./src/cramfs.h	26;"	d
CRAMFS_UID_WIDTH	./src/cramfs.h	42;"	d
CREG_ID	./src/file_reg.c	/^  uint32_t CREG_ID;		\/* CREG *\/$/;"	m	struct:creg_file_header	file:
CYGDRIVE_LEN	./src/askloc.c	93;"	d	file:
C_H_S2LBA	./src/fnctdsk.c	/^unsigned long int C_H_S2LBA(const disk_t *disk_car,const unsigned int C, const unsigned int H, const unsigned int S)$/;"	f
C_H_S2offset	./src/parti386.c	/^static uint64_t C_H_S2offset(const disk_t *disk_car,const unsigned int C, const unsigned int H, const unsigned int S)$/;"	f	file:
Characteristics	./src/pe.h	/^    uint16_t Characteristics;$/;"	m	struct:pe_image_file_hdr
Characteristics	./src/pe.h	/^  uint32_t Characteristics;$/;"	m	struct:pe_image_section_hdr
CheckSum	./src/file_bac.c	/^  uint32_t CheckSum;                \/* Block check sum *\/$/;"	m	struct:block_header	file:
CheckSum	./src/pe.h	/^  uint32_t CheckSum;				    \/* NT drivers only *\/$/;"	m	struct:pe_image_optional_hdr32
CheckSum	./src/pe.h	/^  uint32_t CheckSum;				    \/* NT drivers only *\/$/;"	m	struct:pe_image_optional_hdr64
Chnl_Pan	./src/file_it.c	/^  char     Chnl_Pan[64];$/;"	m	struct:impulse_header	file:
Chnl_Vol	./src/file_it.c	/^  char     Chnl_Vol[64];$/;"	m	struct:impulse_header	file:
Cmwt	./src/file_it.c	/^  uint16_t Cmwt;$/;"	m	struct:impulse_header	file:
ColorPlanes	./src/file_pcx.c	/^  uint8_t  ColorPlanes;$/;"	m	struct:pcx_file_entry	file:
CommBUFFER_CRC32	./src/file_sp3.h	/^  uint32_t    	CommBUFFER_CRC32; $/;"	m	struct:SP3FileInfo
CommBUFFER_LEN	./src/file_sp3.h	/^  uint32_t    	CommBUFFER_LEN; $/;"	m	struct:SP3FileInfo
CommBUFFER_POS	./src/file_sp3.h	/^  uint32_t    	CommBUFFER_POS; $/;"	m	struct:SP3FileInfo
ControlAdd	./src/file_spe.c	/^  uint16_t  ControlAdd;        \/* 1504  GPIB controller address (if used)  *\/$/;"	m	struct:header_spe	file:
CosmicApplied	./src/file_spe.c	/^  int16_t           CosmicApplied;     \/* 1438 set to 1 if cosmic ray removal done *\/$/;"	m	struct:header_spe	file:
CosmicThreshold	./src/file_spe.c	/^  float         CosmicThreshold;   \/* 1442 Threshold of cosmic ray removal.    *\/$/;"	m	struct:header_spe	file:
CosmicType	./src/file_spe.c	/^  int16_t           CosmicType;        \/* 1440 if cosmic ray applied, this is type *\/$/;"	m	struct:header_spe	file:
Cwtv	./src/file_it.c	/^  uint16_t Cwtv;$/;"	m	struct:impulse_header	file:
DBX_SIZE_POINTER	./src/file_pst.c	50;"	d	file:
DB_header	./src/file_DB.c	/^static const unsigned char DB_header[6]= {$/;"	v	file:
DC_CONTINUE	./src/filegen.h	/^typedef enum { DC_SCAN=0, DC_CONTINUE=1, DC_STOP=2, DC_ERROR=3} data_check_t;$/;"	e	enum:__anon65
DC_ERROR	./src/filegen.h	/^typedef enum { DC_SCAN=0, DC_CONTINUE=1, DC_STOP=2, DC_ERROR=3} data_check_t;$/;"	e	enum:__anon65
DC_SCAN	./src/filegen.h	/^typedef enum { DC_SCAN=0, DC_CONTINUE=1, DC_STOP=2, DC_ERROR=3} data_check_t;$/;"	e	enum:__anon65
DC_STOP	./src/filegen.h	/^typedef enum { DC_SCAN=0, DC_CONTINUE=1, DC_STOP=2, DC_ERROR=3} data_check_t;$/;"	e	enum:__anon65
DDMap	./src/partmac.h	/^struct DDMap {$/;"	s
DEFAULT_IMAGE_NAME	./src/adv.c	79;"	d	file:
DEFAULT_IMAGE_NAME	./src/phrecn.c	85;"	d	file:
DEFAULT_RECUP_DIR	./src/photorec.h	26;"	d
DEFAULT_SECTOR_SIZE	./src/common.h	39;"	d
DELETED_FLAG	./src/fat.c	59;"	d	file:
DELETED_FLAG	./src/fat.h	132;"	d
DIRECTORY	./src/ole.h	/^struct DIRECTORY$/;"	s
DIRENT_DELETED_FILE	./src/ext2_dir.c	51;"	d	file:
DIRS_PER_BLK	./src/ole.h	34;"	d
DIR_NAME_LEN	./src/dir.h	31;"	d
DIR_PART_EIO	./src/dir.h	/^typedef enum { DIR_PART_ENOSYS=-2, DIR_PART_EIO=-1, DIR_PART_OK=0} dir_partition_t;$/;"	e	enum:__anon49
DIR_PART_ENOSYS	./src/dir.h	/^typedef enum { DIR_PART_ENOSYS=-2, DIR_PART_EIO=-1, DIR_PART_OK=0} dir_partition_t;$/;"	e	enum:__anon49
DIR_PART_OK	./src/dir.h	/^typedef enum { DIR_PART_ENOSYS=-2, DIR_PART_EIO=-1, DIR_PART_OK=0} dir_partition_t;$/;"	e	enum:__anon49
DISKDESCRIPTION_MAX	./src/common.h	42;"	d
DISKMAGIC	./src/bsd.h	48;"	d
DISKNAME_MAX	./src/common.h	41;"	d
DISK_HAS_48_SUPPORT	./src/hpa_dco.c	59;"	d	file:
DISK_HAS_DCO_SUPPORT	./src/hpa_dco.c	62;"	d	file:
DISK_HAS_HPA_SUPPORT	./src/hpa_dco.c	60;"	d	file:
DISK_HAS_REMOVABLE_SUPPORT	./src/hpa_dco.c	61;"	d	file:
DOT_PHOTOREC_CFG	./src/phcfg.c	64;"	d	file:
DOT_PHOTOREC_SIG	./src/file_sig.c	58;"	d	file:
DPISTRLEN	./src/partmac.h	30;"	d
DPME_SIGNATURE	./src/partmac.h	31;"	d
DUMP_MAX_LINES	./src/intrfn.c	583;"	d	file:
DUMP_X	./src/intrfn.c	584;"	d	file:
DUMP_Y	./src/intrfn.c	585;"	d	file:
DataDirectory	./src/pe.h	/^  struct pe_image_data_dir DataDirectory[16];$/;"	m	struct:pe_image_optional_hdr32	typeref:struct:pe_image_optional_hdr32::pe_image_data_dir
DataDirectory	./src/pe.h	/^  struct pe_image_data_dir DataDirectory[16];$/;"	m	struct:pe_image_optional_hdr64	typeref:struct:pe_image_optional_hdr64::pe_image_data_dir
DataExameAno	./src/file_sp3.h	/^  uint16_t	DataExameAno;			\/* 2 bytes   (   9 -  10 ) *\/$/;"	m	struct:SP3FileInfo
DataExameDia	./src/file_sp3.h	/^  uint8_t    	DataExameDia;			\/* 1 bytes   (    12     ) *\/$/;"	m	struct:SP3FileInfo
DataExameHora	./src/file_sp3.h	/^  uint8_t    	DataExameHora;			\/* 1 bytes   (    13     ) *\/$/;"	m	struct:SP3FileInfo
DataExameMes	./src/file_sp3.h	/^  uint8_t    	DataExameMes;			\/* 1 bytes   (    11     ) *\/$/;"	m	struct:SP3FileInfo
DataExameMinutos	./src/file_sp3.h	/^  uint8_t    	DataExameMinutos;		\/* 1 bytes   (    14     ) *\/$/;"	m	struct:SP3FileInfo
DataExameSegundos	./src/file_sp3.h	/^  uint8_t    	DataExameSegundos;		\/* 1 bytes   (    15     ) *\/$/;"	m	struct:SP3FileInfo
DataNascimentoAnoDoente	./src/file_sp3.h	/^  uint16_t  	DataNascimentoAnoDoente;	\/* 2 bytes   ( 409 - 410 ) *\/$/;"	m	struct:SP3FileInfo
DataNascimentoDiaDoente	./src/file_sp3.h	/^  uint8_t    	DataNascimentoDiaDoente;	\/* 1 bytes   (    412    ) *\/$/;"	m	struct:SP3FileInfo
DataNascimentoMesDoente	./src/file_sp3.h	/^  uint8_t    	DataNascimentoMesDoente;	\/* 1 bytes   (    411    ) *\/$/;"	m	struct:SP3FileInfo
DatabaseHdrType_s	./src/file_prc.c	/^struct DatabaseHdrType_s {$/;"	s	file:
DetType	./src/file_spe.c	/^  int16_t           DetType;           \/*   40  CCD\/DiodeArray type                *\/$/;"	m	struct:header_spe	file:
DllCharacteristics	./src/pe.h	/^  uint16_t DllCharacteristics;$/;"	m	struct:pe_image_optional_hdr32
DllCharacteristics	./src/pe.h	/^  uint16_t DllCharacteristics;$/;"	m	struct:pe_image_optional_hdr64
DuracaoExameMilisegundos	./src/file_sp3.h	/^  uint32_t  	DuracaoExameMilisegundos;	\/* 4 bytes   (  17 -  20 ) *\/$/;"	m	struct:SP3FileInfo
EBML_find	./src/file_mkv.c	/^static const unsigned char *EBML_find(const unsigned char *buffer, const unsigned int buffer_size, const unsigned char *EBML_Header, const unsigned int EBML_size)$/;"	f	file:
EBML_header	./src/file_mkv.c	/^static const unsigned char EBML_header[4]= { 0x1a,0x45,0xdf,0xa3};$/;"	v	file:
EBML_read_string	./src/file_mkv.c	/^static int EBML_read_string(const unsigned char *p, const unsigned int p_size, char **string)$/;"	f	file:
EBML_read_unsigned	./src/file_mkv.c	/^static int EBML_read_unsigned(const unsigned char *p, const unsigned int p_size, uint64_t *uint64)$/;"	f	file:
EDIT_MAX_LINES	./src/edit.c	48;"	d	file:
EDIT_X	./src/edit.c	46;"	d	file:
EDIT_Y	./src/edit.c	47;"	d	file:
EI_CLASS	./src/file_elf.c	113;"	d	file:
EI_DATA	./src/file_elf.c	117;"	d	file:
EI_NIDENT	./src/file_elf.c	46;"	d	file:
ELFCLASS32	./src/file_elf.c	114;"	d	file:
ELFCLASS64	./src/file_elf.c	115;"	d	file:
ELFDATA2LSB	./src/file_elf.c	118;"	d	file:
ELFDATA2MSB	./src/file_elf.c	119;"	d	file:
EMF_HDR	./src/file_emf.c	/^struct EMF_HDR$/;"	s	file:
EMR_ABORTPATH	./src/file_emf.c	154;"	d	file:
EMR_ALPHABLEND	./src/file_emf.c	199;"	d	file:
EMR_ANGLEARC	./src/file_emf.c	127;"	d	file:
EMR_ARC	./src/file_emf.c	131;"	d	file:
EMR_ARCTO	./src/file_emf.c	141;"	d	file:
EMR_BEGINPATH	./src/file_emf.c	145;"	d	file:
EMR_BITBLT	./src/file_emf.c	161;"	d	file:
EMR_CHORD	./src/file_emf.c	132;"	d	file:
EMR_CLOSEFIGURE	./src/file_emf.c	147;"	d	file:
EMR_COLORCORRECTPALETTE	./src/file_emf.c	196;"	d	file:
EMR_COLORMATCHTOTARGETW	./src/file_emf.c	206;"	d	file:
EMR_CREATEBRUSHINDIRECT	./src/file_emf.c	125;"	d	file:
EMR_CREATECOLORSPACE	./src/file_emf.c	184;"	d	file:
EMR_CREATECOLORSPACEW	./src/file_emf.c	207;"	d	file:
EMR_CREATEDIBPATTERNBRUSHPT	./src/file_emf.c	179;"	d	file:
EMR_CREATEMONOBRUSH	./src/file_emf.c	178;"	d	file:
EMR_CREATEPALETTE	./src/file_emf.c	135;"	d	file:
EMR_CREATEPEN	./src/file_emf.c	124;"	d	file:
EMR_DELETECOLORSPACE	./src/file_emf.c	186;"	d	file:
EMR_DELETEOBJECT	./src/file_emf.c	126;"	d	file:
EMR_DRAWESCAPE	./src/file_emf.c	190;"	d	file:
EMR_ELLIPSE	./src/file_emf.c	128;"	d	file:
EMR_ENDPATH	./src/file_emf.c	146;"	d	file:
EMR_EOF	./src/file_emf.c	100;"	d	file:
EMR_EXCLUDECLIPRECT	./src/file_emf.c	115;"	d	file:
EMR_EXTCREATEFONTINDIRECTW	./src/file_emf.c	167;"	d	file:
EMR_EXTCREATEPEN	./src/file_emf.c	180;"	d	file:
EMR_EXTESCAPE	./src/file_emf.c	191;"	d	file:
EMR_EXTFLOODFILL	./src/file_emf.c	139;"	d	file:
EMR_EXTSELECTCLIPRGN	./src/file_emf.c	160;"	d	file:
EMR_EXTTEXTOUTA	./src/file_emf.c	168;"	d	file:
EMR_EXTTEXTOUTW	./src/file_emf.c	169;"	d	file:
EMR_FILLPATH	./src/file_emf.c	148;"	d	file:
EMR_FILLRGN	./src/file_emf.c	156;"	d	file:
EMR_FLATTENPATH	./src/file_emf.c	151;"	d	file:
EMR_FORCEUFIMAPPING	./src/file_emf.c	194;"	d	file:
EMR_FRAMERGN	./src/file_emf.c	157;"	d	file:
EMR_GDICOMMENT	./src/file_emf.c	155;"	d	file:
EMR_GLSBOUNDEDRECORD	./src/file_emf.c	188;"	d	file:
EMR_GLSRECORD	./src/file_emf.c	187;"	d	file:
EMR_GRADIENTFILL	./src/file_emf.c	203;"	d	file:
EMR_HEADER	./src/file_emf.c	87;"	d	file:
EMR_INTERSECTCLIPRECT	./src/file_emf.c	116;"	d	file:
EMR_INVERTRGN	./src/file_emf.c	158;"	d	file:
EMR_LINETO	./src/file_emf.c	140;"	d	file:
EMR_MASKBLT	./src/file_emf.c	163;"	d	file:
EMR_MODIFYWORLDTRANSFORM	./src/file_emf.c	122;"	d	file:
EMR_MOVETOEX	./src/file_emf.c	113;"	d	file:
EMR_NAMEDESCAPE	./src/file_emf.c	195;"	d	file:
EMR_OFFSETCLIPRGN	./src/file_emf.c	112;"	d	file:
EMR_PAINTRGN	./src/file_emf.c	159;"	d	file:
EMR_PIE	./src/file_emf.c	133;"	d	file:
EMR_PIXELFORMAT	./src/file_emf.c	189;"	d	file:
EMR_PLGBLT	./src/file_emf.c	164;"	d	file:
EMR_POLYBEZIER	./src/file_emf.c	88;"	d	file:
EMR_POLYBEZIER16	./src/file_emf.c	170;"	d	file:
EMR_POLYBEZIERTO	./src/file_emf.c	91;"	d	file:
EMR_POLYBEZIERTO16	./src/file_emf.c	173;"	d	file:
EMR_POLYDRAW	./src/file_emf.c	142;"	d	file:
EMR_POLYDRAW16	./src/file_emf.c	177;"	d	file:
EMR_POLYGON	./src/file_emf.c	89;"	d	file:
EMR_POLYGON16	./src/file_emf.c	171;"	d	file:
EMR_POLYLINE	./src/file_emf.c	90;"	d	file:
EMR_POLYLINE16	./src/file_emf.c	172;"	d	file:
EMR_POLYLINETO	./src/file_emf.c	92;"	d	file:
EMR_POLYLINETO16	./src/file_emf.c	174;"	d	file:
EMR_POLYPOLYGON	./src/file_emf.c	94;"	d	file:
EMR_POLYPOLYGON16	./src/file_emf.c	176;"	d	file:
EMR_POLYPOLYLINE	./src/file_emf.c	93;"	d	file:
EMR_POLYPOLYLINE16	./src/file_emf.c	175;"	d	file:
EMR_POLYTEXTOUTA	./src/file_emf.c	181;"	d	file:
EMR_POLYTEXTOUTW	./src/file_emf.c	182;"	d	file:
EMR_REALIZEPALETTE	./src/file_emf.c	138;"	d	file:
EMR_RECTANGLE	./src/file_emf.c	129;"	d	file:
EMR_RESERVED_117	./src/file_emf.c	202;"	d	file:
EMR_RESIZEPALETTE	./src/file_emf.c	137;"	d	file:
EMR_RESTOREDC	./src/file_emf.c	120;"	d	file:
EMR_ROUNDRECT	./src/file_emf.c	130;"	d	file:
EMR_SAVEDC	./src/file_emf.c	119;"	d	file:
EMR_SCALEVIEWPORTEXTEX	./src/file_emf.c	117;"	d	file:
EMR_SCALEWINDOWEXTEX	./src/file_emf.c	118;"	d	file:
EMR_SELECTCLIPPATH	./src/file_emf.c	153;"	d	file:
EMR_SELECTOBJECT	./src/file_emf.c	123;"	d	file:
EMR_SELECTPALETTE	./src/file_emf.c	134;"	d	file:
EMR_SETARCDIRECTION	./src/file_emf.c	143;"	d	file:
EMR_SETBKCOLOR	./src/file_emf.c	111;"	d	file:
EMR_SETBKMODE	./src/file_emf.c	104;"	d	file:
EMR_SETBRUSHORGEX	./src/file_emf.c	99;"	d	file:
EMR_SETCOLORADJUSTMENT	./src/file_emf.c	109;"	d	file:
EMR_SETCOLORSPACE	./src/file_emf.c	185;"	d	file:
EMR_SETDIBITSTODEVICE	./src/file_emf.c	165;"	d	file:
EMR_SETICMMODE	./src/file_emf.c	183;"	d	file:
EMR_SETICMPROFILEA	./src/file_emf.c	197;"	d	file:
EMR_SETICMPROFILEW	./src/file_emf.c	198;"	d	file:
EMR_SETLAYOUT	./src/file_emf.c	200;"	d	file:
EMR_SETLINKEDUFI	./src/file_emf.c	204;"	d	file:
EMR_SETMAPMODE	./src/file_emf.c	103;"	d	file:
EMR_SETMAPPERFLAGS	./src/file_emf.c	102;"	d	file:
EMR_SETMETARGN	./src/file_emf.c	114;"	d	file:
EMR_SETMITERLIMIT	./src/file_emf.c	144;"	d	file:
EMR_SETPALETTEENTRIES	./src/file_emf.c	136;"	d	file:
EMR_SETPIXELV	./src/file_emf.c	101;"	d	file:
EMR_SETPOLYFILLMODE	./src/file_emf.c	105;"	d	file:
EMR_SETROP2	./src/file_emf.c	106;"	d	file:
EMR_SETSTRETCHBLTMODE	./src/file_emf.c	107;"	d	file:
EMR_SETTEXTALIGN	./src/file_emf.c	108;"	d	file:
EMR_SETTEXTCOLOR	./src/file_emf.c	110;"	d	file:
EMR_SETTEXTJUSTIFICATION	./src/file_emf.c	205;"	d	file:
EMR_SETVIEWPORTEXTEX	./src/file_emf.c	97;"	d	file:
EMR_SETVIEWPORTORGEX	./src/file_emf.c	98;"	d	file:
EMR_SETWINDOWEXTEX	./src/file_emf.c	95;"	d	file:
EMR_SETWINDOWORGEX	./src/file_emf.c	96;"	d	file:
EMR_SETWORLDTRANSFORM	./src/file_emf.c	121;"	d	file:
EMR_SMALLTEXTOUT	./src/file_emf.c	193;"	d	file:
EMR_STARTDOC	./src/file_emf.c	192;"	d	file:
EMR_STRETCHBLT	./src/file_emf.c	162;"	d	file:
EMR_STRETCHDIBITS	./src/file_emf.c	166;"	d	file:
EMR_STROKEANDFILLPATH	./src/file_emf.c	149;"	d	file:
EMR_STROKEPATH	./src/file_emf.c	150;"	d	file:
EMR_TRANSPARENTBLT	./src/file_emf.c	201;"	d	file:
EMR_WIDENPATH	./src/file_emf.c	152;"	d	file:
END_OF_CHAIN	./src/ole.h	23;"	d
EXFAT_BS_SIZE	./src/exfat.h	25;"	d
EXFAT_MKMODE	./src/exfat_dir.c	109;"	d	file:
EXFAT_MKMODE	./src/exfat_dir.c	55;"	d	file:
EXIFTAG_MAKERNOTE	./src/file_tiff.h	40;"	d
EXT2_CHECK_MAGIC	./src/ext2_dir.c	102;"	d	file:
EXT2_ERRORS_CONTINUE	./src/ext2.h	49;"	d
EXT2_ERRORS_DEFAULT	./src/ext2.h	52;"	d
EXT2_ERRORS_PANIC	./src/ext2.h	51;"	d
EXT2_ERRORS_RO	./src/ext2.h	50;"	d
EXT2_ERROR_FS	./src/ext2.h	44;"	d
EXT2_FEATURE_COMPAT_ANY	./src/ext2.h	71;"	d
EXT2_FEATURE_COMPAT_DIR_INDEX	./src/ext2.h	69;"	d
EXT2_FEATURE_COMPAT_DIR_PREALLOC	./src/ext2.h	64;"	d
EXT2_FEATURE_COMPAT_EXT_ATTR	./src/ext2.h	67;"	d
EXT2_FEATURE_COMPAT_IMAGIC_INODES	./src/ext2.h	65;"	d
EXT2_FEATURE_COMPAT_LAZY_BG	./src/ext2.h	70;"	d
EXT2_FEATURE_COMPAT_RESIZE_INO	./src/ext2.h	68;"	d
EXT2_FEATURE_INCOMPAT_ANY	./src/ext2.h	91;"	d
EXT2_FEATURE_INCOMPAT_COMPRESSION	./src/ext2.h	83;"	d
EXT2_FEATURE_INCOMPAT_FILETYPE	./src/ext2.h	84;"	d
EXT2_FEATURE_INCOMPAT_META_BG	./src/ext2.h	87;"	d
EXT2_FEATURE_RO_COMPAT_ANY	./src/ext2.h	81;"	d
EXT2_FEATURE_RO_COMPAT_LARGE_FILE	./src/ext2.h	75;"	d
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER	./src/ext2.h	74;"	d
EXT2_HAS_COMPAT_FEATURE	./src/ext2.h	57;"	d
EXT2_HAS_INCOMPAT_FEATURE	./src/ext2.h	61;"	d
EXT2_HAS_RO_COMPAT_FEATURE	./src/ext2.h	59;"	d
EXT2_MAX_BLOCK_SIZE	./src/ext2.h	35;"	d
EXT2_MIN_BLOCK	./src/ext2.h	38;"	d
EXT2_MIN_BLOCK_LOG_SIZE	./src/ext2.h	36;"	d
EXT2_MIN_BLOCK_SIZE	./src/ext2.h	34;"	d
EXT2_SB	./src/ext2.h	28;"	d
EXT2_SUPERBLOCK_SIZE	./src/ext2.h	26;"	d
EXT2_SUPER_MAGIC	./src/ext2.h	33;"	d
EXT2_VALID_FS	./src/ext2.h	43;"	d
EXT3_FEATURE_COMPAT_HAS_JOURNAL	./src/ext2.h	66;"	d
EXT3_FEATURE_INCOMPAT_EXTENTS	./src/ext2.h	88;"	d
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV	./src/ext2.h	86;"	d
EXT3_FEATURE_INCOMPAT_RECOVER	./src/ext2.h	85;"	d
EXT4_FEATURE_INCOMPAT_64BIT	./src/ext2.h	89;"	d
EXT4_FEATURE_INCOMPAT_MMP	./src/ext2.h	90;"	d
EXT4_FEATURE_RO_COMPAT_DIR_NLINK	./src/ext2.h	79;"	d
EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE	./src/ext2.h	80;"	d
EXT4_FEATURE_RO_COMPAT_GDT_CSUM	./src/ext2.h	78;"	d
EXT4_FEATURE_RO_COMPAT_HUGE_FILE	./src/ext2.h	77;"	d
EXTENSION_header	./src/file_template.c	/^static const unsigned char EXTENSION_header[HEADER_SIZE]=  {$/;"	v	file:
Elf32_Addr	./src/file_elf.c	/^typedef uint32_t Elf32_Addr;$/;"	t	file:
Elf32_Ehdr	./src/file_elf.c	/^} Elf32_Ehdr;$/;"	t	typeref:struct:__anon44	file:
Elf32_Half	./src/file_elf.c	/^typedef uint16_t Elf32_Half;$/;"	t	file:
Elf32_Off	./src/file_elf.c	/^typedef uint32_t Elf32_Off;$/;"	t	file:
Elf32_Section	./src/file_elf.c	/^typedef uint16_t Elf32_Section;$/;"	t	file:
Elf32_Sword	./src/file_elf.c	/^typedef	int32_t  Elf32_Sword;$/;"	t	file:
Elf32_Sxword	./src/file_elf.c	/^typedef	int64_t  Elf32_Sxword;$/;"	t	file:
Elf32_Symndx	./src/file_elf.c	/^typedef uint32_t Elf32_Symndx;$/;"	t	file:
Elf32_Word	./src/file_elf.c	/^typedef uint32_t Elf32_Word;$/;"	t	file:
Elf32_Xword	./src/file_elf.c	/^typedef uint64_t Elf32_Xword;$/;"	t	file:
Elf64_Addr	./src/file_elf.c	/^typedef uint64_t Elf64_Addr;$/;"	t	file:
Elf64_Ehdr	./src/file_elf.c	/^} Elf64_Ehdr;$/;"	t	typeref:struct:__anon45	file:
Elf64_Half	./src/file_elf.c	/^typedef uint16_t Elf64_Half;$/;"	t	file:
Elf64_Off	./src/file_elf.c	/^typedef uint64_t Elf64_Off;$/;"	t	file:
Elf64_Section	./src/file_elf.c	/^typedef uint16_t Elf64_Section;$/;"	t	file:
Elf64_Sword	./src/file_elf.c	/^typedef	int32_t  Elf64_Sword;$/;"	t	file:
Elf64_Sxword	./src/file_elf.c	/^typedef	int64_t  Elf64_Sxword;$/;"	t	file:
Elf64_Symndx	./src/file_elf.c	/^typedef uint64_t Elf64_Symndx;$/;"	t	file:
Elf64_Word	./src/file_elf.c	/^typedef uint32_t Elf64_Word;$/;"	t	file:
Elf64_Xword	./src/file_elf.c	/^typedef uint64_t Elf64_Xword;$/;"	t	file:
Encoding	./src/file_pcx.c	/^  uint8_t  Encoding;	\/* 0: uncompressed, 1: RLE compressed *\/$/;"	m	struct:pcx_file_entry	file:
Error_DESC_CRC32	./src/file_sp3.h	/^  uint32_t    	Error_DESC_CRC32; $/;"	m	struct:SP3FileInfo
Error_DESC_LEN	./src/file_sp3.h	/^  uint32_t    	Error_DESC_LEN; $/;"	m	struct:SP3FileInfo
Error_DESC_POS	./src/file_sp3.h	/^  uint32_t    	Error_DESC_POS; $/;"	m	struct:SP3FileInfo
Error_POS_CRC32	./src/file_sp3.h	/^  uint32_t    	Error_POS_CRC32; $/;"	m	struct:SP3FileInfo
Error_POS_LEN	./src/file_sp3.h	/^  uint32_t    	Error_POS_LEN; $/;"	m	struct:SP3FileInfo
Error_POS_POS	./src/file_sp3.h	/^  uint32_t    	Error_POS_POS; $/;"	m	struct:SP3FileInfo
Error_TYPE_CRC32	./src/file_sp3.h	/^  uint32_t    	Error_TYPE_CRC32; $/;"	m	struct:SP3FileInfo
Error_TYPE_LEN	./src/file_sp3.h	/^  uint32_t    	Error_TYPE_LEN; $/;"	m	struct:SP3FileInfo
Error_TYPE_POS	./src/file_sp3.h	/^  uint32_t    	Error_TYPE_POS; $/;"	m	struct:SP3FileInfo
Event_DESC_CRC32	./src/file_sp3.h	/^  uint32_t    	Event_DESC_CRC32; $/;"	m	struct:SP3FileInfo
Event_DESC_LEN	./src/file_sp3.h	/^  uint32_t    	Event_DESC_LEN; $/;"	m	struct:SP3FileInfo
Event_DESC_POS	./src/file_sp3.h	/^  uint32_t    	Event_DESC_POS; $/;"	m	struct:SP3FileInfo
Event_POS_CRC32	./src/file_sp3.h	/^  uint32_t    	Event_POS_CRC32; $/;"	m	struct:SP3FileInfo
Event_POS_LEN	./src/file_sp3.h	/^  uint32_t    	Event_POS_LEN; $/;"	m	struct:SP3FileInfo
Event_POS_POS	./src/file_sp3.h	/^  uint32_t    	Event_POS_POS; $/;"	m	struct:SP3FileInfo
Event_TYPE_CRC32	./src/file_sp3.h	/^  uint32_t    	Event_TYPE_CRC32; $/;"	m	struct:SP3FileInfo
Event_TYPE_LEN	./src/file_sp3.h	/^  uint32_t    	Event_TYPE_LEN; $/;"	m	struct:SP3FileInfo
Event_TYPE_POS	./src/file_sp3.h	/^  uint32_t    	Event_TYPE_POS; $/;"	m	struct:SP3FileInfo
ExameDataBase_UID	./src/file_sp3.h	/^  char     	ExameDataBase_UID[38];		\/* 38 bytes  ( 612 - 652) *\/$/;"	m	struct:SP3FileInfo
ExcelentConfidencePointsA	./src/file_sp3.h	/^  uint8_t    	ExcelentConfidencePointsA;	\/* 1 bytes   (    430    ) *\/$/;"	m	struct:SP3FileInfo
ExcelentConfidencePointsB	./src/file_sp3.h	/^  uint8_t    	ExcelentConfidencePointsB;	\/* 1 bytes   (    438    ) *\/$/;"	m	struct:SP3FileInfo
ExternalDataBaseKey	./src/file_sp3.h	/^  char     	ExternalDataBaseKey[38];	\/* 38 bytes  ( 537 - 574) *\/$/;"	m	struct:SP3FileInfo
ExtraInfoFlag_CRC32	./src/file_sp3.h	/^  uint32_t    	ExtraInfoFlag_CRC32;		\/* 4 bytes   ( 729 - 732) *\/$/;"	m	struct:SP3FileInfo
ExtraInfoFlag_LEN	./src/file_sp3.h	/^  uint32_t    	ExtraInfoFlag_LEN;		\/* 4 bytes   ( 725 - 728) *\/$/;"	m	struct:SP3FileInfo
ExtraInfoFlag_POS	./src/file_sp3.h	/^  uint32_t    	ExtraInfoFlag_POS;		\/* 4 bytes   ( 721 - 724) *\/$/;"	m	struct:SP3FileInfo
FAT12_BAD	./src/fat.c	74;"	d	file:
FAT12_BAD	./src/fat.h	147;"	d
FAT12_EOC	./src/fat.c	75;"	d	file:
FAT12_EOC	./src/fat.h	148;"	d
FAT16_BAD	./src/fat.c	76;"	d	file:
FAT16_BAD	./src/fat.h	149;"	d
FAT16_EOC	./src/fat.c	77;"	d	file:
FAT16_EOC	./src/fat.h	150;"	d
FAT1X_PART_NAME	./src/fat.h	29;"	d
FAT1x_BOOT_SECTOR_SIZE	./src/fat.h	153;"	d
FAT32_BAD	./src/fat.h	151;"	d
FAT32_EOC	./src/fat.h	152;"	d
FAT32_PART_NAME	./src/fat.h	30;"	d
FAT_CORRUPTED	./src/fat_adv.c	/^typedef enum { FAT_UNREADABLE=0, FAT_CORRUPTED=1, FAT_OK=2 } fat_status_t;$/;"	e	enum:__anon36	file:
FAT_FOLLOW_CLUSTER	./src/fat_dir.c	/^typedef enum {FAT_FOLLOW_CLUSTER, FAT_NEXT_FREE_CLUSTER, FAT_NEXT_CLUSTER} fat_method_t;$/;"	e	enum:__anon17	file:
FAT_NAME1	./src/fat.h	31;"	d
FAT_NAME2	./src/fat.h	32;"	d
FAT_NEXT_CLUSTER	./src/fat_dir.c	/^typedef enum {FAT_FOLLOW_CLUSTER, FAT_NEXT_FREE_CLUSTER, FAT_NEXT_CLUSTER} fat_method_t;$/;"	e	enum:__anon17	file:
FAT_NEXT_FREE_CLUSTER	./src/fat_dir.c	/^typedef enum {FAT_FOLLOW_CLUSTER, FAT_NEXT_FREE_CLUSTER, FAT_NEXT_CLUSTER} fat_method_t;$/;"	e	enum:__anon17	file:
FAT_OK	./src/fat_adv.c	/^typedef enum { FAT_UNREADABLE=0, FAT_CORRUPTED=1, FAT_OK=2 } fat_status_t;$/;"	e	enum:__anon36	file:
FAT_REPAIR_ASK	./src/fat_adv.c	/^typedef enum { FAT_REPAIR_ASK=0, FAT_REPAIR_YES=1, FAT_REPAIR_NO=2 } fat_repair_t;$/;"	e	enum:__anon37	file:
FAT_REPAIR_NO	./src/fat_adv.c	/^typedef enum { FAT_REPAIR_ASK=0, FAT_REPAIR_YES=1, FAT_REPAIR_NO=2 } fat_repair_t;$/;"	e	enum:__anon37	file:
FAT_REPAIR_YES	./src/fat_adv.c	/^typedef enum { FAT_REPAIR_ASK=0, FAT_REPAIR_YES=1, FAT_REPAIR_NO=2 } fat_repair_t;$/;"	e	enum:__anon37	file:
FAT_START	./src/ole.h	32;"	d
FAT_UNREADABLE	./src/fat_adv.c	/^typedef enum { FAT_UNREADABLE=0, FAT_CORRUPTED=1, FAT_OK=2 } fat_status_t;$/;"	e	enum:__anon36	file:
FAT_init_rootdir	./src/fat_adv.c	/^int FAT_init_rootdir(disk_t *disk_car, partition_t *partition, const int verbose, char **current_cmd)$/;"	f
FAT_next_block	./src/ole.h	/^	uint32_t	FAT_next_block;			\/*68*\/$/;"	m	struct:OLE_HDR
FHRa_CRC32	./src/file_sp3.h	/^  uint32_t    	FHRa_CRC32; $/;"	m	struct:SP3FileInfo
FHRa_LEN	./src/file_sp3.h	/^  uint32_t    	FHRa_LEN; $/;"	m	struct:SP3FileInfo
FHRa_POS	./src/file_sp3.h	/^  uint32_t    	FHRa_POS; $/;"	m	struct:SP3FileInfo
FHRb_CRC32	./src/file_sp3.h	/^  uint32_t    	FHRb_CRC32; $/;"	m	struct:SP3FileInfo
FHRb_LEN	./src/file_sp3.h	/^  uint32_t    	FHRb_LEN; $/;"	m	struct:SP3FileInfo
FHRb_POS	./src/file_sp3.h	/^  uint32_t    	FHRb_POS; $/;"	m	struct:SP3FileInfo
FILE_SIZE_POINTER	./src/file_pst.c	48;"	d	file:
FILE_SIZE_POINTER_64	./src/file_pst.c	49;"	d	file:
FILE_STATUS_ADS	./src/dir.h	75;"	d
FILE_STATUS_DELETED	./src/dir.h	73;"	d
FILE_STATUS_MARKED	./src/dir.h	74;"	d
FILE_first_user	./src/ntfs_dir.c	89;"	d	file:
FLAG_LIST_ADS	./src/dir.h	36;"	d
FLAG_LIST_DELETED	./src/dir.h	32;"	d
FLAG_LIST_MASK12	./src/dir.h	33;"	d
FLAG_LIST_MASK16	./src/dir.h	34;"	d
FLAG_LIST_PATHNAME	./src/dir.h	35;"	d
FM_CRC32	./src/file_sp3.h	/^  uint32_t    	FM_CRC32; $/;"	m	struct:SP3FileInfo
FM_LEN	./src/file_sp3.h	/^  uint32_t    	FM_LEN; $/;"	m	struct:SP3FileInfo
FM_POS	./src/file_sp3.h	/^  uint32_t    	FM_POS; $/;"	m	struct:SP3FileInfo
Fetal_SpO2_CRC32	./src/file_sp3.h	/^  uint32_t    	Fetal_SpO2_CRC32; $/;"	m	struct:SP3FileInfo
Fetal_SpO2_LEN	./src/file_sp3.h	/^  uint32_t    	Fetal_SpO2_LEN; $/;"	m	struct:SP3FileInfo
Fetal_SpO2_POS	./src/file_sp3.h	/^  uint32_t    	Fetal_SpO2_POS; $/;"	m	struct:SP3FileInfo
Fetal_SpO2_POS_CRC32	./src/file_sp3.h	/^  uint32_t    	Fetal_SpO2_POS_CRC32; $/;"	m	struct:SP3FileInfo
Fetal_SpO2_POS_LEN	./src/file_sp3.h	/^  uint32_t    	Fetal_SpO2_POS_LEN; $/;"	m	struct:SP3FileInfo
Fetal_SpO2_POS_POS	./src/file_sp3.h	/^  uint32_t    	Fetal_SpO2_POS_POS; $/;"	m	struct:SP3FileInfo
FileAlignment	./src/pe.h	/^  uint32_t FileAlignment;			    \/* usually 32 or 512 *\/$/;"	m	struct:pe_image_optional_hdr32
FileAlignment	./src/pe.h	/^  uint32_t FileAlignment;			    \/* usually 32 or 512 *\/$/;"	m	struct:pe_image_optional_hdr64
FileName	./src/file_sp3.h	/^  char     	FileName[64];			\/* 64 bytes  ( 177 - 240 ) *\/$/;"	m	struct:SP3FileInfo
Filler	./src/file_pcx.c	/^  uint8_t  Filler[56];$/;"	m	struct:pcx_file_entry	file:
Flags	./src/file_it.c	/^  uint16_t Flags;$/;"	m	struct:impulse_header	file:
FlatField	./src/file_spe.c	/^  char          FlatField[120];    \/* 1632 Flat field file name.               *\/$/;"	m	struct:header_spe	file:
FourCC_length	./src/file_ra.c	/^  char     FourCC_length; 	\/* always 4 *\/$/;"	m	struct:ra4_header	file:
FourCC_string	./src/file_ra.c	/^  char	   FourCC_string[4];$/;"	m	struct:ra4_header	file:
GFS2_BASIC_BLOCK	./src/gfs2.h	28;"	d
GFS2_BASIC_BLOCK_SHIFT	./src/gfs2.h	29;"	d
GFS2_FORMAT_SB	./src/gfs2.h	30;"	d
GFS2_HAS_UUID	./src/gfs2.h	76;"	d
GFS2_LOCKNAME_LEN	./src/gfs2.h	54;"	d
GFS2_MAGIC	./src/gfs2.h	27;"	d
GFS2_SB_ADDR	./src/gfs2.h	53;"	d
GPIBadd	./src/file_spe.c	/^  uint16_t  GPIBadd;           \/* 1502  GPIB address (if used)             *\/$/;"	m	struct:header_spe	file:
GPT_ENT_ATTR_PLATFORM	./src/partgpt.h	56;"	d
GPT_ENT_TYPE_EFI	./src/common.h	123;"	d
GPT_ENT_TYPE_FREEBSD	./src/common.h	127;"	d
GPT_ENT_TYPE_FREEBSD_SWAP	./src/common.h	129;"	d
GPT_ENT_TYPE_FREEBSD_UFS	./src/common.h	131;"	d
GPT_ENT_TYPE_FREEBSD_VINUM	./src/common.h	142;"	d
GPT_ENT_TYPE_FREEBSD_ZFS	./src/common.h	133;"	d
GPT_ENT_TYPE_HPUX_DATA	./src/common.h	166;"	d
GPT_ENT_TYPE_HPUX_SERVICE	./src/common.h	168;"	d
GPT_ENT_TYPE_LINUX_DATA	./src/common.h	155;"	d
GPT_ENT_TYPE_LINUX_LVM	./src/common.h	160;"	d
GPT_ENT_TYPE_LINUX_RAID	./src/common.h	156;"	d
GPT_ENT_TYPE_LINUX_RESERVED	./src/common.h	162;"	d
GPT_ENT_TYPE_LINUX_SWAP	./src/common.h	158;"	d
GPT_ENT_TYPE_MAC_BOOT	./src/common.h	179;"	d
GPT_ENT_TYPE_MAC_HFS	./src/common.h	171;"	d
GPT_ENT_TYPE_MAC_LABEL	./src/common.h	181;"	d
GPT_ENT_TYPE_MAC_RAID	./src/common.h	175;"	d
GPT_ENT_TYPE_MAC_RAID_OFFLINE	./src/common.h	177;"	d
GPT_ENT_TYPE_MAC_TV_RECOVERY	./src/common.h	183;"	d
GPT_ENT_TYPE_MAC_UFS	./src/common.h	173;"	d
GPT_ENT_TYPE_MAC_ZFS	./src/common.h	196;"	d
GPT_ENT_TYPE_MBR	./src/common.h	125;"	d
GPT_ENT_TYPE_MS_BASIC_DATA	./src/common.h	148;"	d
GPT_ENT_TYPE_MS_LDM_DATA	./src/common.h	152;"	d
GPT_ENT_TYPE_MS_LDM_METADATA	./src/common.h	150;"	d
GPT_ENT_TYPE_MS_RESERVED	./src/common.h	146;"	d
GPT_ENT_TYPE_SOLARIS_BACKUP	./src/common.h	192;"	d
GPT_ENT_TYPE_SOLARIS_BOOT	./src/common.h	186;"	d
GPT_ENT_TYPE_SOLARIS_EFI_ALTSCTR	./src/common.h	201;"	d
GPT_ENT_TYPE_SOLARIS_HOME	./src/common.h	199;"	d
GPT_ENT_TYPE_SOLARIS_RESERVED1	./src/common.h	203;"	d
GPT_ENT_TYPE_SOLARIS_RESERVED2	./src/common.h	205;"	d
GPT_ENT_TYPE_SOLARIS_RESERVED3	./src/common.h	207;"	d
GPT_ENT_TYPE_SOLARIS_RESERVED4	./src/common.h	209;"	d
GPT_ENT_TYPE_SOLARIS_RESERVED5	./src/common.h	211;"	d
GPT_ENT_TYPE_SOLARIS_ROOT	./src/common.h	188;"	d
GPT_ENT_TYPE_SOLARIS_SWAP	./src/common.h	190;"	d
GPT_ENT_TYPE_SOLARIS_USR	./src/common.h	194;"	d
GPT_ENT_TYPE_SOLARIS_VAR	./src/common.h	197;"	d
GPT_ENT_TYPE_UNUSED	./src/common.h	121;"	d
GPT_HDR_REVISION	./src/partgpt.h	33;"	d
GPT_HDR_SIG	./src/partgpt.h	31;"	d
GS_DEFAULT	./src/intrfn.c	76;"	d	file:
GS_key_ESCAPE	./src/intrfn.c	77;"	d	file:
GV	./src/file_it.c	/^  uint8_t  GV;$/;"	m	struct:impulse_header	file:
GZ_FCOMMENT	./src/file_gz.c	76;"	d	file:
GZ_FEXTRA	./src/file_gz.c	74;"	d	file:
GZ_FHCRC	./src/file_gz.c	73;"	d	file:
GZ_FNAME	./src/file_gz.c	75;"	d	file:
GZ_FTEXT	./src/file_gz.c	72;"	d	file:
GoodConfidencePointsA	./src/file_sp3.h	/^  uint8_t    	GoodConfidencePointsA;		\/* 1 bytes   (    428    ) *\/$/;"	m	struct:SP3FileInfo
GoodConfidencePointsB	./src/file_sp3.h	/^  uint8_t    	GoodConfidencePointsB;		\/* 1 bytes   (    436    ) *\/$/;"	m	struct:SP3FileInfo
HAVE_BOOLEAN	./src/suspend.c	48;"	d	file:
HAVE_LIBEWF_V2_API	./src/ewf.c	65;"	d	file:
HDDlistWidget	./src/qphotorec.h	/^                QComboBox 		*HDDlistWidget;$/;"	m	class:QPhotorec
HDPARM_BUF_SIZ	./src/msdos.c	46;"	d	file:
HDPI	./src/file_pct.c	/^  uint32_t HDPI;		\/* 0x14 *\/$/;"	m	struct:pct_file_entry	file:
HD_RW_BUF_SIZ	./src/msdos.c	45;"	d	file:
HFSPLUS_VOL_HARDLOCK	./src/hfsp.h	135;"	d
HFSPLUS_VOL_INCNSTNT	./src/hfsp.h	142;"	d
HFSPLUS_VOL_NOCACHE	./src/hfsp.h	140;"	d
HFSPLUS_VOL_RESERVED1	./src/hfsp.h	134;"	d
HFSPLUS_VOL_RESERVED2	./src/hfsp.h	146;"	d
HFSPLUS_VOL_RESERVED3	./src/hfsp.h	148;"	d
HFSPLUS_VOL_SOFTLOCK	./src/hfsp.h	147;"	d
HFSPLUS_VOL_SPARE_BLK	./src/hfsp.h	139;"	d
HFSPLUS_VOL_UNMNT	./src/hfsp.h	136;"	d
HFSP_BLOCKSZ	./src/hfsp.h	33;"	d
HFSP_BLOCKSZ_BITS	./src/hfsp.h	34;"	d
HFSP_BOOT_SECTOR_SIZE	./src/hfsp.h	32;"	d
HFSP_CAT_KEY_MAX_LEN	./src/hfsp.h	45;"	d
HFSP_CAT_KEY_MIN_LEN	./src/hfsp.h	42;"	d
HFSP_VERSION	./src/hfsp.h	38;"	d
HFSP_VOLHEAD_SIG	./src/hfsp.h	35;"	d
HFSX_VERSION	./src/hfsp.h	39;"	d
HFSX_VOLHEAD_SIG	./src/hfsp.h	36;"	d
HFS_HFSP_boot_sector	./src/thfs.c	/^int HFS_HFSP_boot_sector(disk_t *disk_car, partition_t *partition, const int verbose, char **current_cmd)$/;"	f
HFS_SUPERBLOCK_SIZE	./src/hfs.h	28;"	d
HFS_SUPER_MAGIC	./src/hfs.h	29;"	d
HIGHDENSITYTREC	./src/file_dump.c	61;"	d	file:
HScrSize	./src/file_pcx.c	/^  uint16_t HScrSize; 	\/* only supported by		*\/$/;"	m	struct:pcx_file_entry	file:
HWaccumFlag	./src/file_spe.c	/^  int16_t           HWaccumFlag;       \/* 1432 set to 1 if accum done by Hardware  *\/$/;"	m	struct:header_spe	file:
HeaderOpcode	./src/file_pct.c	/^  uint16_t HeaderOpcode; 	\/* 0x0E 0x0C00 *\/$/;"	m	struct:pct_file_entry	file:
ID	./src/file_bac.c	/^  char ID[4];              	    \/* Identification and block level *\/$/;"	m	struct:block_header	file:
IDE_DRIVE_TASK_NO_DATA	./src/hpa_dco.c	95;"	d	file:
IDE_STATUS_OFFSET	./src/hpa_dco.c	64;"	d	file:
IMAGE_NT_OPTIONAL_HDR64_MAGIC	./src/pe.h	165;"	d
IMAGE_NT_OPTIONAL_HDR_MAGIC	./src/pe.h	162;"	d
IMAGE_NT_SIGNATURE	./src/pe.h	26;"	d
IMAGE_SIZEOF_SYMBOL	./src/pe.h	159;"	d
IMAGE_WIN16_SIGNATURE	./src/pe.h	27;"	d
INDEX_TYPE_OFFSET	./src/file_pst.c	47;"	d	file:
INDSTOP_CONTINUE	./src/godmode.c	/^typedef enum { INDSTOP_CONTINUE=0, INDSTOP_STOP=1, INDSTOP_SKIP=2, INDSTOP_QUIT=3 } indstop_t;$/;"	e	enum:__anon72	file:
INDSTOP_QUIT	./src/godmode.c	/^typedef enum { INDSTOP_CONTINUE=0, INDSTOP_STOP=1, INDSTOP_SKIP=2, INDSTOP_QUIT=3 } indstop_t;$/;"	e	enum:__anon72	file:
INDSTOP_SKIP	./src/godmode.c	/^typedef enum { INDSTOP_CONTINUE=0, INDSTOP_STOP=1, INDSTOP_SKIP=2, INDSTOP_QUIT=3 } indstop_t;$/;"	e	enum:__anon72	file:
INDSTOP_STOP	./src/godmode.c	/^typedef enum { INDSTOP_CONTINUE=0, INDSTOP_STOP=1, INDSTOP_SKIP=2, INDSTOP_QUIT=3 } indstop_t;$/;"	e	enum:__anon72	file:
INIT_SPACE_EXT2_GROUP	./src/phcli.c	/^typedef enum { INIT_SPACE_WHOLE, INIT_SPACE_PREINIT, INIT_SPACE_EXT2_GROUP, INIT_SPACE_EXT2_INODE } init_mode_t;$/;"	e	enum:__anon51	file:
INIT_SPACE_EXT2_INODE	./src/phcli.c	/^typedef enum { INIT_SPACE_WHOLE, INIT_SPACE_PREINIT, INIT_SPACE_EXT2_GROUP, INIT_SPACE_EXT2_INODE } init_mode_t;$/;"	e	enum:__anon51	file:
INIT_SPACE_PREINIT	./src/phcli.c	/^typedef enum { INIT_SPACE_WHOLE, INIT_SPACE_PREINIT, INIT_SPACE_EXT2_GROUP, INIT_SPACE_EXT2_INODE } init_mode_t;$/;"	e	enum:__anon51	file:
INIT_SPACE_WHOLE	./src/phcli.c	/^typedef enum { INIT_SPACE_WHOLE, INIT_SPACE_PREINIT, INIT_SPACE_EXT2_GROUP, INIT_SPACE_EXT2_INODE } init_mode_t;$/;"	e	enum:__anon51	file:
INQ_CMD_LEN	./src/hdaccess.c	879;"	d	file:
INQ_REPLY_LEN	./src/hdaccess.c	880;"	d	file:
INTER_ADV	./src/adv.c	76;"	d	file:
INTER_ADV_X	./src/adv.c	74;"	d	file:
INTER_ADV_Y	./src/adv.c	75;"	d	file:
INTER_ANALYSE_MENU_X	./src/intrfn.c	859;"	d	file:
INTER_ANALYSE_MENU_Y	./src/intrfn.c	860;"	d	file:
INTER_ANALYSE_X	./src/intrfn.c	857;"	d	file:
INTER_ANALYSE_Y	./src/intrfn.c	858;"	d	file:
INTER_BAD_PART	./src/godmode.c	71;"	d	file:
INTER_CHGTYPE	./src/chgtypen.c	119;"	d	file:
INTER_CHGTYPE_X	./src/chgtypen.c	120;"	d	file:
INTER_CHGTYPE_Y	./src/chgtypen.c	121;"	d	file:
INTER_DIR	./src/dirn.c	52;"	d	file:
INTER_DIR	./src/fat_adv.c	175;"	d	file:
INTER_DIR	./src/intrfn.c	75;"	d	file:
INTER_DIR	./src/ntfs_udl.c	1189;"	d	file:
INTER_DISK_X	./src/diskacc.c	39;"	d	file:
INTER_DISK_X	./src/hiddenn.c	34;"	d	file:
INTER_DISK_X	./src/intrface.c	49;"	d	file:
INTER_DISK_X	./src/pdiskseln.c	61;"	d	file:
INTER_DISK_X	./src/tdelete.c	38;"	d	file:
INTER_DISK_X	./src/tdiskop.c	51;"	d	file:
INTER_DISK_X	./src/tdisksel.c	55;"	d	file:
INTER_DISK_X	./src/tmbrcode.c	41;"	d	file:
INTER_DISK_Y	./src/diskacc.c	40;"	d	file:
INTER_DISK_Y	./src/hiddenn.c	35;"	d	file:
INTER_DISK_Y	./src/intrface.c	50;"	d	file:
INTER_DISK_Y	./src/pdiskseln.c	62;"	d	file:
INTER_DISK_Y	./src/tdelete.c	39;"	d	file:
INTER_DISK_Y	./src/tdiskop.c	52;"	d	file:
INTER_DISK_Y	./src/tdisksel.c	56;"	d	file:
INTER_DISK_Y	./src/tmbrcode.c	42;"	d	file:
INTER_DUMP_X	./src/intrfn.c	586;"	d	file:
INTER_DUMP_Y	./src/intrfn.c	587;"	d	file:
INTER_EDIT_X	./src/edit.c	49;"	d	file:
INTER_EDIT_Y	./src/edit.c	50;"	d	file:
INTER_FATBS_X	./src/fat_adv.c	63;"	d	file:
INTER_FATBS_Y	./src/fat_adv.c	64;"	d	file:
INTER_FAT_ASK_X	./src/fat_adv.c	61;"	d	file:
INTER_FAT_ASK_Y	./src/fat_adv.c	62;"	d	file:
INTER_FSELECT	./src/phrecn.c	563;"	d	file:
INTER_FSELECT_X	./src/phrecn.c	561;"	d	file:
INTER_FSELECT_Y	./src/phrecn.c	562;"	d	file:
INTER_GEOM_X	./src/intrf.h	42;"	d
INTER_GEOM_Y	./src/intrf.h	43;"	d
INTER_LOAD	./src/tload.c	54;"	d	file:
INTER_LOAD_X	./src/tload.c	55;"	d	file:
INTER_LOAD_Y	./src/tload.c	56;"	d	file:
INTER_MAIN_X	./src/intrf.h	40;"	d
INTER_MAIN_Y	./src/intrf.h	41;"	d
INTER_MAX_LINES	./src/intrfn.c	861;"	d	file:
INTER_MFT_X	./src/ntfs_fix.c	50;"	d	file:
INTER_MFT_Y	./src/ntfs_fix.c	51;"	d	file:
INTER_NOTE_Y	./src/pdiskseln.c	63;"	d	file:
INTER_NOTE_Y	./src/tdisksel.c	57;"	d	file:
INTER_NTFSBS_X	./src/ntfs_adv.c	47;"	d	file:
INTER_NTFSBS_Y	./src/ntfs_adv.c	48;"	d	file:
INTER_NTFS_X	./src/ntfs_adv.c	45;"	d	file:
INTER_NTFS_Y	./src/ntfs_adv.c	46;"	d	file:
INTER_OPTION_X	./src/intrf.h	36;"	d
INTER_OPTION_Y	./src/intrf.h	37;"	d
INTER_PARTITION_X	./src/intrf.h	38;"	d
INTER_PARTITION_Y	./src/intrf.h	39;"	d
INTER_SELECT	./src/ppartseln.c	61;"	d	file:
INTER_SELECT_X	./src/ppartseln.c	59;"	d	file:
INTER_SELECT_Y	./src/ppartseln.c	60;"	d	file:
INTER_STRUCTURE	./src/intrface.c	109;"	d	file:
IS	./src/file_it.c	/^  uint8_t  IS;$/;"	m	struct:impulse_header	file:
ISO_PD_SIZE	./src/iso9660.h	63;"	d
IS_FREE	./src/fat.c	60;"	d	file:
IS_FREE	./src/fat.h	133;"	d
IT	./src/file_it.c	/^  uint8_t  IT;$/;"	m	struct:impulse_header	file:
IdadeDoente	./src/file_sp3.h	/^  uint8_t    	IdadeDoente;			\/* 1 bytes   (    414    ) *\/$/;"	m	struct:SP3FileInfo
ImageBase	./src/pe.h	/^  uint32_t ImageBase;				    \/* multiple of 64 KB *\/$/;"	m	struct:pe_image_optional_hdr32
ImageBase	./src/pe.h	/^  uint64_t ImageBase;				    \/* multiple of 64 KB *\/$/;"	m	struct:pe_image_optional_hdr64
ImageTag	./src/file_wim.c	/^  char			ImageTag[8];$/;"	m	struct:_WIMHEADER_V1_PACKED	file:
InDesignContigObjMarker	./src/file_indd.c	/^struct InDesignContigObjMarker {$/;"	s	file:
InDesignMasterPage	./src/file_indd.c	/^struct InDesignMasterPage {$/;"	s	file:
InsNum	./src/file_it.c	/^  uint16_t InsNum;$/;"	m	struct:impulse_header	file:
InternalDataBaseKey_OLD	./src/file_sp3.h	/^  uint32_t    	InternalDataBaseKey_OLD;	\/* 4 bytes   ( 529 - 532) *\/$/;"	m	struct:SP3FileInfo
InternalDataBaseKey__NEW	./src/file_sp3.h	/^  char     	InternalDataBaseKey__NEW[38];	\/* 38 bytes  ( 575 - 612) *\/$/;"	m	struct:SP3FileInfo
InternalName	./src/file_exe.c	/^static char InternalName[24]={$/;"	v	file:
InvalidPointsA	./src/file_sp3.h	/^  uint8_t    	InvalidPointsA;			\/* 1 bytes   (    426    ) *\/$/;"	m	struct:SP3FileInfo
InvalidPointsB	./src/file_sp3.h	/^  uint8_t    	InvalidPointsB;			\/* 1 bytes   (    434    ) *\/$/;"	m	struct:SP3FileInfo
Istring	./src/file_spe.c	/^  char          Istring[40];       \/* 3978  special Intensity scaling string   *\/$/;"	m	struct:header_spe	file:
JFS_SUPERBLOCK_SIZE	./src/jfs.h	26;"	d
JFS_SUPER_MAGIC	./src/jfs_superblock.h	26;"	d
JFS_VERSION	./src/jfs_superblock.h	27;"	d
JPG_MAX_OFFSETS	./src/file_jpg.c	1013;"	d	file:
L2BPERDMAP	./src/jfs.h	28;"	d
LABELOFFSET	./src/bsd.h	37;"	d
LABELOFFSET	./src/bsd.h	45;"	d
LABELSECTOR	./src/bsd.h	36;"	d
LABELSECTOR	./src/bsd.h	41;"	d
LABEL_ID	./src/lvm.h	97;"	d
LABEL_PART	./src/bsd.h	50;"	d
LBLSIZE	./src/file_dump.c	63;"	d	file:
LINUX_S_IALLUGO	./src/dir.h	117;"	d
LINUX_S_IFBLK	./src/dir.h	92;"	d
LINUX_S_IFCHR	./src/dir.h	94;"	d
LINUX_S_IFDIR	./src/dir.h	93;"	d
LINUX_S_IFIFO	./src/dir.h	95;"	d
LINUX_S_IFLNK	./src/dir.h	90;"	d
LINUX_S_IFMT	./src/dir.h	88;"	d
LINUX_S_IFREG	./src/dir.h	91;"	d
LINUX_S_IFSOCK	./src/dir.h	89;"	d
LINUX_S_IRGRP	./src/dir.h	107;"	d
LINUX_S_IROTH	./src/dir.h	112;"	d
LINUX_S_IRUGO	./src/dir.h	118;"	d
LINUX_S_IRUSR	./src/dir.h	102;"	d
LINUX_S_IRWXG	./src/dir.h	106;"	d
LINUX_S_IRWXO	./src/dir.h	111;"	d
LINUX_S_IRWXU	./src/dir.h	101;"	d
LINUX_S_IRWXUGO	./src/dir.h	116;"	d
LINUX_S_ISBLK	./src/dir.h	126;"	d
LINUX_S_ISCHR	./src/dir.h	125;"	d
LINUX_S_ISDIR	./src/dir.h	124;"	d
LINUX_S_ISFIFO	./src/dir.h	127;"	d
LINUX_S_ISGID	./src/dir.h	97;"	d
LINUX_S_ISLNK	./src/dir.h	122;"	d
LINUX_S_ISREG	./src/dir.h	123;"	d
LINUX_S_ISSOCK	./src/dir.h	128;"	d
LINUX_S_ISUID	./src/dir.h	96;"	d
LINUX_S_ISVTX	./src/dir.h	98;"	d
LINUX_S_IWGRP	./src/dir.h	108;"	d
LINUX_S_IWOTH	./src/dir.h	113;"	d
LINUX_S_IWUGO	./src/dir.h	119;"	d
LINUX_S_IWUSR	./src/dir.h	103;"	d
LINUX_S_IXGRP	./src/dir.h	109;"	d
LINUX_S_IXOTH	./src/dir.h	114;"	d
LINUX_S_IXUGO	./src/dir.h	120;"	d
LINUX_S_IXUSR	./src/dir.h	104;"	d
LIST_POISON1	./src/list.h	29;"	d
LIST_POISON2	./src/list.h	30;"	d
LOG_LEVEL_CRITICAL	./src/log.h	51;"	d
LOG_LEVEL_DEBUG	./src/log.h	42;"	d
LOG_LEVEL_ERROR	./src/log.h	49;"	d
LOG_LEVEL_INFO	./src/log.h	45;"	d
LOG_LEVEL_PERROR	./src/log.h	50;"	d
LOG_LEVEL_PROGRESS	./src/log.h	47;"	d
LOG_LEVEL_QUIET	./src/log.h	44;"	d
LOG_LEVEL_TRACE	./src/log.h	43;"	d
LOG_LEVEL_VERBOSE	./src/log.h	46;"	d
LOG_LEVEL_WARNING	./src/log.h	48;"	d
LONG_OPT	./src/ext2_dir.c	56;"	d	file:
LUKS_CIPHERMODE_L	./src/luks.h	28;"	d
LUKS_CIPHERNAME_L	./src/luks.h	27;"	d
LUKS_DIGESTSIZE	./src/luks.h	30;"	d
LUKS_HASHSPEC_L	./src/luks.h	29;"	d
LUKS_MAGIC_L	./src/luks.h	33;"	d
LUKS_NUMKEYS	./src/luks.h	32;"	d
LUKS_SALTSIZE	./src/luks.h	31;"	d
LVM2_LABEL	./src/lvm.h	96;"	d
LVM_DIR_PREFIX	./src/lvm.h	48;"	d
LVM_ID	./src/lvm.h	47;"	d
LVM_MAX_PE_SIZE	./src/lvm.h	51;"	d
LVM_MAX_SIZE	./src/lvm.h	46;"	d
LVM_MIN_PE_SIZE	./src/lvm.h	50;"	d
LVM_PV_DISK_BASE	./src/lvm.h	41;"	d
LVM_PV_DISK_SIZE	./src/lvm.h	43;"	d
LV_NAME_SIZE	./src/jfs_superblock.h	29;"	d
LoaderFlags	./src/pe.h	/^  uint32_t LoaderFlags;			    \/* ? *\/$/;"	m	struct:pe_image_optional_hdr32
LoaderFlags	./src/pe.h	/^  uint32_t LoaderFlags;			    \/* ? *\/$/;"	m	struct:pe_image_optional_hdr64
LocalBedOrDevice	./src/file_sp3.h	/^  char     	LocalBedOrDevice[4];		\/* 4 bytes   ( 241 - 244 ) *\/$/;"	m	struct:SP3FileInfo
LocalCod	./src/file_sp3.h	/^  char     	LocalCod[6];			\/* 6 bytes   (  33 -  38 ) *\/$/;"	m	struct:SP3FileInfo
LocalNome	./src/file_sp3.h	/^  char     	LocalNome[128];			\/* 128 bytes (  41 - 168 ) *\/$/;"	m	struct:SP3FileInfo
LocalServicePlace	./src/file_sp3.h	/^  char     	LocalServicePlace[6];		\/* 6 bytes   ( 169 - 174 ) *\/$/;"	m	struct:SP3FileInfo
MAGIC_SIZE	./src/rfs.h	78;"	d
MALLOC	./src/common.c	/^void *MALLOC(size_t size)$/;"	f
MAXIMUM_PARTS	./src/intrf.h	34;"	d
MAX_ALLOC_CHUNK	./src/suspend.c	91;"	d	file:
MAX_DIR_NBR	./src/dir.c	271;"	d	file:
MAX_DIR_NBR	./src/dirn.c	533;"	d	file:
MAX_DIR_NBR	./src/dirn.c	598;"	d	file:
MAX_FILES_PER_DIR	./src/photorec.h	25;"	d
MAX_HD_ERR	./src/msdos.c	48;"	d	file:
MAX_HEADS	./src/geometry.c	41;"	d	file:
MAX_HEADS	./src/geometryn.c	44;"	d	file:
MAX_INFO_MFT	./src/ntfs_adv.c	50;"	d	file:
MAX_IO_NBR	./src/msdos.c	47;"	d	file:
MAX_LINES	./src/intrf.h	32;"	d
MAX_LIST_LENGTH_BITS	./src/list_sort.c	32;"	d	file:
MAX_LV	./src/lvm.h	49;"	d
MAX_PAGE_SIZE	./src/swap.c	40;"	d	file:
MAX_PATH	./src/ntfs_dir.c	84;"	d	file:
MAX_SEARCH_LOCATION	./src/godmode.c	54;"	d	file:
MD_DISK_ACTIVE	./src/md.h	94;"	d
MD_DISK_FAULTY	./src/md.h	93;"	d
MD_DISK_REMOVED	./src/md.h	96;"	d
MD_DISK_SYNC	./src/md.h	95;"	d
MD_MAX_CHUNK_SIZE	./src/md.h	59;"	d
MD_NEW_SIZE_BLOCKS	./src/md.h	65;"	d
MD_NEW_SIZE_SECTORS	./src/md.h	64;"	d
MD_RESERVED_BLOCKS	./src/md.h	62;"	d
MD_RESERVED_BYTES	./src/md.h	60;"	d
MD_RESERVED_SECTORS	./src/md.h	61;"	d
MD_SB_BLOCKS	./src/md.h	69;"	d
MD_SB_BYTES	./src/md.h	67;"	d
MD_SB_CLEAN	./src/md.h	112;"	d
MD_SB_DESCRIPTOR_OFFSET	./src/md.h	78;"	d
MD_SB_DESCRIPTOR_WORDS	./src/md.h	84;"	d
MD_SB_DISKS	./src/md.h	85;"	d
MD_SB_DISKS_OFFSET	./src/md.h	77;"	d
MD_SB_DISKS_WORDS	./src/md.h	86;"	d
MD_SB_EQUAL_WORDS	./src/md.h	88;"	d
MD_SB_ERRORS	./src/md.h	113;"	d
MD_SB_GENERIC_CONSTANT_WORDS	./src/md.h	80;"	d
MD_SB_GENERIC_OFFSET	./src/md.h	75;"	d
MD_SB_GENERIC_STATE_WORDS	./src/md.h	81;"	d
MD_SB_GENERIC_WORDS	./src/md.h	82;"	d
MD_SB_MAGIC	./src/md.h	107;"	d
MD_SB_PERSONALITY_OFFSET	./src/md.h	76;"	d
MD_SB_PERSONALITY_WORDS	./src/md.h	83;"	d
MD_SB_RESERVED_WORDS	./src/md.h	87;"	d
MD_SB_SECTORS	./src/md.h	70;"	d
MD_SB_WORDS	./src/md.h	68;"	d
MENU_ACCEPT_OTHERS	./src/intrf.h	47;"	d
MENU_BUTTON	./src/intrf.h	48;"	d
MENU_HORIZ	./src/intrf.h	45;"	d
MENU_MAX_ITEMS	./src/intrf.h	53;"	d
MENU_SPACING	./src/intrf.h	52;"	d
MENU_VERT	./src/intrf.h	46;"	d
MENU_VERT_ARROW2VALID	./src/intrf.h	50;"	d
MENU_VERT_WARN	./src/intrf.h	49;"	d
METHODDEF	./src/suspend.c	/^METHODDEF(JSAMPARRAY) access_virt_sarray (j_common_ptr cinfo, jvirt_sarray_ptr ptr,$/;"	f
METHODDEF	./src/suspend.c	/^METHODDEF(JSAMPARRAY) alloc_sarray (j_common_ptr cinfo, int pool_id, $/;"	f
METHODDEF	./src/suspend.c	/^METHODDEF(jvirt_sarray_ptr) request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,$/;"	f
MHD_PASSWORD	./src/file_rar.c	54;"	d	file:
MHR_CRC32	./src/file_sp3.h	/^  uint32_t    	MHR_CRC32; $/;"	m	struct:SP3FileInfo
MHR_LEN	./src/file_sp3.h	/^  uint32_t    	MHR_LEN; $/;"	m	struct:SP3FileInfo
MHR_POS	./src/file_sp3.h	/^  uint32_t    	MHR_POS; $/;"	m	struct:SP3FileInfo
MIG_HDR	./src/file_mig.c	/^struct MIG_HDR$/;"	s	file:
MINIMUM_LINES	./src/intrfn.c	72;"	d	file:
MPEG_L1	./src/file_mp3.c	60;"	d	file:
MPEG_L2	./src/file_mp3.c	59;"	d	file:
MPEG_L3	./src/file_mp3.c	58;"	d	file:
MPEG_V1	./src/file_mp3.c	57;"	d	file:
MPEG_V2	./src/file_mp3.c	56;"	d	file:
MPEG_V25	./src/file_mp3.c	55;"	d	file:
MP_Entry	./src/file_jpg.c	/^struct MP_Entry$/;"	s	file:
MP_IFD_Field	./src/file_jpg.c	/^struct MP_IFD_Field$/;"	s	file:
MSDOS_MKMODE	./src/fat_dir.c	52;"	d	file:
MS_res_header	./src/file_res.c	/^static const unsigned char MS_res_header[14]= {0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,$/;"	v	file:
MV	./src/file_it.c	/^  uint8_t  MV;$/;"	m	struct:impulse_header	file:
Machine	./src/pe.h	/^    uint16_t Machine;$/;"	m	struct:pe_image_file_hdr
Magic	./src/pe.h	/^    uint32_t Magic;$/;"	m	struct:pe_image_file_hdr
Magic	./src/pe.h	/^  uint16_t Magic;$/;"	m	struct:pe_image_optional_hdr32
Magic	./src/pe.h	/^  uint16_t Magic;$/;"	m	struct:pe_image_optional_hdr64
MajorImageVersion	./src/pe.h	/^  uint16_t MajorImageVersion;			    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr32
MajorImageVersion	./src/pe.h	/^  uint16_t MajorImageVersion;			    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr64
MajorLinkerVersion	./src/pe.h	/^  uint8_t  MajorLinkerVersion;		    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr32
MajorLinkerVersion	./src/pe.h	/^  uint8_t  MajorLinkerVersion;		    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr64
MajorOperatingSystemVersion	./src/pe.h	/^  uint16_t MajorOperatingSystemVersion;	    \/* not used *\/$/;"	m	struct:pe_image_optional_hdr32
MajorOperatingSystemVersion	./src/pe.h	/^  uint16_t MajorOperatingSystemVersion;	    \/* not used *\/$/;"	m	struct:pe_image_optional_hdr64
MajorSubsystemVersion	./src/pe.h	/^  uint16_t MajorSubsystemVersion;$/;"	m	struct:pe_image_optional_hdr32
MajorSubsystemVersion	./src/pe.h	/^  uint16_t MajorSubsystemVersion;$/;"	m	struct:pe_image_optional_hdr64
Manufacturer	./src/file_pcx.c	/^  uint8_t  Manufacturer; \/* should always be 0Ah		*\/$/;"	m	struct:pcx_file_entry	file:
MasterHeader	./src/file_ddf.c	/^struct MasterHeader$/;"	s	file:
Maternal_HR_CRC32	./src/file_sp3.h	/^  uint32_t    	Maternal_HR_CRC32; $/;"	m	struct:SP3FileInfo
Maternal_HR_LEN	./src/file_sp3.h	/^  uint32_t    	Maternal_HR_LEN; $/;"	m	struct:SP3FileInfo
Maternal_HR_POS	./src/file_sp3.h	/^  uint32_t    	Maternal_HR_POS; $/;"	m	struct:SP3FileInfo
Maternal_POS_CRC32	./src/file_sp3.h	/^  uint32_t    	Maternal_POS_CRC32; $/;"	m	struct:SP3FileInfo
Maternal_POS_LEN	./src/file_sp3.h	/^  uint32_t    	Maternal_POS_LEN; $/;"	m	struct:SP3FileInfo
Maternal_POS_POS	./src/file_sp3.h	/^  uint32_t    	Maternal_POS_POS; $/;"	m	struct:SP3FileInfo
Maternal_SpO2_CRC32	./src/file_sp3.h	/^  uint32_t    	Maternal_SpO2_CRC32; $/;"	m	struct:SP3FileInfo
Maternal_SpO2_LEN	./src/file_sp3.h	/^  uint32_t    	Maternal_SpO2_LEN; $/;"	m	struct:SP3FileInfo
Maternal_SpO2_POS	./src/file_sp3.h	/^  uint32_t    	Maternal_SpO2_POS; $/;"	m	struct:SP3FileInfo
MaxIntensity	./src/file_spe.c	/^  float         MaxIntensity;      \/* 1450 max intensity of data (future)      *\/$/;"	m	struct:header_spe	file:
MenuItem	./src/intrf.h	/^struct MenuItem$/;"	s
MinIntensity	./src/file_spe.c	/^  float         MinIntensity;      \/* 1454 min intensity of data (future)      *\/$/;"	m	struct:header_spe	file:
MiniFat_block	./src/ole.h	/^	uint32_t	MiniFat_block;			\/*60 first sec in the mini fat chain*\/$/;"	m	struct:OLE_HDR
MinorImageVersion	./src/pe.h	/^  uint16_t MinorImageVersion;			    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr32
MinorImageVersion	./src/pe.h	/^  uint16_t MinorImageVersion;			    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr64
MinorLinkerVersion	./src/pe.h	/^  uint8_t  MinorLinkerVersion;		    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr32
MinorLinkerVersion	./src/pe.h	/^  uint8_t  MinorLinkerVersion;		    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr64
MinorOperatingSystemVersion	./src/pe.h	/^  uint16_t MinorOperatingSystemVersion;	    \/* not used *\/$/;"	m	struct:pe_image_optional_hdr32
MinorOperatingSystemVersion	./src/pe.h	/^  uint16_t MinorOperatingSystemVersion;	    \/* not used *\/$/;"	m	struct:pe_image_optional_hdr64
MinorSubsystemVersion	./src/pe.h	/^  uint16_t MinorSubsystemVersion;$/;"	m	struct:pe_image_optional_hdr32
MinorSubsystemVersion	./src/pe.h	/^  uint16_t MinorSubsystemVersion;$/;"	m	struct:pe_image_optional_hdr64
MsgLgth	./src/file_it.c	/^  uint16_t MsgLgth;$/;"	m	struct:impulse_header	file:
MsgOff	./src/file_it.c	/^  uint16_t MsgOff;$/;"	m	struct:impulse_header	file:
NAMELEN	./src/file_dump.c	64;"	d	file:
NAME_LEN	./src/lvm.h	44;"	d
NBR_CLUSTER_MAX	./src/exfat_dir.c	221;"	d	file:
NBR_CLUSTER_MAX	./src/fat_dir.c	316;"	d	file:
NBR_DISK_MAX	./src/pdiskseln.c	60;"	d	file:
NBR_DISK_MAX	./src/tdisksel.c	54;"	d	file:
NDDATA	./src/bsd.h	129;"	d
NL_BARECR	./src/filegen.h	122;"	d
NL_BARENL	./src/filegen.h	120;"	d
NL_CRLF	./src/filegen.h	121;"	d
NO_ENTRY	./src/ole.h	26;"	d
NO_ORDER	./src/common.h	81;"	d
NSPARE	./src/bsd.h	131;"	d
NTFS_BOOT_SECTOR_SIZE	./src/ntfs.h	26;"	d
NTFS_DT_DIR	./src/ntfs_dir.c	86;"	d	file:
NTFS_DT_REG	./src/ntfs_dir.c	87;"	d	file:
NTFS_GETU16	./src/ntfs.h	252;"	d
NTFS_GETU32	./src/ntfs.h	253;"	d
NTFS_GETU64	./src/ntfs.h	254;"	d
NTFS_GETU8	./src/ntfs.h	251;"	d
NTFS_Magic	./src/ntfs.h	59;"	d
NTFS_NAME	./src/fat.h	33;"	d
NTFS_SECTOR_SIZE	./src/ntfs_adv.c	51;"	d	file:
NTFS_TIME_OFFSET	./src/common.c	271;"	d	file:
NTREC	./src/file_dump.c	60;"	d	file:
Name	./src/pe.h	/^  uint8_t Name[8];			    \/* may not end with NULL *\/$/;"	m	struct:pe_image_section_hdr
NomeDoente	./src/file_sp3.h	/^  char     	NomeDoente[128];		\/* 128 bytes ( 281 - 408 ) *\/$/;"	m	struct:SP3FileInfo
NumFrames	./src/file_spe.c	/^  int32_t          NumFrames;         \/* 1446 number of frames in file.           *\/$/;"	m	struct:header_spe	file:
NumROI	./src/file_spe.c	/^  int16_t           NumROI;            \/* 1510  number of ROIs used. if 0 assume 1 *\/$/;"	m	struct:header_spe	file:
NumSkpPerCln	./src/file_spe.c	/^  uint16_t  NumSkpPerCln;      \/*  620 number of skips per clean.          *\/$/;"	m	struct:header_spe	file:
NumberOfLinenumbers	./src/pe.h	/^  uint16_t NumberOfLinenumbers;	    \/* object files only *\/$/;"	m	struct:pe_image_section_hdr
NumberOfRelocations	./src/pe.h	/^  uint16_t NumberOfRelocations;	    \/* object files only *\/$/;"	m	struct:pe_image_section_hdr
NumberOfRvaAndSizes	./src/pe.h	/^  uint32_t NumberOfRvaAndSizes;		    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr32
NumberOfRvaAndSizes	./src/pe.h	/^  uint32_t NumberOfRvaAndSizes;		    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr64
NumberOfSections	./src/pe.h	/^    uint16_t NumberOfSections;$/;"	m	struct:pe_image_file_hdr
NumberOfSymbols	./src/pe.h	/^    uint32_t NumberOfSymbols;		    \/* debug *\/$/;"	m	struct:pe_image_file_hdr
NumeroDoente	./src/file_sp3.h	/^  char     	NumeroDoente[16];		\/* 16 bytes  ( 257 - 272 ) *\/$/;"	m	struct:SP3FileInfo
NumeroEpisodioAdicional	./src/file_sp3.h	/^  char  	NumeroEpisodioAdicional[16];	\/* 16 bytes  ( 487 - 502 ) *\/$/;"	m	struct:SP3FileInfo
NumeroEpisodioConsulta	./src/file_sp3.h	/^  char     	NumeroEpisodioConsulta[16];	\/* 16 bytes  ( 471 - 486 ) *\/$/;"	m	struct:SP3FileInfo
NumeroEpisodioInternamento	./src/file_sp3.h	/^  char     	NumeroEpisodioInternamento[16];	\/* 16 bytes  ( 455 - 470 ) *\/$/;"	m	struct:SP3FileInfo
NumeroEpisodioUrgencia	./src/file_sp3.h	/^  char     	NumeroEpisodioUrgencia[16];	\/* 16 bytes  ( 439 - 454 ) *\/$/;"	m	struct:SP3FileInfo
NumeroFetos	./src/file_sp3.h	/^  uint8_t    	NumeroFetos;			\/* 1 bytes   (    418    ) *\/$/;"	m	struct:SP3FileInfo
NumeroMeses	./src/file_sp3.h	/^  uint8_t    	NumeroMeses;			\/* 1 bytes   (    420    ) *\/$/;"	m	struct:SP3FileInfo
OLE_DIR	./src/ole.h	/^struct OLE_DIR$/;"	s
OLE_HDR	./src/ole.h	/^struct OLE_HDR$/;"	s
OLE_load_FAT	./src/file_doc.c	/^static uint32_t *OLE_load_FAT(FILE *IN, const struct OLE_HDR *header)$/;"	f	file:
OLE_load_MiniFAT	./src/file_doc.c	/^static uint32_t *OLE_load_MiniFAT(FILE *IN, const struct OLE_HDR *header, const uint32_t *fat, const unsigned int fat_entries)$/;"	f	file:
OLE_parse_summary	./src/file_doc.c	/^static void OLE_parse_summary(FILE *file, const uint32_t *fat, const unsigned int fat_entries,$/;"	f	file:
OLE_parse_summary_aux	./src/file_doc.c	/^static void OLE_parse_summary_aux(const unsigned char *dataPt, const unsigned int dirLen, const char **ext, char **title, time_t *file_time)$/;"	f	file:
OLE_read_ministream	./src/file_doc.c	/^static void *OLE_read_ministream(unsigned char *ministream,$/;"	f	file:
OLE_read_stream	./src/file_doc.c	/^static void *OLE_read_stream(FILE *IN,$/;"	f	file:
OPENBSD_MAXPARTITIONS	./src/common.h	439;"	d
OPENPGP_TAG_MARKER	./src/file_gpg.c	70;"	d	file:
OPENPGP_TAG_ONE_PASS_SIG	./src/file_gpg.c	59;"	d	file:
OPENPGP_TAG_PUBKEY_ENC_SESSION_KEY	./src/file_gpg.c	53;"	d	file:
OPENPGP_TAG_PUB_KEY	./src/file_gpg.c	63;"	d	file:
OPENPGP_TAG_PUB_SUBKEY	./src/file_gpg.c	77;"	d	file:
OPENPGP_TAG_SEC_KEY	./src/file_gpg.c	61;"	d	file:
OPENPGP_TAG_SEC_SUBKEY	./src/file_gpg.c	65;"	d	file:
OPENPGP_TAG_SIGNATURE	./src/file_gpg.c	55;"	d	file:
OPENPGP_TAG_SYMKEY_ENC_SESSION_KEY	./src/file_gpg.c	57;"	d	file:
OPENPGP_TAG_SYM_ENC_DATA	./src/file_gpg.c	68;"	d	file:
OPENPGP_TAG_SYM_ENC_INTEGRITY	./src/file_gpg.c	81;"	d	file:
OPENPGP_TAG_TRUST	./src/file_gpg.c	73;"	d	file:
OPENPGP_TAG_USER_ID	./src/file_gpg.c	75;"	d	file:
OS2_NAME	./src/fat.h	34;"	d
OUR_BLK_SIZE	./src/ole.h	33;"	d
OXMax	./src/file_pct.c	/^  uint16_t OXMax;$/;"	m	struct:pct_file_entry	file:
OXMin	./src/file_pct.c	/^  uint16_t OXMin;$/;"	m	struct:pct_file_entry	file:
OYMax	./src/file_pct.c	/^  uint16_t OYMax;$/;"	m	struct:pct_file_entry	file:
OYMin	./src/file_pct.c	/^  uint16_t OYMin;$/;"	m	struct:pct_file_entry	file:
O_BINARY	./src/dimage.c	57;"	d	file:
O_BINARY	./src/ewf.c	57;"	d	file:
O_LARGEFILE	./src/dimage.c	54;"	d	file:
OrdNum	./src/file_it.c	/^  uint16_t OrdNum;$/;"	m	struct:impulse_header	file:
OriginalFilename	./src/file_exe.c	/^static char OriginalFilename[34]={$/;"	v	file:
PAGE_8K	./src/swap.h	27;"	d
PAGE_SIZE	./src/swap.h	26;"	d
PATH_DRIVE_LENGTH	./src/intrf.c	197;"	d	file:
PATH_SEP	./src/askloc.c	86;"	d	file:
PATH_SEP	./src/askloc.c	89;"	d	file:
PATH_SEP	./src/intrf.c	194;"	d	file:
PATH_SEP	./src/ntfs_dir.c	85;"	d	file:
PBLOCK_SIZE	./src/partmac.h	32;"	d
PEVersion	./src/file_exe.c	/^static void PEVersion(FILE *file, const unsigned int offset, const unsigned int length, const char *old_filename)$/;"	f	file:
PEVersion_aux	./src/file_exe.c	/^static int PEVersion_aux(const char*buffer, const unsigned int end, const char *old_filename, const char *needle, const unsigned int needle_len, const int force_ext)$/;"	f	file:
PE_index	./src/file_exe.c	/^struct PE_index$/;"	s	file:
PHOTOREC_CFG	./src/phcfg.c	65;"	d	file:
PHOTOREC_MAX_FILE_SIZE	./src/filegen.h	31;"	d
PHOTOREC_MAX_FILE_SIZE	./src/filegen.h	33;"	d
PHOTOREC_MAX_SIZE_16	./src/filegen.h	35;"	d
PHOTOREC_MAX_SIZE_32	./src/filegen.h	36;"	d
PHOTOREC_SIG	./src/file_sig.c	59;"	d	file:
PHUMAX_PARTITION	./src/common.h	99;"	d
PHiligt	./src/file_it.c	/^  uint16_t PHiligt;$/;"	m	struct:impulse_header	file:
PMAC_DRIVER	./src/common.h	113;"	d
PMAC_DRIVER43	./src/common.h	101;"	d
PMAC_DRIVERATA	./src/common.h	102;"	d
PMAC_DRIVERIO	./src/common.h	103;"	d
PMAC_FAT32	./src/common.h	116;"	d
PMAC_FREE	./src/common.h	104;"	d
PMAC_FWDRIVER	./src/common.h	105;"	d
PMAC_HFS	./src/common.h	108;"	d
PMAC_LINUX	./src/common.h	107;"	d
PMAC_MAP	./src/common.h	109;"	d
PMAC_MFS	./src/common.h	114;"	d
PMAC_NewWorld	./src/common.h	112;"	d
PMAC_PATCHES	./src/common.h	110;"	d
PMAC_PRODOS	./src/common.h	115;"	d
PMAC_SWAP	./src/common.h	106;"	d
PMAC_UNK	./src/common.h	111;"	d
POOL_SIZE	./src/suspend.c	42;"	d	file:
PSTATUS_EACCES	./src/photorec.h	/^typedef enum { PSTATUS_OK=0, PSTATUS_STOP=1, PSTATUS_EACCES=2, PSTATUS_ENOSPC=3} pstatus_t;$/;"	e	enum:__anon59
PSTATUS_ENOSPC	./src/photorec.h	/^typedef enum { PSTATUS_OK=0, PSTATUS_STOP=1, PSTATUS_EACCES=2, PSTATUS_ENOSPC=3} pstatus_t;$/;"	e	enum:__anon59
PSTATUS_OK	./src/photorec.h	/^typedef enum { PSTATUS_OK=0, PSTATUS_STOP=1, PSTATUS_EACCES=2, PSTATUS_ENOSPC=3} pstatus_t;$/;"	e	enum:__anon59
PSTATUS_STOP	./src/photorec.h	/^typedef enum { PSTATUS_OK=0, PSTATUS_STOP=1, PSTATUS_EACCES=2, PSTATUS_ENOSPC=3} pstatus_t;$/;"	e	enum:__anon59
PSUN_ALT	./src/common.h	91;"	d
PSUN_BOOT	./src/common.h	83;"	d
PSUN_CACHEFS	./src/common.h	92;"	d
PSUN_HOME	./src/common.h	90;"	d
PSUN_LINSWAP	./src/common.h	93;"	d
PSUN_LINUX	./src/common.h	94;"	d
PSUN_LVM	./src/common.h	95;"	d
PSUN_RAID	./src/common.h	96;"	d
PSUN_ROOT	./src/common.h	84;"	d
PSUN_STAND	./src/common.h	88;"	d
PSUN_SWAP	./src/common.h	85;"	d
PSUN_UNK	./src/common.h	97;"	d
PSUN_USR	./src/common.h	86;"	d
PSUN_VAR	./src/common.h	89;"	d
PSUN_WHOLE_DISK	./src/common.h	87;"	d
PT_ACTIONS	./src/file_nk2.c	105;"	d	file:
PT_APPTIME	./src/file_nk2.c	94;"	d	file:
PT_BINARY	./src/file_nk2.c	106;"	d	file:
PT_BOOLEAN	./src/file_nk2.c	96;"	d	file:
PT_CLSID	./src/file_nk2.c	102;"	d	file:
PT_CURRENCY	./src/file_nk2.c	93;"	d	file:
PT_DOUBLE	./src/file_nk2.c	92;"	d	file:
PT_ERROR	./src/file_nk2.c	95;"	d	file:
PT_I2	./src/file_nk2.c	89;"	d	file:
PT_I8	./src/file_nk2.c	98;"	d	file:
PT_LONG	./src/file_nk2.c	90;"	d	file:
PT_NULL	./src/file_nk2.c	88;"	d	file:
PT_OBJECT	./src/file_nk2.c	97;"	d	file:
PT_R4	./src/file_nk2.c	91;"	d	file:
PT_SRESTRICT	./src/file_nk2.c	104;"	d	file:
PT_SRVEID	./src/file_nk2.c	103;"	d	file:
PT_STRING8	./src/file_nk2.c	99;"	d	file:
PT_SYSTIME	./src/file_nk2.c	101;"	d	file:
PT_UNICODE	./src/file_nk2.c	100;"	d	file:
PT_UNSPECIFIED	./src/file_nk2.c	87;"	d	file:
PV_ACTIVE	./src/lvm.h	37;"	d
PV_ALLOCATABLE	./src/lvm.h	38;"	d
PWD	./src/file_it.c	/^  uint8_t  PWD;$/;"	m	struct:impulse_header	file:
PXBOX_FATX	./src/common.h	119;"	d
PXBOX_UNK	./src/common.h	118;"	d
P_12FAT	./src/common.h	45;"	d
P_12FATH	./src/common.h	57;"	d
P_16FAT	./src/common.h	46;"	d
P_16FATBD	./src/common.h	48;"	d
P_16FATBDH	./src/common.h	59;"	d
P_16FATBD_LBA	./src/common.h	55;"	d
P_16FATBD_LBAH	./src/common.h	63;"	d
P_16FATH	./src/common.h	58;"	d
P_32FAT	./src/common.h	53;"	d
P_32FATH	./src/common.h	61;"	d
P_32FAT_LBA	./src/common.h	54;"	d
P_32FAT_LBAH	./src/common.h	62;"	d
P_BEOS	./src/common.h	77;"	d
P_EXFAT	./src/common.h	51;"	d
P_EXTENDED	./src/common.h	47;"	d
P_EXTENDX	./src/common.h	56;"	d
P_FREEBSD	./src/common.h	71;"	d
P_HFS	./src/common.h	74;"	d
P_HFSP	./src/common.h	75;"	d
P_HPFS	./src/common.h	50;"	d
P_LINSWAP	./src/common.h	67;"	d
P_LINUX	./src/common.h	68;"	d
P_LINUXEXTENDX	./src/common.h	69;"	d
P_LVM	./src/common.h	70;"	d
P_NETBSD	./src/common.h	73;"	d
P_NETWARE	./src/common.h	65;"	d
P_NO_OS	./src/common.h	44;"	d
P_NTFS	./src/common.h	49;"	d
P_NTFSH	./src/common.h	60;"	d
P_OLDLINUX	./src/common.h	66;"	d
P_OPENBSD	./src/common.h	72;"	d
P_OS2MB	./src/common.h	52;"	d
P_RAID	./src/common.h	79;"	d
P_SUN	./src/common.h	76;"	d
P_SYSV	./src/common.h	64;"	d
P_UNK	./src/common.h	80;"	d
P_VMFS	./src/common.h	78;"	d
Palette	./src/file_pcx.c	/^  uint8_t  Palette[48];$/;"	m	struct:pcx_file_entry	file:
PaletteType	./src/file_pcx.c	/^  uint16_t PaletteType;$/;"	m	struct:pcx_file_entry	file:
PartListWidget	./src/qphotorec.h	/^                QTableWidget 		*PartListWidget;$/;"	m	class:QPhotorec
PartogramaDataBase_UID	./src/file_sp3.h	/^  char     	PartogramaDataBase_UID[38];	\/* 38 bytes  ( 655 - 692) *\/$/;"	m	struct:SP3FileInfo
PatNum	./src/file_it.c	/^  uint16_t PatNum;$/;"	m	struct:impulse_header	file:
PointerToLinenumbers	./src/pe.h	/^  uint32_t PointerToLinenumbers;	    \/* object files only *\/$/;"	m	struct:pe_image_section_hdr
PointerToRawData	./src/pe.h	/^  uint32_t PointerToRawData;		    \/* offset to the section's data *\/$/;"	m	struct:pe_image_section_hdr
PointerToRelocations	./src/pe.h	/^  uint32_t PointerToRelocations;	    \/* object files only *\/$/;"	m	struct:pe_image_section_hdr
PointerToSymbolTable	./src/pe.h	/^    uint32_t PointerToSymbolTable;	    \/* debug *\/$/;"	m	struct:pe_image_file_hdr
Pos	./src/file_exe.c	/^  uint32_t Pos;$/;"	m	struct:rsrc_entries_s	file:
Pressure_Diastolic_BP_CRC32	./src/file_sp3.h	/^  uint32_t    	Pressure_Diastolic_BP_CRC32; $/;"	m	struct:SP3FileInfo
Pressure_Diastolic_BP_LEN	./src/file_sp3.h	/^  uint32_t    	Pressure_Diastolic_BP_LEN; $/;"	m	struct:SP3FileInfo
Pressure_Diastolic_BP_POS	./src/file_sp3.h	/^  uint32_t    	Pressure_Diastolic_BP_POS; $/;"	m	struct:SP3FileInfo
Pressure_Mean_BP_CRC32	./src/file_sp3.h	/^  uint32_t    	Pressure_Mean_BP_CRC32; $/;"	m	struct:SP3FileInfo
Pressure_Mean_BP_LEN	./src/file_sp3.h	/^  uint32_t    	Pressure_Mean_BP_LEN; $/;"	m	struct:SP3FileInfo
Pressure_Mean_BP_POS	./src/file_sp3.h	/^  uint32_t    	Pressure_Mean_BP_POS; $/;"	m	struct:SP3FileInfo
Pressure_NIBP_MHR_CRC32	./src/file_sp3.h	/^  uint32_t    	Pressure_NIBP_MHR_CRC32; $/;"	m	struct:SP3FileInfo
Pressure_NIBP_MHR_LEN	./src/file_sp3.h	/^  uint32_t    	Pressure_NIBP_MHR_LEN; $/;"	m	struct:SP3FileInfo
Pressure_NIBP_MHR_POS	./src/file_sp3.h	/^  uint32_t    	Pressure_NIBP_MHR_POS; $/;"	m	struct:SP3FileInfo
Pressure_POS_CRC32	./src/file_sp3.h	/^  uint32_t    	Pressure_POS_CRC32; $/;"	m	struct:SP3FileInfo
Pressure_POS_LEN	./src/file_sp3.h	/^  uint32_t    	Pressure_POS_LEN; $/;"	m	struct:SP3FileInfo
Pressure_POS_POS	./src/file_sp3.h	/^  uint32_t    	Pressure_POS_POS; $/;"	m	struct:SP3FileInfo
Pressure_Systolic_BP_CRC32	./src/file_sp3.h	/^  uint32_t    	Pressure_Systolic_BP_CRC32; $/;"	m	struct:SP3FileInfo
Pressure_Systolic_BP_LEN	./src/file_sp3.h	/^  uint32_t    	Pressure_Systolic_BP_LEN; $/;"	m	struct:SP3FileInfo
Pressure_Systolic_BP_POS	./src/file_sp3.h	/^  uint32_t    	Pressure_Systolic_BP_POS; $/;"	m	struct:SP3FileInfo
ProbeTypeFHR_A	./src/file_sp3.h	/^  uint32_t    	ProbeTypeFHR_A;			\/* 4 bytes   ( 521 - 524 ) *\/$/;"	m	struct:SP3FileInfo
ProbeTypeFHR_B	./src/file_sp3.h	/^  uint32_t    	ProbeTypeFHR_B;			\/* 4 bytes   ( 525 - 528 ) *\/$/;"	m	struct:SP3FileInfo
Prove_FHRa_CRC32	./src/file_sp3.h	/^  uint32_t    	Prove_FHRa_CRC32; $/;"	m	struct:SP3FileInfo
Prove_FHRa_LEN	./src/file_sp3.h	/^  uint32_t    	Prove_FHRa_LEN; $/;"	m	struct:SP3FileInfo
Prove_FHRa_POS	./src/file_sp3.h	/^  uint32_t    	Prove_FHRa_POS; $/;"	m	struct:SP3FileInfo
Prove_FHRb_CRC32	./src/file_sp3.h	/^  uint32_t    	Prove_FHRb_CRC32; $/;"	m	struct:SP3FileInfo
Prove_FHRb_LEN	./src/file_sp3.h	/^  uint32_t    	Prove_FHRb_LEN; $/;"	m	struct:SP3FileInfo
Prove_FHRb_POS	./src/file_sp3.h	/^  uint32_t    	Prove_FHRb_POS; $/;"	m	struct:SP3FileInfo
Prove_UC_CRC32	./src/file_sp3.h	/^  uint32_t    	Prove_UC_CRC32; $/;"	m	struct:SP3FileInfo
Prove_UC_LEN	./src/file_sp3.h	/^  uint32_t    	Prove_UC_LEN; $/;"	m	struct:SP3FileInfo
Prove_UC_POS	./src/file_sp3.h	/^  uint32_t    	Prove_UC_POS; $/;"	m	struct:SP3FileInfo
QCowHeader	./src/file_cow.c	/^typedef struct QCowHeader {$/;"	s	file:
QCowHeader2_t	./src/file_cow.c	/^} QCowHeader2_t;$/;"	t	typeref:struct:QCowHeader	file:
QCowHeader_t	./src/file_cow.c	/^} __attribute__ ((__packed__)) QCowHeader_t;$/;"	t	typeref:struct:__anon48	file:
QPHOTOREC_H	./src/qphotorec.h	13;"	d
QPhotorec	./src/qphotorec.h	/^class QPhotorec: public QWidget$/;"	c
RAW_PART	./src/bsd.h	51;"	d
READ_SIZE	./src/dimage.c	49;"	d	file:
READ_SIZE	./src/fat_unformat.c	58;"	d	file:
READ_SIZE	./src/fidentify.c	58;"	d	file:
READ_SIZE	./src/file_spf.c	/^enum { READ_SIZE=32*512 };$/;"	e	enum:__anon16	file:
READ_SIZE	./src/phbf.c	76;"	d	file:
READ_SIZE	./src/phbs.c	56;"	d	file:
READ_SIZE	./src/psearchn.c	72;"	d	file:
REG_NOERROR	./src/ntfs_udl.c	66;"	d	file:
REISERFS2_SUPER_MAGIC	./src/rfs.h	28;"	d
REISERFS3_SUPER_MAGIC	./src/rfs.h	29;"	d
REISERFS4_SUPER_MAGIC	./src/rfs.h	77;"	d
REISERFS_ERROR_FS	./src/rfs.h	32;"	d
REISERFS_FIRST_BLOCK	./src/rfs.h	30;"	d
REISERFS_MIN_BLOCK_AMOUNT	./src/rfs.h	33;"	d
REISERFS_SUPER_BLOCK_SIZE	./src/rfs.h	36;"	d
REISERFS_SUPER_MAGIC	./src/rfs.h	27;"	d
REISERFS_VALID_FS	./src/rfs.h	31;"	d
RESHDR_GET_SIZE	./src/file_wim.c	58;"	d	file:
RGDB_ID	./src/file_reg.c	/^  uint32_t RGDB_ID;		\/* RGDB *\/$/;"	m	struct:rgdb_block	file:
RO	./src/godmode.c	52;"	d	file:
ROIinfo	./src/file_spe.c	/^  struct ROIinfo {                 \/*                                          *\/$/;"	s	struct:header_spe	file:
ROIinfoblk	./src/file_spe.c	/^  } ROIinfoblk[10];                \/*    ROI Starting Offsets:                 *\/$/;"	m	struct:header_spe	typeref:struct:header_spe::ROIinfo	file:
ROOT	./src/ole.h	29;"	d
RW	./src/godmode.c	53;"	d	file:
ReadUnicodeStr	./src/file_exe.c	/^static unsigned int ReadUnicodeStr(const char *buffer, unsigned int pos, const unsigned int len)$/;"	f	file:
Reserved	./src/file_dpx.c	/^  char 		Reserved[104];    \/* reserved field TBD (need to pad) *\/$/;"	m	struct:header_dpx	file:
Reserved	./src/file_it.c	/^  uint32_t Reserved;$/;"	m	struct:impulse_header	file:
Reserved	./src/file_pct.c	/^  uint16_t Reserved; 		\/* 0x12 0x0000 *\/$/;"	m	struct:pct_file_entry	file:
Reserved	./src/file_pcx.c	/^  uint8_t  Reserved;$/;"	m	struct:pcx_file_entry	file:
Reserved2	./src/file_pct.c	/^  uint32_t Reserved2;		\/* 0x24 *\/$/;"	m	struct:pct_file_entry	file:
Revisao	./src/file_sp3.h	/^  uint8_t	Revisao;$/;"	m	struct:SP3FileInfo
SBLOCKSEARCH	./src/ufs.h	81;"	d
SBLOCKSIZE	./src/ufs.h	80;"	d
SBLOCK_FLOPPY	./src/ufs.h	76;"	d
SBLOCK_PIGGY	./src/ufs.h	79;"	d
SBLOCK_UFS1	./src/ufs.h	77;"	d
SBLOCK_UFS2	./src/ufs.h	78;"	d
SB_SIZE	./src/rfs.h	75;"	d
SCF_ARGS	./src/file_lnk.c	79;"	d	file:
SCF_COMPONENT	./src/file_lnk.c	83;"	d	file:
SCF_CUSTOMICON	./src/file_lnk.c	80;"	d	file:
SCF_DESCRIPTION	./src/file_lnk.c	76;"	d	file:
SCF_LOCATION	./src/file_lnk.c	75;"	d	file:
SCF_PIDL	./src/file_lnk.c	74;"	d	file:
SCF_PRODUCT	./src/file_lnk.c	82;"	d	file:
SCF_RELATIVE	./src/file_lnk.c	77;"	d	file:
SCF_UNICODE	./src/file_lnk.c	81;"	d	file:
SCF_WORKDIR	./src/file_lnk.c	78;"	d	file:
SEARCH_LOCATION_MAX	./src/next.c	48;"	d	file:
SESSION_FILENAME	./src/sessionp.c	54;"	d	file:
SESSION_MAXSIZE	./src/sessionp.c	53;"	d	file:
SG_ATA_LBA48	./src/hpa_dco.c	68;"	d	file:
SG_ATA_PROTO_NON_DATA	./src/hpa_dco.c	65;"	d	file:
SG_ATA_PROTO_PIO_IN	./src/hpa_dco.c	66;"	d	file:
SG_ATA_PROTO_PIO_OUT	./src/hpa_dco.c	67;"	d	file:
SG_CDB2_CHECK_COND	./src/hpa_dco.c	/^  SG_CDB2_CHECK_COND      = 1 << 5$/;"	e	enum:__anon35	file:
SG_CDB2_TDIR_FROM_DEV	./src/hpa_dco.c	/^  SG_CDB2_TDIR_FROM_DEV   = 1 << 3,$/;"	e	enum:__anon35	file:
SG_CDB2_TDIR_TO_DEV	./src/hpa_dco.c	/^  SG_CDB2_TDIR_TO_DEV     = 0 << 3,$/;"	e	enum:__anon35	file:
SG_CDB2_TLEN_BYTES	./src/hpa_dco.c	/^  SG_CDB2_TLEN_BYTES      = 0 << 2,$/;"	e	enum:__anon35	file:
SG_CDB2_TLEN_FEAT	./src/hpa_dco.c	/^  SG_CDB2_TLEN_FEAT       = 1 << 0,$/;"	e	enum:__anon35	file:
SG_CDB2_TLEN_NODATA	./src/hpa_dco.c	/^  SG_CDB2_TLEN_NODATA     = 0 << 0,$/;"	e	enum:__anon35	file:
SG_CDB2_TLEN_NSECT	./src/hpa_dco.c	/^  SG_CDB2_TLEN_NSECT      = 2 << 0,$/;"	e	enum:__anon35	file:
SG_CDB2_TLEN_SECTORS	./src/hpa_dco.c	/^  SG_CDB2_TLEN_SECTORS    = 1 << 2,$/;"	e	enum:__anon35	file:
SG_CHECK_CONDITION	./src/hpa_dco.c	70;"	d	file:
SG_DRIVER_SENSE	./src/hpa_dco.c	69;"	d	file:
SHORT_BLOCK	./src/ole.h	30;"	d
SHeader	./src/file_axx.c	/^struct SHeader$/;"	s	file:
SIZEOF	./src/suspend.c	94;"	d	file:
SIZEOF_BUFFER	./src/ntfsp.c	58;"	d	file:
SKIP_SIZE	./src/dimage.c	51;"	d	file:
SP3FileInfo	./src/file_sp3.h	/^struct SP3FileInfo$/;"	s
SPATH_SEP	./src/askloc.c	85;"	d	file:
SPATH_SEP	./src/askloc.c	88;"	d	file:
SPECIAL_BLOCK	./src/ole.h	22;"	d
STANDALONE	./src/bsd.h	31;"	d
STATUS_DELETED	./src/common.h	/^enum status_type { STATUS_DELETED, STATUS_PRIM, STATUS_PRIM_BOOT, STATUS_LOG, STATUS_EXT, STATUS_EXT_IN_EXT};$/;"	e	enum:status_type
STATUS_EXT	./src/common.h	/^enum status_type { STATUS_DELETED, STATUS_PRIM, STATUS_PRIM_BOOT, STATUS_LOG, STATUS_EXT, STATUS_EXT_IN_EXT};$/;"	e	enum:status_type
STATUS_EXT2_OFF	./src/photorec.h	/^enum photorec_status { STATUS_FIND_OFFSET, STATUS_UNFORMAT, STATUS_EXT2_ON, STATUS_EXT2_ON_BF, STATUS_EXT2_OFF, STATUS_EXT2_OFF_BF, STATUS_EXT2_ON_SAVE_EVERYTHING, STATUS_EXT2_OFF_SAVE_EVERYTHING, STATUS_QUIT };$/;"	e	enum:photorec_status
STATUS_EXT2_OFF_BF	./src/photorec.h	/^enum photorec_status { STATUS_FIND_OFFSET, STATUS_UNFORMAT, STATUS_EXT2_ON, STATUS_EXT2_ON_BF, STATUS_EXT2_OFF, STATUS_EXT2_OFF_BF, STATUS_EXT2_ON_SAVE_EVERYTHING, STATUS_EXT2_OFF_SAVE_EVERYTHING, STATUS_QUIT };$/;"	e	enum:photorec_status
STATUS_EXT2_OFF_SAVE_EVERYTHING	./src/photorec.h	/^enum photorec_status { STATUS_FIND_OFFSET, STATUS_UNFORMAT, STATUS_EXT2_ON, STATUS_EXT2_ON_BF, STATUS_EXT2_OFF, STATUS_EXT2_OFF_BF, STATUS_EXT2_ON_SAVE_EVERYTHING, STATUS_EXT2_OFF_SAVE_EVERYTHING, STATUS_QUIT };$/;"	e	enum:photorec_status
STATUS_EXT2_ON	./src/photorec.h	/^enum photorec_status { STATUS_FIND_OFFSET, STATUS_UNFORMAT, STATUS_EXT2_ON, STATUS_EXT2_ON_BF, STATUS_EXT2_OFF, STATUS_EXT2_OFF_BF, STATUS_EXT2_ON_SAVE_EVERYTHING, STATUS_EXT2_OFF_SAVE_EVERYTHING, STATUS_QUIT };$/;"	e	enum:photorec_status
STATUS_EXT2_ON_BF	./src/photorec.h	/^enum photorec_status { STATUS_FIND_OFFSET, STATUS_UNFORMAT, STATUS_EXT2_ON, STATUS_EXT2_ON_BF, STATUS_EXT2_OFF, STATUS_EXT2_OFF_BF, STATUS_EXT2_ON_SAVE_EVERYTHING, STATUS_EXT2_OFF_SAVE_EVERYTHING, STATUS_QUIT };$/;"	e	enum:photorec_status
STATUS_EXT2_ON_SAVE_EVERYTHING	./src/photorec.h	/^enum photorec_status { STATUS_FIND_OFFSET, STATUS_UNFORMAT, STATUS_EXT2_ON, STATUS_EXT2_ON_BF, STATUS_EXT2_OFF, STATUS_EXT2_OFF_BF, STATUS_EXT2_ON_SAVE_EVERYTHING, STATUS_EXT2_OFF_SAVE_EVERYTHING, STATUS_QUIT };$/;"	e	enum:photorec_status
STATUS_EXT_IN_EXT	./src/common.h	/^enum status_type { STATUS_DELETED, STATUS_PRIM, STATUS_PRIM_BOOT, STATUS_LOG, STATUS_EXT, STATUS_EXT_IN_EXT};$/;"	e	enum:status_type
STATUS_FIND_OFFSET	./src/photorec.h	/^enum photorec_status { STATUS_FIND_OFFSET, STATUS_UNFORMAT, STATUS_EXT2_ON, STATUS_EXT2_ON_BF, STATUS_EXT2_OFF, STATUS_EXT2_OFF_BF, STATUS_EXT2_ON_SAVE_EVERYTHING, STATUS_EXT2_OFF_SAVE_EVERYTHING, STATUS_QUIT };$/;"	e	enum:photorec_status
STATUS_LOG	./src/common.h	/^enum status_type { STATUS_DELETED, STATUS_PRIM, STATUS_PRIM_BOOT, STATUS_LOG, STATUS_EXT, STATUS_EXT_IN_EXT};$/;"	e	enum:status_type
STATUS_PRIM	./src/common.h	/^enum status_type { STATUS_DELETED, STATUS_PRIM, STATUS_PRIM_BOOT, STATUS_LOG, STATUS_EXT, STATUS_EXT_IN_EXT};$/;"	e	enum:status_type
STATUS_PRIM_BOOT	./src/common.h	/^enum status_type { STATUS_DELETED, STATUS_PRIM, STATUS_PRIM_BOOT, STATUS_LOG, STATUS_EXT, STATUS_EXT_IN_EXT};$/;"	e	enum:status_type
STATUS_QUIT	./src/photorec.h	/^enum photorec_status { STATUS_FIND_OFFSET, STATUS_UNFORMAT, STATUS_EXT2_ON, STATUS_EXT2_ON_BF, STATUS_EXT2_OFF, STATUS_EXT2_OFF_BF, STATUS_EXT2_ON_SAVE_EVERYTHING, STATUS_EXT2_OFF_SAVE_EVERYTHING, STATUS_QUIT };$/;"	e	enum:photorec_status
STATUS_UNFORMAT	./src/photorec.h	/^enum photorec_status { STATUS_FIND_OFFSET, STATUS_UNFORMAT, STATUS_EXT2_ON, STATUS_EXT2_ON_BF, STATUS_EXT2_OFF, STATUS_EXT2_OFF_BF, STATUS_EXT2_ON_SAVE_EVERYTHING, STATUS_EXT2_OFF_SAVE_EVERYTHING, STATUS_QUIT };$/;"	e	enum:photorec_status
STORAGE	./src/ole.h	27;"	d
STREAM	./src/ole.h	28;"	d
SUN_LABEL_MAGIC	./src/sun.c	41;"	d	file:
SUN_LABEL_MAGIC	./src/sun.h	77;"	d
SUN_LABEL_MAGIC_START	./src/sun.h	78;"	d
SUN_PARTITION_I386_SIZE	./src/sun.h	54;"	d
SUPER_BLOCK_MAGIC1	./src/bfs.h	78;"	d
SUPER_BLOCK_MAGIC2	./src/bfs.h	79;"	d
SUPER_BLOCK_MAGIC3	./src/bfs.h	80;"	d
SWAP_PART	./src/bsd.h	52;"	d
SWmade	./src/file_spe.c	/^  uint16_t  SWmade;            \/* 1508  Software which created this file   *\/$/;"	m	struct:header_spe	file:
SYSV4_CIGAM	./src/sysv.c	43;"	d	file:
SYSV4_CIGAM_4GB	./src/sysv.c	58;"	d	file:
SYSV4_CIGAM_FEA	./src/sysv.c	55;"	d	file:
SYSV4_CIGAM_LFN	./src/sysv.c	49;"	d	file:
SYSV4_CIGAM_SEC	./src/sysv.c	52;"	d	file:
SYSV4_MAGIC	./src/sysv.c	42;"	d	file:
SYSV4_MAGIC_4GB	./src/sysv.c	57;"	d	file:
SYSV4_MAGIC_FEA	./src/sysv.c	54;"	d	file:
SYSV4_MAGIC_LFN	./src/sysv.c	48;"	d	file:
SYSV4_MAGIC_SEC	./src/sysv.c	51;"	d	file:
SYSV4_SBLOCK	./src/sysv.c	41;"	d	file:
SYSV4_SECTOR_SIZE	./src/sysv.c	40;"	d	file:
SYSV4_SUPERBLOCK_SIZE	./src/sysv.h	26;"	d
SYSV_BADBL_INO	./src/sysv.h	48;"	d
SYSV_NICFREE	./src/sysv.h	88;"	d
SYSV_NICINOD	./src/sysv.h	87;"	d
SYSV_ROOT_INO	./src/sysv.h	49;"	d
ScaleFactorUc	./src/file_sp3.h	/^  uint32_t    	ScaleFactorUc;			\/* 4 bytes   ( 517 - 520 ) *\/$/;"	m	struct:SP3FileInfo
SectionAlignment	./src/pe.h	/^  uint32_t SectionAlignment;			    \/* usually 32 or 4096 *\/$/;"	m	struct:pe_image_optional_hdr32
SectionAlignment	./src/pe.h	/^  uint32_t SectionAlignment;			    \/* usually 32 or 4096 *\/$/;"	m	struct:pe_image_optional_hdr64
Sep	./src/file_it.c	/^  uint8_t  Sep;$/;"	m	struct:impulse_header	file:
ShutterType	./src/file_spe.c	/^  uint16_t  ShutterType;       \/* 1474 shutter type.                       *\/$/;"	m	struct:header_spe	file:
Size	./src/pe.h	/^  uint32_t Size;$/;"	m	struct:pe_image_data_dir
SizeOfCode	./src/pe.h	/^  uint32_t SizeOfCode;			    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr32
SizeOfCode	./src/pe.h	/^  uint32_t SizeOfCode;			    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr64
SizeOfHeaders	./src/pe.h	/^  uint32_t SizeOfHeaders;$/;"	m	struct:pe_image_optional_hdr32
SizeOfHeaders	./src/pe.h	/^  uint32_t SizeOfHeaders;$/;"	m	struct:pe_image_optional_hdr64
SizeOfHeapCommit	./src/pe.h	/^  uint32_t SizeOfHeapCommit;$/;"	m	struct:pe_image_optional_hdr32
SizeOfHeapCommit	./src/pe.h	/^  uint64_t SizeOfHeapCommit;$/;"	m	struct:pe_image_optional_hdr64
SizeOfHeapReserve	./src/pe.h	/^  uint32_t SizeOfHeapReserve;$/;"	m	struct:pe_image_optional_hdr32
SizeOfHeapReserve	./src/pe.h	/^  uint64_t SizeOfHeapReserve;$/;"	m	struct:pe_image_optional_hdr64
SizeOfImage	./src/pe.h	/^  uint32_t SizeOfImage;$/;"	m	struct:pe_image_optional_hdr32
SizeOfImage	./src/pe.h	/^  uint32_t SizeOfImage;$/;"	m	struct:pe_image_optional_hdr64
SizeOfInitializedData	./src/pe.h	/^  uint32_t SizeOfInitializedData;		    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr32
SizeOfInitializedData	./src/pe.h	/^  uint32_t SizeOfInitializedData;		    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr64
SizeOfOptionalHeader	./src/pe.h	/^    uint16_t SizeOfOptionalHeader;	    \/* == 224 *\/$/;"	m	struct:pe_image_file_hdr
SizeOfRawData	./src/pe.h	/^  uint32_t SizeOfRawData;		    \/* multiple of FileAlignment *\/$/;"	m	struct:pe_image_section_hdr
SizeOfStackCommit	./src/pe.h	/^  uint32_t SizeOfStackCommit;$/;"	m	struct:pe_image_optional_hdr32
SizeOfStackCommit	./src/pe.h	/^  uint64_t SizeOfStackCommit;$/;"	m	struct:pe_image_optional_hdr64
SizeOfStackReserve	./src/pe.h	/^  uint32_t SizeOfStackReserve;$/;"	m	struct:pe_image_optional_hdr32
SizeOfStackReserve	./src/pe.h	/^  uint64_t SizeOfStackReserve;$/;"	m	struct:pe_image_optional_hdr64
SizeOfUninitializedData	./src/pe.h	/^  uint32_t SizeOfUninitializedData;		    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr32
SizeOfUninitializedData	./src/pe.h	/^  uint32_t SizeOfUninitializedData;		    \/* unreliable *\/$/;"	m	struct:pe_image_optional_hdr64
SmpNum	./src/file_it.c	/^  uint16_t SmpNum;$/;"	m	struct:impulse_header	file:
Special	./src/file_it.c	/^  uint16_t Special;$/;"	m	struct:impulse_header	file:
StoreSync	./src/file_spe.c	/^  int16_t           StoreSync;         \/* 1434 set to 1 if store sync used.        *\/$/;"	m	struct:header_spe	file:
StringFileInfo	./src/file_exe.c	/^static char StringFileInfo[30]={$/;"	v	file:
Subsystem	./src/pe.h	/^  uint16_t Subsystem;$/;"	m	struct:pe_image_optional_hdr32
Subsystem	./src/pe.h	/^  uint16_t Subsystem;$/;"	m	struct:pe_image_optional_hdr64
TAB_PART	./src/parti386.c	61;"	d	file:
TD_FILE_NAME_ATTR	./src/ntfs.h	/^} __attribute__((__packed__)) TD_FILE_NAME_ATTR;$/;"	t	typeref:struct:__anon23
TD_INDEX_HEADER	./src/ntfs.h	/^} __attribute__((__packed__)) TD_INDEX_HEADER;$/;"	t	typeref:struct:__anon22
TD_INDEX_ROOT	./src/ntfs.h	/^} __attribute__((__packed__)) TD_INDEX_ROOT;$/;"	t	typeref:struct:__anon26
TD_INIT_LIST_HEAD	./src/list.h	52;"	d
TD_LIST_HEAD	./src/list.h	49;"	d
TD_LIST_HEAD_INIT	./src/list.h	47;"	d
TD_LOG_APPEND	./src/log.h	39;"	d
TD_LOG_CREATE	./src/log.h	38;"	d
TD_LOG_DONE	./src/log.h	40;"	d
TD_LOG_NONE	./src/log.h	37;"	d
TESTDISK_O_ALL	./src/common.h	219;"	d
TESTDISK_O_DIRECT	./src/common.h	216;"	d
TESTDISK_O_RDONLY	./src/common.h	214;"	d
TESTDISK_O_RDWR	./src/common.h	215;"	d
TESTDISK_O_READAHEAD_32K	./src/common.h	218;"	d
TESTDISK_O_READAHEAD_8K	./src/common.h	217;"	d
TIFFDirEntry	./src/file_tiff.h	/^} TIFFDirEntry;$/;"	t	typeref:struct:__anon43
TIFFHeader	./src/file_tiff.h	/^} TIFFHeader;$/;"	t	typeref:struct:__anon42
TIFFTAG_ALPHABYTECOUNT	./src/file_tiff.h	44;"	d
TIFFTAG_ALPHAOFFSET	./src/file_tiff.h	43;"	d
TIFFTAG_DNGPRIVATEDATA	./src/file_tiff.h	47;"	d
TIFFTAG_DNGVERSION	./src/file_tiff.h	46;"	d
TIFFTAG_EXIFIFD	./src/file_tiff.h	39;"	d
TIFFTAG_IMAGEBYTECOUNT	./src/file_tiff.h	42;"	d
TIFFTAG_IMAGEDESCRIPTION	./src/file_tiff.h	28;"	d
TIFFTAG_IMAGEOFFSET	./src/file_tiff.h	41;"	d
TIFFTAG_JPEGIFBYTECOUNT	./src/file_tiff.h	37;"	d
TIFFTAG_JPEGIFOFFSET	./src/file_tiff.h	36;"	d
TIFFTAG_KODAKIFD	./src/file_tiff.h	38;"	d
TIFFTAG_MAKE	./src/file_tiff.h	29;"	d
TIFFTAG_MODEL	./src/file_tiff.h	30;"	d
TIFFTAG_PRINTIM	./src/file_tiff.h	45;"	d
TIFFTAG_STRIPBYTECOUNTS	./src/file_tiff.h	32;"	d
TIFFTAG_STRIPOFFSETS	./src/file_tiff.h	31;"	d
TIFFTAG_SUBIFD	./src/file_tiff.h	35;"	d
TIFFTAG_TILEBYTECOUNTS	./src/file_tiff.h	34;"	d
TIFFTAG_TILEOFFSETS	./src/file_tiff.h	33;"	d
TIFF_BIGENDIAN	./src/file_tiff.h	26;"	d
TIFF_LITTLEENDIAN	./src/file_tiff.h	27;"	d
TP_BSIZE	./src/file_dump.c	59;"	d	file:
TP_NINDIR	./src/file_dump.c	62;"	d	file:
TQRS_Biphasic_CRC32	./src/file_sp3.h	/^  uint32_t    	TQRS_Biphasic_CRC32; $/;"	m	struct:SP3FileInfo
TQRS_Biphasic_LEN	./src/file_sp3.h	/^  uint32_t    	TQRS_Biphasic_LEN; $/;"	m	struct:SP3FileInfo
TQRS_Biphasic_POS	./src/file_sp3.h	/^  uint32_t    	TQRS_Biphasic_POS; $/;"	m	struct:SP3FileInfo
TQRS_POS_CRC32	./src/file_sp3.h	/^  uint32_t    	TQRS_POS_CRC32; $/;"	m	struct:SP3FileInfo
TQRS_POS_LEN	./src/file_sp3.h	/^  uint32_t    	TQRS_POS_LEN; $/;"	m	struct:SP3FileInfo
TQRS_POS_POS	./src/file_sp3.h	/^  uint32_t    	TQRS_POS_POS; $/;"	m	struct:SP3FileInfo
TQRS_Status_CRC32	./src/file_sp3.h	/^  uint32_t    	TQRS_Status_CRC32; $/;"	m	struct:SP3FileInfo
TQRS_Status_LEN	./src/file_sp3.h	/^  uint32_t    	TQRS_Status_LEN; $/;"	m	struct:SP3FileInfo
TQRS_Status_POS	./src/file_sp3.h	/^  uint32_t    	TQRS_Status_POS; $/;"	m	struct:SP3FileInfo
TQRS_Value_CRC32	./src/file_sp3.h	/^  uint32_t    	TQRS_Value_CRC32; $/;"	m	struct:SP3FileInfo
TQRS_Value_LEN	./src/file_sp3.h	/^  uint32_t    	TQRS_Value_LEN; $/;"	m	struct:SP3FileInfo
TQRS_Value_POS	./src/file_sp3.h	/^  uint32_t    	TQRS_Value_POS; $/;"	m	struct:SP3FileInfo
TST_FS_BOOT	./src/bsd.h	167;"	d
TST_FS_BSDFFS	./src/bsd.h	161;"	d
TST_FS_BSDLFS	./src/bsd.h	163;"	d
TST_FS_HPFS	./src/bsd.h	165;"	d
TST_FS_ISO9660	./src/bsd.h	166;"	d
TST_FS_JFS2	./src/bsd.h	170;"	d
TST_FS_MSDOS	./src/bsd.h	162;"	d
TST_FS_OTHER	./src/bsd.h	164;"	d
TST_FS_RAID	./src/bsd.h	169;"	d
TST_FS_SWAP	./src/bsd.h	155;"	d
TST_FS_SYSV	./src/bsd.h	158;"	d
TST_FS_UNUSED	./src/bsd.h	154;"	d
TST_FS_V6	./src/bsd.h	156;"	d
TST_FS_V7	./src/bsd.h	157;"	d
TST_FS_V71K	./src/bsd.h	159;"	d
TST_FS_V8	./src/bsd.h	160;"	d
TST_FS_VINUM	./src/bsd.h	168;"	d
TS_ADDR	./src/file_dump.c	122;"	d	file:
TS_BITS	./src/file_dump.c	123;"	d	file:
TS_CLRI	./src/file_dump.c	124;"	d	file:
TS_END	./src/file_dump.c	125;"	d	file:
TS_INODE	./src/file_dump.c	121;"	d	file:
TS_TAPE	./src/file_dump.c	120;"	d	file:
TS_TAPE	./src/file_dump.c	33;"	d	file:
TimeBaseDelta_CRC32	./src/file_sp3.h	/^  uint32_t    	TimeBaseDelta_CRC32;		\/* 4 bytes   ( 709 - 712) *\/$/;"	m	struct:SP3FileInfo
TimeBaseDelta_LEN	./src/file_sp3.h	/^  uint32_t    	TimeBaseDelta_LEN;		\/* 4 bytes   ( 705 - 708) *\/$/;"	m	struct:SP3FileInfo
TimeBaseDelta_POS	./src/file_sp3.h	/^  uint32_t    	TimeBaseDelta_POS;		\/* 4 bytes   ( 701 - 704) *\/$/;"	m	struct:SP3FileInfo
TimeDateStamp	./src/pe.h	/^    uint32_t TimeDateStamp;		    \/* unreliable *\/$/;"	m	struct:pe_image_file_hdr
TipoDeMonitorFetal	./src/file_sp3.h	/^  uint32_t    	TipoDeMonitorFetal;		\/* 4 bytes   (  27 -  30 ) *\/$/;"	m	struct:SP3FileInfo
TipoDePesquisa_OLD	./src/file_sp3.h	/^  char		TipoDePesquisa_OLD;            	\/* 1 bytes   (    503    ) *\/$/;"	m	struct:SP3FileInfo
Type	./src/file_exe.c	/^  uint32_t Type;$/;"	m	struct:rsrc_entries_s	file:
TypeLibHeader	./src/file_xpt.c	/^struct TypeLibHeader {$/;"	s	file:
UCSle2str	./src/unicode.c	/^int UCSle2str(char *to, const uint16_t *from, const unsigned int len)$/;"	f
UC_CRC32	./src/file_sp3.h	/^  uint32_t    	UC_CRC32; $/;"	m	struct:SP3FileInfo
UC_LEN	./src/file_sp3.h	/^  uint32_t    	UC_LEN; $/;"	m	struct:SP3FileInfo
UC_POS	./src/file_sp3.h	/^  uint32_t    	UC_POS; $/;"	m	struct:SP3FileInfo
UFS2_CIGAM	./src/ufs.h	41;"	d
UFS2_MAGIC	./src/ufs.h	40;"	d
UFS2_MAXMNTLEN	./src/ufs.h	272;"	d
UFS2_MAXVOLLEN	./src/ufs.h	273;"	d
UFS2_NOCSPTRS	./src/ufs.h	276;"	d
UFS_42INODEFMT	./src/ufs.h	165;"	d
UFS_42POSTBLFMT	./src/ufs.h	467;"	d
UFS_44INODEFMT	./src/ufs.h	166;"	d
UFS_BBLOCK	./src/ufs.h	31;"	d
UFS_BBSIZE	./src/ufs.h	32;"	d
UFS_BSIZE	./src/ufs.h	108;"	d
UFS_CG_44BSD	./src/ufs.h	156;"	d
UFS_CG_MASK	./src/ufs.h	154;"	d
UFS_CG_OLD	./src/ufs.h	155;"	d
UFS_CG_SUN	./src/ufs.h	157;"	d
UFS_CIGAM	./src/ufs.h	39;"	d
UFS_CIGAM_4GB	./src/ufs.h	97;"	d
UFS_CIGAM_FEA	./src/ufs.h	94;"	d
UFS_CIGAM_LFN	./src/ufs.h	88;"	d
UFS_CIGAM_SEC	./src/ufs.h	91;"	d
UFS_DEFAULTOPT	./src/ufs.h	203;"	d
UFS_DE_44BSD	./src/ufs.h	141;"	d
UFS_DE_MASK	./src/ufs.h	139;"	d
UFS_DE_OLD	./src/ufs.h	140;"	d
UFS_DIND_BLOCK	./src/ufs.h	117;"	d
UFS_DIND_FRAGMENT	./src/ufs.h	122;"	d
UFS_DIR_PAD	./src/ufs.h	282;"	d
UFS_DIR_REC_LEN	./src/ufs.h	284;"	d
UFS_DIR_ROUND	./src/ufs.h	283;"	d
UFS_DYNAMICPOSTBLFMT	./src/ufs.h	468;"	d
UFS_FIRST_INO	./src/ufs.h	126;"	d
UFS_FSACTIVE	./src/ufs.h	131;"	d
UFS_FSBAD	./src/ufs.h	135;"	d
UFS_FSCLEAN	./src/ufs.h	132;"	d
UFS_FSF_B1	./src/ufs.h	101;"	d
UFS_FSF_LFN	./src/ufs.h	100;"	d
UFS_FSF_LFS	./src/ufs.h	102;"	d
UFS_FSF_LUID	./src/ufs.h	103;"	d
UFS_FSIZE	./src/ufs.h	110;"	d
UFS_FSOK	./src/ufs.h	130;"	d
UFS_FSOSF1	./src/ufs.h	134;"	d
UFS_FSSTABLE	./src/ufs.h	133;"	d
UFS_IND_BLOCK	./src/ufs.h	116;"	d
UFS_IND_FRAGMENT	./src/ufs.h	121;"	d
UFS_LINK_MAX	./src/ufs.h	275;"	d
UFS_MAGIC	./src/ufs.h	38;"	d
UFS_MAGIC_4GB	./src/ufs.h	96;"	d
UFS_MAGIC_FEA	./src/ufs.h	93;"	d
UFS_MAGIC_LFN	./src/ufs.h	87;"	d
UFS_MAGIC_SEC	./src/ufs.h	90;"	d
UFS_MAXCSBUFS	./src/ufs.h	274;"	d
UFS_MAXFRAG	./src/ufs.h	111;"	d
UFS_MAXMNTLEN	./src/ufs.h	271;"	d
UFS_MAXNAMLEN	./src/ufs.h	270;"	d
UFS_MINBSIZE	./src/ufs.h	109;"	d
UFS_MINFREE	./src/ufs.h	202;"	d
UFS_MOUNT_ONERROR	./src/ufs.h	169;"	d
UFS_MOUNT_ONERROR_LOCK	./src/ufs.h	171;"	d
UFS_MOUNT_ONERROR_PANIC	./src/ufs.h	170;"	d
UFS_MOUNT_ONERROR_REPAIR	./src/ufs.h	173;"	d
UFS_MOUNT_ONERROR_UMOUNT	./src/ufs.h	172;"	d
UFS_MOUNT_UFSTYPE	./src/ufs.h	175;"	d
UFS_MOUNT_UFSTYPE_44BSD	./src/ufs.h	177;"	d
UFS_MOUNT_UFSTYPE_HP	./src/ufs.h	183;"	d
UFS_MOUNT_UFSTYPE_NEXTSTEP	./src/ufs.h	179;"	d
UFS_MOUNT_UFSTYPE_NEXTSTEP_CD	./src/ufs.h	180;"	d
UFS_MOUNT_UFSTYPE_OLD	./src/ufs.h	176;"	d
UFS_MOUNT_UFSTYPE_OPENSTEP	./src/ufs.h	181;"	d
UFS_MOUNT_UFSTYPE_SUN	./src/ufs.h	178;"	d
UFS_MOUNT_UFSTYPE_SUNx86	./src/ufs.h	182;"	d
UFS_MOUNT_UFSTYPE_UFS2	./src/ufs.h	184;"	d
UFS_NDADDR	./src/ufs.h	113;"	d
UFS_NDIR_FRAGMENT	./src/ufs.h	120;"	d
UFS_NINDIR	./src/ufs.h	114;"	d
UFS_OPTSPACE	./src/ufs.h	462;"	d
UFS_OPTTIME	./src/ufs.h	461;"	d
UFS_ROOTINO	./src/ufs.h	125;"	d
UFS_SBLOCK	./src/ufs.h	33;"	d
UFS_SBSIZE	./src/ufs.h	34;"	d
UFS_SECTOR_BITS	./src/ufs.h	37;"	d
UFS_SECTOR_SIZE	./src/ufs.h	36;"	d
UFS_ST_44BSD	./src/ufs.h	150;"	d
UFS_ST_MASK	./src/ufs.h	148;"	d
UFS_ST_OLD	./src/ufs.h	149;"	d
UFS_ST_SUN	./src/ufs.h	151;"	d
UFS_ST_SUNx86	./src/ufs.h	152;"	d
UFS_SUPERBLOCK_SIZE	./src/ufs.h	29;"	d
UFS_TIND_BLOCK	./src/ufs.h	118;"	d
UFS_TIND_FRAGMENT	./src/ufs.h	123;"	d
UFS_TYPE_MASK	./src/ufs.h	159;"	d
UFS_TYPE_UFS1	./src/ufs.h	160;"	d
UFS_TYPE_UFS2	./src/ufs.h	161;"	d
UFS_UID_44BSD	./src/ufs.h	145;"	d
UFS_UID_EFT	./src/ufs.h	146;"	d
UFS_UID_MASK	./src/ufs.h	143;"	d
UFS_UID_OLD	./src/ufs.h	144;"	d
UFS_USEEFT	./src/ufs.h	128;"	d
UNIT_CHS	./src/common.h	286;"	d
UNIT_DEFAULT	./src/common.h	284;"	d
UNIT_SECTOR	./src/common.h	285;"	d
UNKNOWN	./src/ntfs_udl.c	/^static const char *UNKNOWN   = "unknown";$/;"	v	file:
UNUSED	./src/ole.h	24;"	d
UP_BEOS	./src/common.h	/^  UP_BEOS=1,$/;"	e	enum:upart_type
UP_BTRFS	./src/common.h	/^  UP_BTRFS=2,$/;"	e	enum:upart_type
UP_CRAMFS	./src/common.h	/^  UP_CRAMFS=3,$/;"	e	enum:upart_type
UP_EXFAT	./src/common.h	/^  UP_EXFAT=4,$/;"	e	enum:upart_type
UP_EXT2	./src/common.h	/^  UP_EXT2=5,$/;"	e	enum:upart_type
UP_EXT3	./src/common.h	/^  UP_EXT3=6,$/;"	e	enum:upart_type
UP_EXT4	./src/common.h	/^  UP_EXT4=7,$/;"	e	enum:upart_type
UP_EXTENDED	./src/common.h	/^  UP_EXTENDED=8,$/;"	e	enum:upart_type
UP_FAT12	./src/common.h	/^  UP_FAT12=9,$/;"	e	enum:upart_type
UP_FAT16	./src/common.h	/^  UP_FAT16=0x0a,$/;"	e	enum:upart_type
UP_FAT32	./src/common.h	/^  UP_FAT32=0x0b,$/;"	e	enum:upart_type
UP_FATX	./src/common.h	/^  UP_FATX,$/;"	e	enum:upart_type
UP_FREEBSD	./src/common.h	/^  UP_FREEBSD,$/;"	e	enum:upart_type
UP_GFS2	./src/common.h	/^  UP_GFS2,$/;"	e	enum:upart_type
UP_HFS	./src/common.h	/^  UP_HFS,$/;"	e	enum:upart_type
UP_HFSP	./src/common.h	/^  UP_HFSP,$/;"	e	enum:upart_type
UP_HFSX	./src/common.h	/^  UP_HFSX,$/;"	e	enum:upart_type
UP_HPFS	./src/common.h	/^  UP_HPFS,$/;"	e	enum:upart_type
UP_ISO	./src/common.h	/^  UP_ISO,$/;"	e	enum:upart_type
UP_JFS	./src/common.h	/^  UP_JFS,$/;"	e	enum:upart_type
UP_LINSWAP	./src/common.h	/^  UP_LINSWAP,$/;"	e	enum:upart_type
UP_LINSWAP2	./src/common.h	/^  UP_LINSWAP2,$/;"	e	enum:upart_type
UP_LINSWAP2_8K	./src/common.h	/^  UP_LINSWAP2_8K,$/;"	e	enum:upart_type
UP_LINSWAP2_8KBE	./src/common.h	/^  UP_LINSWAP2_8KBE,$/;"	e	enum:upart_type
UP_LINSWAP_8K	./src/common.h	/^  UP_LINSWAP_8K,$/;"	e	enum:upart_type
UP_LUKS	./src/common.h	/^  UP_LUKS,$/;"	e	enum:upart_type
UP_LVM	./src/common.h	/^  UP_LVM,$/;"	e	enum:upart_type
UP_LVM2	./src/common.h	/^  UP_LVM2,$/;"	e	enum:upart_type
UP_MD	./src/common.h	/^  UP_MD,$/;"	e	enum:upart_type
UP_MD1	./src/common.h	/^  UP_MD1,$/;"	e	enum:upart_type
UP_NETWARE	./src/common.h	/^  UP_NETWARE,$/;"	e	enum:upart_type
UP_NTFS	./src/common.h	/^  UP_NTFS,$/;"	e	enum:upart_type
UP_OPENBSD	./src/common.h	/^  UP_OPENBSD,$/;"	e	enum:upart_type
UP_OS2MB	./src/common.h	/^  UP_OS2MB,$/;"	e	enum:upart_type
UP_RFS	./src/common.h	/^  UP_RFS,$/;"	e	enum:upart_type
UP_RFS2	./src/common.h	/^  UP_RFS2,$/;"	e	enum:upart_type
UP_RFS3	./src/common.h	/^  UP_RFS3,$/;"	e	enum:upart_type
UP_RFS4	./src/common.h	/^  UP_RFS4,$/;"	e	enum:upart_type
UP_SUN	./src/common.h	/^  UP_SUN,$/;"	e	enum:upart_type
UP_SYSV4	./src/common.h	/^  UP_SYSV4,$/;"	e	enum:upart_type
UP_UFS	./src/common.h	/^  UP_UFS,$/;"	e	enum:upart_type
UP_UFS2	./src/common.h	/^  UP_UFS2,$/;"	e	enum:upart_type
UP_UFS2_LE	./src/common.h	/^  UP_UFS2_LE,$/;"	e	enum:upart_type
UP_UFS_LE	./src/common.h	/^  UP_UFS_LE,$/;"	e	enum:upart_type
UP_UNK	./src/common.h	/^  UP_UNK=0,$/;"	e	enum:upart_type
UP_VMFS	./src/common.h	/^  UP_VMFS,$/;"	e	enum:upart_type
UP_WBFS	./src/common.h	/^  UP_WBFS,$/;"	e	enum:upart_type
UP_XFS	./src/common.h	/^  UP_XFS,$/;"	e	enum:upart_type
UP_XFS2	./src/common.h	/^  UP_XFS2,$/;"	e	enum:upart_type
UP_XFS3	./src/common.h	/^  UP_XFS3,$/;"	e	enum:upart_type
UP_XFS4	./src/common.h	/^  UP_XFS4,$/;"	e	enum:upart_type
UP_ZFS	./src/common.h	/^  UP_ZFS};$/;"	e	enum:upart_type
UTF2Lat	./src/file_txt.c	/^int UTF2Lat(unsigned char *buffer_lower, const unsigned char *buffer, const int buf_len)$/;"	f
UTFsize	./src/file_txt.c	/^static int UTFsize(const unsigned char *buffer, const unsigned int buf_len)$/;"	f	file:
UUID_LEN	./src/lvm.h	45;"	d
UUID_STRING_L	./src/luks.h	34;"	d
U_EMR	./src/file_emf.c	/^} U_EMR;$/;"	t	typeref:struct:__anon19	file:
U_RECTL	./src/file_emf.c	/^} U_RECTL;$/;"	t	typeref:struct:__anon20	file:
U_SIZEL	./src/file_emf.c	/^} U_SIZEL;$/;"	t	typeref:struct:__anon21	file:
UserInfo	./src/file_spe.c	/^  char          UserInfo[1000];    \/* 1996-2995 user data.                     *\/     $/;"	m	struct:header_spe	file:
V7_NICFREE	./src/sysv.h	151;"	d
V7_NICINOD	./src/sysv.h	150;"	d
VDEV_BOOT_HEADER_SIZE	./src/vmfs.h	31;"	d
VDEV_BOOT_HEADER_SIZE	./src/zfs.h	31;"	d
VDEV_BOOT_MAGIC	./src/vmfs.h	29;"	d
VDEV_BOOT_MAGIC	./src/zfs.h	29;"	d
VDEV_BOOT_VERSION	./src/vmfs.h	30;"	d
VDEV_BOOT_VERSION	./src/zfs.h	30;"	d
VDI_TYPE_DYNAMIC	./src/file_vdi.c	50;"	d	file:
VDI_TYPE_STATIC	./src/file_vdi.c	51;"	d	file:
VDI_VERSION_1_1	./src/file_vdi.c	47;"	d	file:
VDPI	./src/file_pct.c	/^  uint32_t VDPI;		\/* 0x18 *\/$/;"	m	struct:pct_file_entry	file:
VMDK3Header	./src/file_vmdk.c	/^} VMDK3Header;$/;"	t	typeref:struct:__anon38	file:
VMDK4Header	./src/file_vmdk.c	/^} __attribute__((packed)) VMDK4Header;$/;"	t	typeref:struct:__anon39	file:
VScrSize	./src/file_pcx.c	/^  uint16_t VScrSize; 	\/* PC Paintbrush IV or higher 	*\/$/;"	m	struct:pcx_file_entry	file:
Val	./src/file_pct.c	/^  uint16_t Val;			\/* 0x10 0xFFEF or 0xFFEE *\/$/;"	m	struct:pct_file_entry	file:
VdiHeader	./src/file_vdi.c	/^} VdiHeader;$/;"	t	typeref:struct:__anon57	file:
Versao	./src/file_sp3.h	/^  uint8_t	Versao;$/;"	m	struct:SP3FileInfo
Version	./src/file_pcx.c	/^  uint8_t  Version;$/;"	m	struct:pcx_file_entry	file:
VersionNumber	./src/file_pct.c	/^  uint16_t VersionNumber;	\/* 0x0C 0x02ff *\/$/;"	m	struct:pct_file_entry	file:
VersionOperator	./src/file_pct.c	/^  uint16_t VersionOperator;	\/* 0x0A 0x0011 *\/$/;"	m	struct:pct_file_entry	file:
VertDPI	./src/file_pcx.c	/^  uint16_t VertDPI;$/;"	m	struct:pcx_file_entry	file:
VirtualAddress	./src/pe.h	/^  uint32_t VirtualAddress;$/;"	m	struct:pe_image_data_dir
VirtualAddress	./src/pe.h	/^  uint32_t VirtualAddress;$/;"	m	struct:pe_image_section_hdr
VirtualSize	./src/pe.h	/^  uint32_t VirtualSize;$/;"	m	struct:pe_image_section_hdr
VolSessionId	./src/file_bac.c	/^  uint32_t VolSessionId;            \/* Session Id for Job *\/$/;"	m	struct:block_header	file:
VolSessionTime	./src/file_bac.c	/^  uint32_t VolSessionTime;          \/* Session Time for Job *\/$/;"	m	struct:block_header	file:
WBFS_MAGIC	./src/wbfs.h	28;"	d
WIN_PHOTOREC_CFG	./src/phcfg.c	63;"	d	file:
WIN_PHOTOREC_SIG	./src/file_sig.c	57;"	d	file:
WIN_READ_NATIVE_MAX	./src/hpa_dco.c	87;"	d	file:
WIN_READ_NATIVE_MAX_EXT	./src/hpa_dco.c	91;"	d	file:
WOFFHeader	./src/file_woff.c	/^struct WOFFHeader$/;"	s	file:
WavpackHeader	./src/file_wv.c	/^} WavpackHeader;$/;"	t	typeref:struct:__anon47	file:
WilcomDesignInformationDDD	./src/file_doc.c	/^const char WilcomDesignInformationDDD[56]=$/;"	v
Win32VersionValue	./src/pe.h	/^  uint32_t Win32VersionValue;			    \/* ? *\/$/;"	m	struct:pe_image_optional_hdr32
Win32VersionValue	./src/pe.h	/^  uint32_t Win32VersionValue;			    \/* ? *\/$/;"	m	struct:pe_image_optional_hdr64
WinView_id	./src/file_spe.c	/^  int32_t          WinView_id;        \/* 2996 Set to 0x01234567L if file was      *\/$/;"	m	struct:header_spe	file:
WindowSize	./src/file_spe.c	/^  uint16_t  WindowSize;        \/* 1482 window size for kinetics only.      *\/$/;"	m	struct:header_spe	file:
WriteMostly1	./src/md.h	228;"	d
XENIX_NICFREE	./src/sysv.h	54;"	d
XENIX_NICINOD	./src/sysv.h	53;"	d
XFS_SB_MAGIC	./src/xfs.h	36;"	d
XFS_SB_VERSION_1	./src/xfs.h	37;"	d
XFS_SB_VERSION_2	./src/xfs.h	38;"	d
XFS_SB_VERSION_3	./src/xfs.h	39;"	d
XFS_SB_VERSION_4	./src/xfs.h	40;"	d
XFS_SB_VERSION_NUMBITS	./src/xfs.h	41;"	d
XFS_SUPERBLOCK_SIZE	./src/xfs.h	34;"	d
XMax	./src/file_pct.c	/^  uint16_t XMax;		\/* 0x06 *\/$/;"	m	struct:pct_file_entry	file:
XMax	./src/file_pcx.c	/^  uint16_t XMax;$/;"	m	struct:pcx_file_entry	file:
XMin	./src/file_pct.c	/^  uint16_t XMin;		\/* 0x02 72 DPI *\/$/;"	m	struct:pct_file_entry	file:
XMin	./src/file_pcx.c	/^  uint16_t XMin; 	\/* image width = XMax-XMin	*\/$/;"	m	struct:pcx_file_entry	file:
YMax	./src/file_pct.c	/^  uint16_t YMax;		\/* 0x08 *\/$/;"	m	struct:pct_file_entry	file:
YMax	./src/file_pcx.c	/^  uint16_t YMax;$/;"	m	struct:pcx_file_entry	file:
YMin	./src/file_pct.c	/^  uint16_t YMin;		\/* 0x04 *\/$/;"	m	struct:pct_file_entry	file:
YMin	./src/file_pcx.c	/^  uint16_t YMin; 	\/* image height = YMax-YMin	*\/$/;"	m	struct:pcx_file_entry	file:
ZIP_CENTRAL_DIR	./src/file_zip.c	64;"	d	file:
ZIP_CENTRAL_DIR64	./src/file_zip.c	68;"	d	file:
ZIP_DATA_DESCRIPTOR	./src/file_zip.c	70;"	d	file:
ZIP_END_CENTRAL_DIR	./src/file_zip.c	67;"	d	file:
ZIP_END_CENTRAL_DIR64	./src/file_zip.c	69;"	d	file:
ZIP_FILE_ENTRY	./src/file_zip.c	65;"	d	file:
ZIP_SIGNATURE	./src/file_zip.c	66;"	d	file:
_BSD_H	./src/bsd.h	25;"	d
_COMMON_H	./src/common.h	23;"	d
_DFXML_H	./src/dfxml.h	25;"	d
_DIRN_H	./src/dirn.h	23;"	d
_DIR_H	./src/dir.h	23;"	d
_FATN_H	./src/fatn.h	25;"	d
_FAT_ADV_H	./src/fat_adv.h	23;"	d
_FAT_CLUSTER_H	./src/fat_cluster.h	23;"	d
_FAT_COMMON_H	./src/fat_common.h	23;"	d
_FAT_H	./src/fat.h	24;"	d
_FAT_UNFORMAT_H	./src/fat_unformat.h	23;"	d
_HDWIN32_H	./src/hdwin32.h	23;"	d
_HFSP_H	./src/hfsp.h	27;"	d
_HFS_H	./src/hfs.h	22;"	d
_HPFS_H	./src/hpfs.h	24;"	d
_ISO9660_H	./src/iso9660.h	23;"	d
_JFS_SUPERBLOCK_H	./src/jfs_superblock.h	21;"	d
_LIST_H	./src/list.h	23;"	d
_LOG_H	./src/log.h	23;"	d
_LOG_PART_H	./src/log_part.h	23;"	d
_LVM_H	./src/lvm.h	23;"	d
_MD_P_H	./src/md.h	28;"	d
_PARTGPT_H	./src/partgpt.h	23;"	d
_SETDATE_H	./src/setdate.h	23;"	d
_TESTDISK_FILEGEN_H	./src/filegen.h	23;"	d
_TESTDISK_PHOTOREC_H	./src/photorec.h	24;"	d
_TESTDISK_TYPES_H	./src/types.h	23;"	d
_VMFS_H	./src/vmfs.h	24;"	d
_WBFS_H	./src/wbfs.h	24;"	d
_WIMHEADER_V1_PACKED	./src/file_wim.c	/^struct _WIMHEADER_V1_PACKED$/;"	s	file:
_WIN32_H	./src/win32.h	23;"	d
_ZFS_H	./src/zfs.h	24;"	d
__PE_H	./src/pe.h	24;"	d
__packed2__	./src/sysv.h	/^	uint32_t		s_free[COH_NICFREE] __packed2__; \/* first free block list chunk *\/$/;"	m	struct:coh_super_block
__packed2__	./src/sysv.h	/^	uint32_t		s_fsize __packed2__; \/* total number of zones of this fs *\/$/;"	m	struct:coh_super_block
__packed2__	./src/sysv.h	/^	uint32_t		s_fsize __packed2__; \/* total number of zones of this fs *\/$/;"	m	struct:xenix_super_block
__packed2__	./src/sysv.h	/^	uint32_t		s_tfree __packed2__; \/* total number of free zones *\/$/;"	m	struct:coh_super_block
__packed2__	./src/sysv.h	/^	uint32_t		s_tfree __packed2__; \/* total number of free zones *\/$/;"	m	struct:xenix_super_block
__packed2__	./src/sysv.h	/^	uint32_t		s_time __packed2__; \/* time of last super block update *\/$/;"	m	struct:coh_super_block
__packed2__	./src/sysv.h	/^	uint32_t		s_time __packed2__; \/* time of last super block update *\/$/;"	m	struct:xenix_super_block
__packed2__	./src/sysv.h	/^	uint32_t	s_fsize __packed2__;	\/* 0x02 total number of zones of this fs *\/$/;"	m	struct:sysv2_super_block
__packed2__	./src/sysv.h	/^	uint32_t	s_tfree __packed2__;	\/* total number of free zones *\/$/;"	m	struct:sysv2_super_block
__packed2__	./src/sysv.h	/^	uint32_t	s_time __packed2__;	\/* time of last super block update *\/$/;"	m	struct:sysv2_super_block
__packed2__	./src/sysv.h	/^	uint32_t     s_tfree __packed2__; \/* total number of free zones *\/$/;"	m	struct:v7_super_block
__packed2__	./src/sysv.h	/^	uint32_t     s_time __packed2__; \/* time of last super block update *\/$/;"	m	struct:v7_super_block
__packed2__	./src/sysv.h	/^	uint32_t    s_fsize __packed2__; \/* total number of zones of this fs *\/$/;"	m	struct:v7_super_block
__packed2__	./src/sysv.h	28;"	d
__pad0	./src/gfs2.h	/^	uint32_t  __pad0;	\/* Was superblock flags in gfs1 *\/$/;"	m	struct:gfs2_sb
__pad0	./src/gfs2.h	/^	uint64_t __pad0;		\/* Was generation number in gfs1 *\/$/;"	m	struct:gfs2_meta_header
__pad1	./src/gfs2.h	/^		uint32_t __pad1;$/;"	m	union:gfs2_meta_header::__anon14
__pad1	./src/gfs2.h	/^	uint32_t __pad1;	\/* Was journal segment size in gfs1 *\/$/;"	m	struct:gfs2_sb
__pad2	./src/gfs2.h	/^	struct gfs2_inum __pad2; \/* Was rindex dinode in gfs1 *\/$/;"	m	struct:gfs2_sb	typeref:struct:gfs2_sb::gfs2_inum
__pad3	./src/gfs2.h	/^	struct gfs2_inum __pad3; \/* Was quota inode in gfs1 *\/$/;"	m	struct:gfs2_sb	typeref:struct:gfs2_sb::gfs2_inum
__pad4	./src/gfs2.h	/^	struct gfs2_inum __pad4; \/* Was licence inode in gfs1 *\/$/;"	m	struct:gfs2_sb	typeref:struct:gfs2_sb::gfs2_inum
__partition_u1	./src/bsd.h	/^		} __partition_u1;$/;"	m	struct:disklabel::partition	typeref:union:disklabel::partition::__anon71
__reserved	./src/partgpt.h	/^  uint32_t	__reserved;                     \/* 0x14 *\/$/;"	m	struct:gpt_hdr
__td_list_add	./src/list.h	/^static inline void __td_list_add(struct td_list_head *newe,$/;"	f
__td_list_del	./src/list.h	/^static inline void __td_list_del(struct td_list_head * prev, struct td_list_head * next)$/;"	f
__td_list_splice	./src/list.h	/^static inline void __td_list_splice(struct td_list_head *list,$/;"	f
_field1	./src/hdaccess.c	/^  uint8_t _field1;$/;"	m	struct:_scsi_inquiry_data	file:
_field2	./src/hdaccess.c	/^  uint8_t _field2;$/;"	m	struct:_scsi_inquiry_data	file:
_ntfs_attribheader	./src/ntfs.h	/^typedef struct _ntfs_attribheader$/;"	s
_ntfs_attribnonresident	./src/ntfs.h	/^typedef struct _ntfs_attribnonresident$/;"	s
_ntfs_attribresident	./src/ntfs.h	/^typedef struct _ntfs_attribresident$/;"	s
_reserved1	./src/hdaccess.c	/^  uint8_t _reserved1;$/;"	m	struct:_scsi_inquiry_data	file:
_reserved2	./src/hdaccess.c	/^  uint8_t _reserved2;$/;"	m	struct:_scsi_inquiry_data	file:
_reserved3	./src/hdaccess.c	/^  uint8_t _reserved3[40];$/;"	m	struct:_scsi_inquiry_data	file:
_scsi_inquiry_data	./src/hdaccess.c	/^typedef struct _scsi_inquiry_data$/;"	s	file:
ab_header	./src/file_ab.c	/^struct ab_header$/;"	s	file:
abcdp_header	./src/file_abcdp.c	/^static const unsigned char abcdp_header[8]=  { 'b', 'p', 'l', 'i', 's', 't', '0', '0'};$/;"	v	file:
abstract_file_id	./src/iso9660.h	/^	char abstract_file_id[37];$/;"	m	struct:iso_primary_descriptor
accdb_header	./src/file_mdb.c	/^static const unsigned char accdb_header[]= { 0x00, 0x01, 0x00, 0x00, 'S', 't', 'a', 'n', 'd','a','r','d',' ','A','C','E',' ', 'D','B', 0x00};$/;"	v	file:
access_mode	./src/common.h	/^  int access_mode;$/;"	m	struct:param_disk_struct
ace_header_t	./src/file_ace.c	/^typedef struct header_ace ace_header_t;$/;"	t	typeref:struct:header_ace	file:
action	./src/phmain.c	/^static struct sigaction action;$/;"	v	typeref:struct:sigaction	file:
action	./src/testdisk.c	/^static struct sigaction action;$/;"	v	typeref:struct:sigaction	file:
active	./src/luks.h	/^  uint32_t	active;$/;"	m	struct:luks_keyslot
active_disks	./src/md.h	/^	uint32_t active_disks;	\/*  2 Number of currently active disks	      *\/$/;"	m	struct:mdp_superblock_s
adate	./src/exfat.h	/^  uint16_t adate;$/;"	m	struct:exfat_file_entry
adate	./src/fat.h	/^	uint16_t	adate;		\/* 12 Last access date *\/$/;"	m	struct:msdos_dir_entry
add_ext_part_i386	./src/godmode.c	/^static list_part_t *add_ext_part_i386(disk_t *disk, list_part_t *list_part, const int max_ext, const int verbose)$/;"	f	file:
add_partition_cli	./src/addpart.c	/^list_part_t *add_partition_cli(disk_t *disk, list_part_t *list_part, char **current_cmd)$/;"	f
add_partition_gpt_cli	./src/partgpt.c	/^list_part_t *add_partition_gpt_cli(disk_t *disk_car,list_part_t *list_part, char **current_cmd)$/;"	f
add_partition_gpt_ncurses	./src/partgptn.c	/^list_part_t *add_partition_gpt_ncurses(disk_t *disk_car, list_part_t *list_part)$/;"	f
add_partition_humax_cli	./src/parthumax.c	/^list_part_t *add_partition_humax_cli(disk_t *disk_car,list_part_t *list_part, char **current_cmd)$/;"	f
add_partition_i386_cli	./src/parti386.c	/^list_part_t *add_partition_i386_cli(disk_t *disk_car, list_part_t *list_part, char **current_cmd)$/;"	f
add_partition_i386_ncurses	./src/parti386n.c	/^list_part_t *add_partition_i386_ncurses(disk_t *disk_car, list_part_t *list_part)$/;"	f
add_partition_mac_cli	./src/partmac.c	/^list_part_t *add_partition_mac_cli(disk_t *disk_car,list_part_t *list_part, char **current_cmd)$/;"	f
add_partition_mac_ncurses	./src/partmacn.c	/^list_part_t *add_partition_mac_ncurses(disk_t *disk_car, list_part_t *list_part)$/;"	f
add_partition_ncurses	./src/addpartn.c	/^list_part_t *add_partition_ncurses(disk_t *disk, list_part_t *list_part)$/;"	f
add_partition_sun_cli	./src/partsun.c	/^list_part_t *add_partition_sun_cli(disk_t *disk_car,list_part_t *list_part, char **current_cmd)$/;"	f
add_partition_sun_ncurses	./src/partsunn.c	/^list_part_t *add_partition_sun_ncurses(disk_t *disk_car, list_part_t *list_part)$/;"	f
add_partition_xbox_cli	./src/partxbox.c	/^list_part_t *add_partition_xbox_cli(disk_t *disk_car,list_part_t *list_part, char **current_cmd)$/;"	f
add_partition_xbox_ncurses	./src/partxboxn.c	/^list_part_t *add_partition_xbox_ncurses(disk_t *disk_car, list_part_t *list_part)$/;"	f
additional_length	./src/hdaccess.c	/^  uint8_t additional_length;$/;"	m	struct:_scsi_inquiry_data	file:
addr1	./src/jfs_superblock.h	/^	unsigned addr1:8;$/;"	m	struct:__anon41
addr2	./src/jfs_superblock.h	/^	uint32_t addr2;$/;"	m	struct:__anon41
addsize	./src/file_ace.c	/^  uint32_t addsize;    \/** an optional field which represents the size of$/;"	m	struct:header_ace	file:
aff_LBA2CHS	./src/intrfn.c	/^void aff_LBA2CHS(const disk_t *disk_car, const unsigned long int pos_LBA)$/;"	f
aff_copy	./src/pbanner.c	/^void aff_copy(WINDOW *window)$/;"	f
aff_copy	./src/tbanner.c	/^void aff_copy(WINDOW *window)$/;"	f
aff_copy_short	./src/pbanner.c	/^void aff_copy_short(WINDOW *window)$/;"	f
aff_copy_short	./src/tbanner.c	/^void aff_copy_short(WINDOW *window)$/;"	f
aff_part	./src/intrfn.c	/^void aff_part(WINDOW *window,const unsigned int newline,const disk_t *disk_car,const partition_t *partition)$/;"	f
aff_part_aux	./src/intrf.c	/^const char *aff_part_aux(const unsigned int newline, const disk_t *disk_car, const partition_t *partition)$/;"	f
aff_part_buffer	./src/intrf.c	/^void aff_part_buffer(const unsigned int newline,const disk_t *disk_car,const partition_t *partition)$/;"	f
aff_txt	./src/askloc.c	/^static int aff_txt(int line, WINDOW *window, const char *_format, ...)$/;"	f	file:
ag_shift	./src/bfs.h	/^    uint32_t        ag_shift;              \/* 0x4C # of bits to shift to get ag num *\/$/;"	m	struct:disk_super_block
ahn_header	./src/file_ahn.c	/^static const unsigned char ahn_header[4]	= {'d','b','f',0x00};$/;"	v	file:
ahn_magic	./src/file_ahn.c	/^static const unsigned char ahn_magic[10]	= {'A','H','N','E','N','B','L','A','T','T'};$/;"	v	file:
aif_header	./src/file_aif.c	/^struct aif_header$/;"	s	file:
alias_checksum	./src/fat.h	/^	uint8_t    alias_checksum;	\/* 0D checksum for 8.3 alias *\/$/;"	m	struct:msdos_dir_slot
align_pread	./src/alignio.h	/^static int align_pread(int (*fnct_pread)(disk_t *disk_car, void *buf, const unsigned int count, const uint64_t offset),$/;"	f
align_pwrite	./src/alignio.h	/^static int align_pwrite(int (*fnct_pread)(disk_t *disk_car, void *buf, const unsigned int count, const uint64_t offset),$/;"	f
align_structure	./src/godmode.c	/^static void align_structure(list_part_t *list_part, const disk_t *disk, const unsigned int align)$/;"	f	file:
align_structure_aux	./src/godmode.c	/^static unsigned int align_structure_aux(const uint64_t offset, const disk_t *disk)$/;"	f	file:
all_header	./src/file_all.c	/^static const unsigned char all_header[8]= { 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x06, 0x04};$/;"	v	file:
alloc_cmd_dos_buffer	./src/msdos.c	/^static int alloc_cmd_dos_buffer(void)$/;"	f	file:
alloc_data_t	./src/filegen.h	/^} alloc_data_t;$/;"	t	typeref:struct:__anon66
alloc_file	./src/hfsp.h	/^	hfsp_fork_raw   alloc_file;$/;"	m	struct:hfsp_vh
alloc_io_channel	./src/ext2_dir.c	/^static io_channel alloc_io_channel(disk_t *disk_car,my_data_t *my_data)$/;"	f	file:
alloc_list_s	./src/list.h	/^struct alloc_list_s$/;"	s
alloc_list_t	./src/list.h	/^typedef struct alloc_list_s alloc_list_t;$/;"	t	typeref:struct:alloc_list_s
alloc_small	./src/suspend.c	/^static void *alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject) {$/;"	f	file:
allocated_percent	./src/exfat.h	/^	unsigned char   allocated_percent;      \/* 0x70 percentage of allocated space (?) *\/$/;"	m	struct:exfat_super_block
allocated_size	./src/ntfs.h	/^\/*  8*\/ uint32_t allocated_size;\/* Allocated byte size of this index (block),$/;"	m	struct:__anon22
allocated_size	./src/ntfs.h	/^\/* 28*\/	int64_t allocated_size;		\/* Byte size of on-disk allocated space$/;"	m	struct:__anon23
allocation_group	./src/bfs.h	/^    uint32_t   allocation_group;$/;"	m	struct:block_run
als_header	./src/file_als.c	/^static const unsigned char als_header[5]= {$/;"	v	file:
als_header2	./src/file_als.c	/^static const unsigned char als_header2[13]= {$/;"	v	file:
always_zero	./src/file_lnk.c	/^  uint64_t always_zero; 	\/* 44h *\/$/;"	m	struct:lnk_header_s	file:
amd_header	./src/file_amd.c	/^static const unsigned char amd_header[16]={$/;"	v	file:
amt_header	./src/file_amd.c	/^static const unsigned char amt_header[20]={$/;"	v	file:
analyse_dir_entries	./src/fat_adv.c	/^static int analyse_dir_entries(disk_t *disk_car,const partition_t *partition, const unsigned int offset,const int verbose)$/;"	f	file:
analyse_dir_entries2	./src/fat_adv.c	/^static int analyse_dir_entries2(disk_t *disk_car,const partition_t *partition, const unsigned int reserved, const unsigned int fat_length,const int verbose, unsigned int root_size_max,const upart_type_t upart_type, const unsigned int fats)$/;"	f	file:
analysis_end	./src/file_fcs.c	/^  unsigned char analysis_end[8];	\/* 50 *\/$/;"	m	struct:fcs_header	file:
analysis_start	./src/file_fcs.c	/^  unsigned char analysis_start[8];	\/* 34 *\/$/;"	m	struct:fcs_header	file:
aoLength	./src/file_axx.c	/^  uint32_t aoLength;$/;"	m	struct:SHeader	file:
apa_magic	./src/file_apa.c	/^static const unsigned char apa_magic[16]= {$/;"	v	file:
appInfoID	./src/file_prc.c	/^  unsigned char appInfoID[5];		\/* 0x32 *\/$/;"	m	struct:DatabaseHdrType_s	file:
app_id	./src/file_sql.c	/^ uint32_t app_id;$/;"	m	struct:db_header	file:
apple_header	./src/file_apple.c	/^static const unsigned char apple_header[8]= {$/;"	v	file:
application_data	./src/iso9660.h	/^	char application_data[512];$/;"	m	struct:iso_primary_descriptor
application_id	./src/iso9660.h	/^	char application_id[128];$/;"	m	struct:iso_primary_descriptor
arch	./src/common.h	/^  const arch_fnct_t *arch;$/;"	m	struct:param_disk_struct
arch	./src/common.h	/^  const arch_fnct_t *arch;$/;"	m	struct:partition_struct
arch_autodetected	./src/common.h	/^  const arch_fnct_t *arch_autodetected;$/;"	m	struct:param_disk_struct
arch_fnct_struct	./src/common.h	/^struct arch_fnct_struct$/;"	s
arch_fnct_t	./src/common.h	/^typedef struct arch_fnct_struct arch_fnct_t;$/;"	t	typeref:struct:arch_fnct_struct
arch_gpt	./src/partgpt.c	/^arch_fnct_t arch_gpt=$/;"	v
arch_humax	./src/parthumax.c	/^arch_fnct_t arch_humax=$/;"	v
arch_i386	./src/parti386.c	/^arch_fnct_t arch_i386= {$/;"	v
arch_mac	./src/partmac.c	/^arch_fnct_t arch_mac=$/;"	v
arch_none	./src/partnone.c	/^arch_fnct_t arch_none=$/;"	v
arch_sun	./src/partsun.c	/^arch_fnct_t arch_sun=$/;"	v
arch_xbox	./src/partxbox.c	/^arch_fnct_t arch_xbox=$/;"	v
archiver_ver	./src/file_arj.c	/^  uint8_t	archiver_ver;$/;"	m	struct:arj_main_header	file:
archiver_ver_min	./src/file_arj.c	/^  uint8_t	archiver_ver_min;$/;"	m	struct:arj_main_header	file:
archnum	./src/file_rpm.c	/^  uint16_t archnum;$/;"	m	struct:rpmlead	file:
arj_main_header	./src/file_arj.c	/^struct arj_main_header {$/;"	s	file:
arri_header	./src/file_ari.c	/^struct arri_header$/;"	s	file:
ascii2int	./src/file_fcs.c	/^static uint64_t ascii2int(const unsigned char *string, const unsigned int max_length)$/;"	f	file:
ascii2int2	./src/file_fcs.c	/^static uint64_t ascii2int2(const unsigned char *string, const unsigned int max_length, const unsigned int delimiter)$/;"	f	file:
ascii_char	./src/file_txt.c	/^static unsigned char ascii_char[256];$/;"	v	file:
asf_file_prop_s	./src/file_asf.c	/^struct asf_file_prop_s {$/;"	s	file:
asf_header_obj_s	./src/file_asf.c	/^struct asf_header_obj_s {$/;"	s	file:
asf_stream_prop_s	./src/file_asf.c	/^struct asf_stream_prop_s {$/;"	s	file:
ask_YN	./src/intrfn.c	/^int ask_YN(WINDOW *window)$/;"	f
ask_confirmation	./src/intrfn.c	/^int ask_confirmation(const char*_format, ...)$/;"	f
ask_int_ncurses	./src/intrfn.c	/^uint64_t ask_int_ncurses(const char *string)$/;"	f
ask_location	./src/askloc.c	/^char *ask_location(const char*msg, const char *src_dir, const char *dst_org)$/;"	f
ask_log_location	./src/intrfn.c	/^char *ask_log_location(const char*filename, const int errsv)$/;"	f
ask_mbr_order_i386	./src/godmode.c	/^static void ask_mbr_order_i386(disk_t *disk_car,list_part_t *list_part)$/;"	f	file:
ask_mode_ext2	./src/pfree_whole.c	/^int ask_mode_ext2(const disk_t *disk_car, const partition_t *partition, unsigned int *mode_ext2, unsigned int *carve_free_space_only)$/;"	f
ask_number	./src/intrfn.c	/^unsigned long long int ask_number(const unsigned long long int val_cur, const unsigned long long int val_min, const unsigned long long int val_max, const char * _format, ...)$/;"	f
ask_number_cli	./src/intrf.c	/^unsigned long long int ask_number_cli(char **current_cmd, const unsigned long long int val_cur, const unsigned long long int val_min, const unsigned long long int val_max, const char * _format, ...)$/;"	f
ask_root_directory	./src/fat_adv.c	/^static int ask_root_directory(disk_t *disk_car, const partition_t *partition, const file_info_t*dir_list, const unsigned long int cluster)$/;"	f	file:
ask_string_ncurses	./src/intrfn.c	/^const char *ask_string_ncurses(const char *string)$/;"	f
ask_structure	./src/intrface.c	/^list_part_t *ask_structure(disk_t *disk_car,list_part_t *list_part, const int verbose, char **current_cmd)$/;"	f
ask_structure_cli	./src/intrface.c	/^static list_part_t *ask_structure_cli(disk_t *disk_car,list_part_t *list_part, const int verbose, char **current_cmd)$/;"	f	file:
ask_structure_ncurses	./src/intrface.c	/^static list_part_t *ask_structure_ncurses(disk_t *disk_car,list_part_t *list_part, const int verbose)$/;"	f	file:
ask_testdisk_log_creation	./src/tlog.c	/^int ask_testdisk_log_creation()$/;"	f
ask_testdisk_log_creation	./src/tlog.c	/^int ask_testdisk_log_creation(void)$/;"	f
asm_header	./src/file_asm.c	/^static const unsigned char asm_header[16]= {$/;"	v	file:
astdiode	./src/file_spe.c	/^  int16_t           astdiode;          \/*  152                                     *\/$/;"	m	struct:header_spe	file:
asyavg	./src/file_spe.c	/^  int16_t           asyavg;            \/*   14  number of asynchron averages       *\/$/;"	m	struct:header_spe	file:
asynen	./src/file_spe.c	/^  int16_t           asynen;            \/*  106  asynchron enable flag  0 = off     *\/$/;"	m	struct:header_spe	file:
asyseq	./src/file_spe.c	/^  int16_t           asyseq;            \/*   16  number of asynchron sequential     *\/$/;"	m	struct:header_spe	file:
atd_header	./src/file_atd.c	/^static const unsigned char atd_header[16]= {$/;"	v	file:
atime	./src/exfat.h	/^  uint16_t atime;$/;"	m	struct:exfat_file_entry
atime	./src/file_lnk.c	/^  uint64_t atime; 		\/* 24h *\/$/;"	m	struct:lnk_header_s	file:
atom64_struct	./src/file_mov.c	/^struct atom64_struct$/;"	s	file:
atom_struct	./src/file_mov.c	/^struct atom_struct$/;"	s	file:
atom_struct	./src/file_r3d.c	/^struct atom_struct$/;"	s	file:
attr	./src/exfat.h	/^  uint16_t attr;$/;"	m	struct:exfat_file_entry
attr	./src/fat.h	/^	uint8_t	attr;			\/* 0B attribute bits *\/$/;"	m	struct:msdos_dir_entry
attr	./src/fat.h	/^	uint8_t    attr;		\/* 0B attribute byte *\/$/;"	m	struct:msdos_dir_slot
attr	./src/file_bkf.c	/^  uint32_t	attr;		\/* block attributes *\/$/;"	m	struct:mtf_db_hdr	file:
attr	./src/file_jpg.c	/^  uint32_t attr;$/;"	m	struct:MP_Entry	file:
attr_file	./src/hfsp.h	/^        hfsp_fork_raw   attr_file;$/;"	m	struct:hfsp_vh
attr_list	./src/ntfs_udl.c	/^	int		 attr_list;	\/* MFT record may be one of many *\/$/;"	m	struct:ufile	file:
attrib	./src/file_lzh.c	/^  uint8_t  attrib;$/;"	m	struct:lzh_level0	file:
attributes	./src/file_prc.c	/^  uint16_t 	attributes;		\/* 0x20 *\/$/;"	m	struct:DatabaseHdrType_s	file:
attributes	./src/hfsp.h	/^        uint32_t         attributes;  \/\/ 04: See bit constants below$/;"	m	struct:hfsp_vh
attrs_offset	./src/ntfs.h	/^  uint16_t	attrs_offset;	\/* Must be aligned to 8-byte boundary *\/$/;"	m	struct:ntfs_mft_record
au_header	./src/file_au.c	/^static const unsigned char au_header[4]= {'.','s','n','d'};$/;"	v	file:
audioClass	./src/file_mlv.c	/^  uint16_t    audioClass;	\/* 0=none, 1=WAV *\/$/;"	m	struct:__anon55	file:
audioFrameCount	./src/file_mlv.c	/^  uint32_t    audioFrameCount;	\/* number of audio frames in this file. set to 0 on start, updated when finished. *\/$/;"	m	struct:__anon55	file:
autodetect	./src/common.h	/^  int autodetect;$/;"	m	struct:param_disk_struct
autodetect_arch	./src/partauto.c	/^void autodetect_arch(disk_t *disk, const arch_fnct_t *arch)$/;"	f
autoset_geometry	./src/hdaccess.c	/^static void autoset_geometry(disk_t *disk, const unsigned char *buffer, const int verbose)$/;"	f	file:
autoset_unit	./src/autoset.c	/^void autoset_unit(disk_t *disk)$/;"	f
avgexp	./src/file_spe.c	/^  int16_t         avgexp;            \/*    2  number of accumulations per scan   *\/$/;"	m	struct:header_spe	file:
bIndexed	./src/ntfs.h	/^  uint8_t  bIndexed;            \/* Indexed flag *\/$/;"	m	struct:_ntfs_attribresident
bNonResident	./src/ntfs.h	/^  uint8_t  bNonResident;        \/* Non-resident flag *\/$/;"	m	struct:_ntfs_attribheader
bUnused	./src/file_wim.c	/^  unsigned char		bUnused[60];$/;"	m	struct:_WIMHEADER_V1_PACKED	file:
b_s_open	./src/suspend.c	/^  boolean b_s_open;		\/* is backing-store data valid? *\/$/;"	m	struct:jvirt_barray_control	file:
b_s_open	./src/suspend.c	/^  boolean b_s_open;		\/* is backing-store data valid? *\/$/;"	m	struct:jvirt_sarray_control	file:
background	./src/file_spe.c	/^  char          background[120];   \/* 1752 Background sub. file name.          *\/$/;"	m	struct:header_spe	file:
backing_file_offset	./src/file_cow.c	/^    uint64_t backing_file_offset;$/;"	m	struct:QCowHeader	file:
backing_file_offset	./src/file_cow.c	/^    uint64_t backing_file_offset;$/;"	m	struct:__anon48	file:
backing_file_size	./src/file_cow.c	/^    uint32_t backing_file_size;$/;"	m	struct:QCowHeader	file:
backing_file_size	./src/file_cow.c	/^    uint32_t backing_file_size;$/;"	m	struct:__anon48	file:
backup_boot	./src/fat.h	/^	uint16_t	backup_boot;	\/* 0x32 backup boot sector *\/$/;"	m	struct:fat_boot_sector
backup_date	./src/hfsp.h	/^        uint32_t         backup_date; \/\/ 18 GMT (?)$/;"	m	struct:hfsp_vh
backup_disk_t	./src/savehdr.h	/^} backup_disk_t;$/;"	t	typeref:struct:__anon18
bad_geometry	./src/msdos.h	/^  int bad_geometry;$/;"	m	struct:info_disk_struct
badpages	./src/swap.h	/^	unsigned int badpages[1];$/;"	m	struct:swap_header::__anon62
bandwidth	./src/btrfs.h	/^	uint8_t bandwidth;$/;"	m	struct:btrfs_dev_item
base	./src/lvm.h	/^	uint32_t base;$/;"	m	struct:__anon12
base_mft_record	./src/ntfs.h	/^  uint64_t	base_mft_record;$/;"	m	struct:ntfs_mft_record
base_type	./src/file_xcf.c	/^  uint32_t	base_type;$/;"	m	struct:xcf_header	file:
basic_header_size	./src/file_arj.c	/^  uint16_t	basic_header_size;$/;"	m	struct:arj_main_header	file:
be16	./src/common.h	444;"	d
be16	./src/common.h	464;"	d
be24	./src/common.h	465;"	d
be32	./src/common.h	448;"	d
be32	./src/common.h	473;"	d
be64	./src/common.h	453;"	d
be64	./src/common.h	482;"	d
bf_status_t	./src/phbf.c	/^typedef enum { BF_OK=0, BF_STOP=1, BF_EACCES=2, BF_ENOSPC=3, BF_FRAG_FOUND=4, BF_EOF=5, BF_ENOENT=6, BF_ERANGE=7} bf_status_t;$/;"	t	typeref:enum:__anon64	file:
bflags	./src/ole.h	/^	char		bflags;		\/\/ 67: 0 or 1$/;"	m	struct:OLE_DIR
bibliographic_file_id	./src/iso9660.h	/^	char bibliographic_file_id[37];$/;"	m	struct:iso_primary_descriptor
bim_header	./src/file_bim.c	/^static const unsigned char bim_header[0x20]=  {$/;"	v	file:
bit_rate_table	./src/file_mp3.c	/^static const unsigned int bit_rate_table[4][4][16]=$/;"	v	file:
bitmap_flags	./src/exfat.h	/^  uint8_t  bitmap_flags;$/;"	m	struct:exfat_alloc_bitmap_entry
bitmap_offset	./src/file_ico.c	/^  uint32_t	bitmap_offset;$/;"	m	struct:ico_directory	file:
bitmap_offset	./src/md.h	/^	int32_t	bitmap_offset;	\/* sectors after start of superblock that bitmap starts$/;"	m	struct:mdp_superblock_1
bitmap_size	./src/file_ico.c	/^  uint32_t	bitmap_size;$/;"	m	struct:ico_directory	file:
bits_per_pixel	./src/file_ico.c	/^  uint16_t	bits_per_pixel;$/;"	m	struct:ico_directory	file:
bkgdfile	./src/file_spe.c	/^  char          bkgdfile[16];      \/*  638  background file name               *\/$/;"	m	struct:header_spe	file:
blemish	./src/file_spe.c	/^  char          blemish[120];      \/* 1872 Blemish file name.                  *\/$/;"	m	struct:header_spe	file:
blend_header	./src/file_bld.c	/^static const unsigned char blend_header[7]  = { 'B', 'L', 'E', 'N', 'D', 'E', 'R'};$/;"	v	file:
blend_header_footer	./src/file_bld.c	/^static const unsigned char blend_header_footer[4]  = { 'E', 'N', 'D', 'B'};$/;"	v	file:
block	./src/hfs.h	/^  uint16_t block;$/;"	m	struct:hfs_extent
blockSize	./src/file_mlv.c	/^  uint32_t    blockSize;	\/* size of the whole header *\/$/;"	m	struct:__anon55	file:
blockSize	./src/file_mlv.c	/^  uint32_t    blockSize;$/;"	m	struct:__anon56	file:
blockType	./src/file_mlv.c	/^  uint8_t     blockType[4];$/;"	m	struct:__anon56	file:
block_count	./src/hfsp.h	/^        uint32_t         block_count;$/;"	m	struct:__anon53
block_extra	./src/file_vdi.c	/^    uint32_t block_extra;       \/* unused here *\/$/;"	m	struct:__anon57	file:
block_header	./src/file_bac.c	/^struct block_header$/;"	s	file:
block_index	./src/file_wv.c	/^    uint32_t block_index;       \/\/ index of first sample in block relative to$/;"	m	struct:__anon47	file:
block_per_clus_bits	./src/exfat.h	/^	unsigned char   block_per_clus_bits;    \/* bits of blocks per cluster *\/$/;"	m	struct:exfat_super_block
block_run	./src/bfs.h	/^typedef struct block_run$/;"	s
block_run	./src/bfs.h	/^} block_run;$/;"	t	typeref:struct:block_run
block_samples	./src/file_wv.c	/^    uint32_t block_samples;     \/\/ number of samples in this block (0 = no audio)$/;"	m	struct:__anon47	file:
block_shift	./src/bfs.h	/^    uint32_t       block_shift;           \/* 0x2C block_size == (1 << block_shift) *\/$/;"	m	struct:disk_super_block
block_size	./src/bfs.h	/^    uint32_t       block_size;            \/* 0x28 in bytes *\/$/;"	m	struct:disk_super_block
block_size	./src/file_vdi.c	/^    uint32_t block_size;$/;"	m	struct:__anon57	file:
blocks	./src/cramfs.h	/^	uint32_t blocks;$/;"	m	struct:cramfs_info
blocks	./src/vmfs.h	/^  uint64_t blocks;$/;"	m	struct:vmfs_lvm
blocks_allocated	./src/file_vdi.c	/^    uint32_t blocks_allocated;$/;"	m	struct:__anon57	file:
blocks_in_file	./src/pe.h	/^    uint16_t blocks_in_file;$/;"	m	struct:dos_image_file_hdr
blocks_in_image	./src/file_vdi.c	/^    uint32_t blocks_in_image;$/;"	m	struct:__anon57	file:
blocks_per_ag	./src/bfs.h	/^    uint32_t        blocks_per_ag;         \/* 0x48 in blocks *\/$/;"	m	struct:disk_super_block
blocksize	./src/common.h	/^  unsigned int  blocksize;$/;"	m	struct:partition_struct
blocksize	./src/file_jpg.c	/^  unsigned int blocksize;$/;"	m	struct:__anon60	file:
blocksize	./src/file_jpg.c	/^  unsigned int blocksize;$/;"	m	struct:jpeg_session_struct	file:
blocksize	./src/filegen.h	/^  unsigned int blocksize;$/;"	m	struct:file_recovery_struct
blocksize	./src/hfsp.h	/^        uint32_t         blocksize;	\/\/ 28$/;"	m	struct:hfsp_vh
blocksize	./src/photorec.h	/^  unsigned int blocksize;$/;"	m	struct:ph_param
blocksize	./src/rfs.h	/^  uint16_t blocksize;$/;"	m	struct:reiser4_master_sb
blocksize_bits	./src/exfat.h	/^	unsigned char   blocksize_bits;         \/* bits of block size *\/$/;"	m	struct:exfat_super_block
blocksperrow	./src/suspend.c	/^  JDIMENSION blocksperrow;	\/* width of array (and of memory buffer) *\/$/;"	m	struct:jvirt_barray_control	file:
bmp_header	./src/file_bmp.c	/^static const unsigned char bmp_header[2]= {'B','M'};$/;"	v	file:
bmp_header	./src/file_bmp.c	/^struct bmp_header$/;"	s	file:
boolean	./src/suspend.c	/^typedef int boolean;$/;"	t	file:
boot_ind	./src/parti386.c	/^    unsigned char boot_ind;         \/* 0x80 - active *\/$/;"	m	struct:partition_dos	file:
boot_sector	./src/exfat_dir.c	/^  struct exfat_super_block*boot_sector;$/;"	m	struct:exfat_dir_struct	typeref:struct:exfat_dir_struct::exfat_super_block	file:
boot_sector	./src/fat_dir.c	/^  struct fat_boot_sector*boot_sector;$/;"	m	struct:fat_dir_struct	typeref:struct:fat_dir_struct::fat_boot_sector	file:
bootbits	./src/swap.h	/^	char         bootbits[1024];    \/* Space for disklabel etc. *\/$/;"	m	struct:swap_header::__anon62
bootinfo	./src/sun.h	/^  unsigned char bootinfo[12];$/;"	m	struct:struct_sun_partition_i386
bootnbr	./src/partxbox.h	/^	uint32_t bootnbr;$/;"	m	struct:xbox_partition
bootstrap	./src/ntfs.h	/^	uint8_t  	bootstrap[426];             	\/* 0x54 Irrelevant (boot up code). *\/$/;"	m	struct:ntfs_boot_sector
bottom	./src/file_emf.c	/^  int32_t bottom;$/;"	m	struct:__anon20	file:
btrfs_dev_item	./src/btrfs.h	/^struct btrfs_dev_item {$/;"	s
btrfs_super_block	./src/btrfs.h	/^struct btrfs_super_block {$/;"	s
buffer	./src/ewf.c	/^  void *buffer;$/;"	m	struct:info_fewf_struct	file:
buffer	./src/file_jpg.c	/^  JOCTET * buffer;		\/* start of buffer *\/$/;"	m	struct:__anon60	file:
buffer	./src/hdcache.c	/^  unsigned char *buffer;$/;"	m	struct:cache_buffer_struct	file:
buffer_size	./src/ewf.c	/^  unsigned int buffer_size;$/;"	m	struct:info_fewf_struct	file:
buffer_size	./src/hdcache.c	/^  unsigned int	buffer_size;$/;"	m	struct:cache_buffer_struct	file:
bufsize	./src/ntfs_dir.c	/^enum { bufsize = 4096 };$/;"	e	enum:__anon58	file:
button_search	./src/qphotorec.h	/^		QPushButton 		*button_search;$/;"	m	class:QPhotorec
bytenr	./src/btrfs.h	/^	uint64_t bytenr; \/* this block number *\/$/;"	m	struct:btrfs_super_block
bytes_allocated	./src/ntfs.h	/^  uint32_t	bytes_allocated;$/;"	m	struct:ntfs_mft_record
bytes_in_last_block	./src/pe.h	/^    uint16_t bytes_in_last_block;$/;"	m	struct:dos_image_file_hdr
bytes_in_use	./src/ntfs.h	/^  uint32_t	bytes_in_use;	\/* Must be aligned to 8-byte boundary *\/$/;"	m	struct:ntfs_mft_record
bytes_per_sector	./src/common.h	/^  unsigned int bytes_per_sector;	\/* WARN: may be uninitialized *\/$/;"	m	struct:__anon40
bytes_used	./src/btrfs.h	/^	uint64_t bytes_used;$/;"	m	struct:btrfs_dev_item
bytes_used	./src/btrfs.h	/^	uint64_t bytes_used;$/;"	m	struct:btrfs_super_block
bz2_header	./src/file_bz2.c	/^static const unsigned char bz2_header[3]= {'B','Z','h'};$/;"	v	file:
cFileMD5	./src/file_ape.c	/^  uint8_t cFileMD5[16];			\/\/ the MD5 hash of the file (see notes for usage... it's a littly tricky)$/;"	m	struct:APE_DESCRIPTOR	file:
cID	./src/file_ape.c	/^  char cID[4];				\/\/ should equal 'MAC '$/;"	m	struct:APE_DESCRIPTOR	file:
cID	./src/file_ape.c	/^  char cID[4];			\/\/ should equal 'MAC '$/;"	m	struct:APE_HEADER_OLD	file:
cID	./src/file_ape.c	/^  char cID[4];		\/* should equal 'MAC ' *\/$/;"	m	struct:APE_COMMON_HEADER	file:
cName	./src/ntfs.h	/^  uint8_t  cName;               \/* Name length *\/$/;"	m	struct:_ntfs_attribheader
c_NO	./src/lang.h	26;"	d
c_YES	./src/lang.h	25;"	d
c_addr	./src/file_dump.c	/^  char	c_addr[TP_NINDIR];  \/* 1 => data; 0 => hole in inode *\/$/;"	m	struct:dump_struct	file:
c_atime	./src/file_dump.c	/^  int64_t	c_atime;	    \/* last access time, seconds *\/$/;"	m	struct:dump_struct	file:
c_atimensec	./src/file_dump.c	/^  int32_t	c_atimensec;	    \/* last access time, nanoseconds *\/$/;"	m	struct:dump_struct	file:
c_birthtime	./src/file_dump.c	/^  int64_t	c_birthtime;	    \/* creation time, seconds *\/$/;"	m	struct:dump_struct	file:
c_birthtimensec	./src/file_dump.c	/^  int32_t	c_birthtimensec;    \/* creation time, nanosecs *\/$/;"	m	struct:dump_struct	file:
c_checksum	./src/file_dump.c	/^  int32_t	c_checksum;	    \/* record checksum *\/$/;"	m	struct:dump_struct	file:
c_count	./src/file_dump.c	/^  int32_t	c_count;	    \/* number of valid c_addr entries *\/$/;"	m	struct:dump_struct	file:
c_date	./src/file_dump.c	/^  int64_t	c_date;		    \/* date of this dump *\/$/;"	m	struct:dump_struct	file:
c_ddate	./src/file_dump.c	/^  int64_t	c_ddate;	    \/* date of previous dump *\/$/;"	m	struct:dump_struct	file:
c_dev	./src/file_dump.c	/^  char	c_dev[NAMELEN];	    \/* name of dumpped device *\/$/;"	m	struct:dump_struct	file:
c_file_flags	./src/file_dump.c	/^  uint32_t 	c_file_flags;	    \/* status flags (chflags) *\/$/;"	m	struct:dump_struct	file:
c_filesys	./src/file_dump.c	/^  char	c_filesys[NAMELEN]; \/* name of dumpped file system *\/$/;"	m	struct:dump_struct	file:
c_firstrec	./src/file_dump.c	/^  int64_t	c_firstrec;	    \/* first record on volume *\/$/;"	m	struct:dump_struct	file:
c_flags	./src/file_dump.c	/^  int32_t	c_flags;	    \/* additional information *\/$/;"	m	struct:dump_struct	file:
c_gid	./src/file_dump.c	/^  uint32_t 	c_gid;	    \/* file group *\/$/;"	m	struct:dump_struct	file:
c_host	./src/file_dump.c	/^  char	c_host[NAMELEN];    \/* name of dumpped host *\/$/;"	m	struct:dump_struct	file:
c_inumber	./src/file_dump.c	/^  uint32_t	c_inumber;	    \/* number of inode *\/$/;"	m	struct:dump_struct	file:
c_label	./src/file_dump.c	/^  char	c_label[LBLSIZE];   \/* dump label *\/$/;"	m	struct:dump_struct	file:
c_level	./src/file_dump.c	/^  int32_t	c_level;	    \/* level of this dump *\/$/;"	m	struct:dump_struct	file:
c_magic	./src/file_dump.c	/^  int32_t	c_magic;	    \/* magic number (see above) *\/$/;"	m	struct:dump_struct	file:
c_mode	./src/file_dump.c	/^  uint16_t 	c_mode;	    \/* file mode *\/$/;"	m	struct:dump_struct	file:
c_mtime	./src/file_dump.c	/^  int64_t	c_mtime;	    \/* last modified time, seconds *\/$/;"	m	struct:dump_struct	file:
c_mtimensec	./src/file_dump.c	/^  int32_t	c_mtimensec;	    \/* last modified time, nanosecs *\/$/;"	m	struct:dump_struct	file:
c_old_atime	./src/file_dump.c	/^  int32_t	c_old_atime;	    \/* old last access time, seconds *\/$/;"	m	struct:dump_struct	file:
c_old_date	./src/file_dump.c	/^  int32_t	c_old_date;	    \/* date of this dump *\/$/;"	m	struct:dump_struct	file:
c_old_ddate	./src/file_dump.c	/^  int32_t	c_old_ddate;	    \/* date of previous dump *\/$/;"	m	struct:dump_struct	file:
c_old_firstrec	./src/file_dump.c	/^  int32_t	c_old_firstrec;	    \/* first record on volume *\/$/;"	m	struct:dump_struct	file:
c_old_mtime	./src/file_dump.c	/^  int32_t	c_old_mtime;	    \/* old last modified time, secs *\/$/;"	m	struct:dump_struct	file:
c_old_tapea	./src/file_dump.c	/^  int32_t	c_old_tapea;	    \/* logical block of this record *\/$/;"	m	struct:dump_struct	file:
c_rdev	./src/file_dump.c	/^  int32_t	c_rdev;		    \/* for devices, device number *\/$/;"	m	struct:dump_struct	file:
c_size	./src/file_dump.c	/^  uint64_t 	c_size;	    \/* file byte count *\/$/;"	m	struct:dump_struct	file:
c_spare	./src/file_dump.c	/^  int32_t	c_spare[24];	    \/* reserved for future uses *\/$/;"	m	struct:dump_struct	file:
c_spare1	./src/file_dump.c	/^  int16_t	c_spare1[3];	    \/* old nlink, ids *\/$/;"	m	struct:dump_struct	file:
c_spare2	./src/file_dump.c	/^  int32_t	c_spare2[2];	    \/* old ctime *\/$/;"	m	struct:dump_struct	file:
c_spare4	./src/file_dump.c	/^  int32_t	c_spare4[7];	    \/* old block pointers *\/$/;"	m	struct:dump_struct	file:
c_spare5	./src/file_dump.c	/^  int32_t	c_spare5[2];	    \/* old blocks, generation number *\/$/;"	m	struct:dump_struct	file:
c_spare6	./src/file_dump.c	/^  int32_t	c_spare6[2];	    \/* previously unused spares *\/$/;"	m	struct:dump_struct	file:
c_tapea	./src/file_dump.c	/^  int64_t	c_tapea;	    \/* logical block of this record *\/$/;"	m	struct:dump_struct	file:
c_type	./src/file_dump.c	/^  int32_t	c_type;		    \/* record type (see below) *\/$/;"	m	struct:dump_struct	file:
c_uid	./src/file_dump.c	/^  uint32_t 	c_uid;	    \/* file owner *\/$/;"	m	struct:dump_struct	file:
c_volume	./src/file_dump.c	/^  int32_t	c_volume;	    \/* dump volume number *\/$/;"	m	struct:dump_struct	file:
cab_header	./src/file_cab.c	/^struct cab_header {$/;"	s	file:
cab_version	./src/file_cab.c	/^  uint16_t cab_version;$/;"	m	struct:cab_header	file:
cache	./src/hdcache.c	/^  struct cache_buffer_struct cache[CACHE_BUFFER_NBR];$/;"	m	struct:cache_struct	typeref:struct:cache_struct::cache_buffer_struct	file:
cache_buffer_nbr	./src/hdcache.c	/^  unsigned int  cache_buffer_nbr;$/;"	m	struct:cache_struct	file:
cache_buffer_struct	./src/hdcache.c	/^struct cache_buffer_struct$/;"	s	file:
cache_clean	./src/hdcache.c	/^static void cache_clean(disk_t *disk_car)$/;"	f	file:
cache_description	./src/hdcache.c	/^static const char *cache_description(disk_t *disk_car)$/;"	f	file:
cache_description_short	./src/hdcache.c	/^static const char *cache_description_short(disk_t *disk_car)$/;"	f	file:
cache_offset	./src/hdcache.c	/^  uint64_t 	cache_offset;$/;"	m	struct:cache_buffer_struct	file:
cache_pread	./src/hdcache.c	/^static int cache_pread(disk_t *disk_car, void *buffer, const unsigned int count, const uint64_t offset)$/;"	f	file:
cache_pread_aux	./src/hdcache.c	/^static int cache_pread_aux(disk_t *disk_car, void *buffer, const unsigned int count, const uint64_t offset, const unsigned int read_ahead)$/;"	f	file:
cache_pwrite	./src/hdcache.c	/^static int cache_pwrite(disk_t *disk_car, const void *buffer, const unsigned int count, const uint64_t offset)$/;"	f	file:
cache_size	./src/hdcache.c	/^  unsigned int	cache_size;$/;"	m	struct:cache_buffer_struct	file:
cache_size_min	./src/hdcache.c	/^  unsigned int  cache_size_min;$/;"	m	struct:cache_struct	file:
cache_status	./src/hdcache.c	/^  int		cache_status;$/;"	m	struct:cache_buffer_struct	file:
cache_struct	./src/hdcache.c	/^struct cache_struct$/;"	s	file:
cache_sync	./src/hdcache.c	/^static int cache_sync(disk_t *disk_car)$/;"	f	file:
calc_percentage	./src/ntfs_udl.c	/^static int calc_percentage(struct ufile *file, ntfs_volume *vol)$/;"	f	file:
calcul_sectors_per_cluster	./src/fat_adv.c	/^static int calcul_sectors_per_cluster(const upart_type_t upart_type, const unsigned long int data_size, const unsigned int fat_length, const unsigned int sector_size)$/;"	f	file:
calculate_packet_size	./src/file_mpg.c	/^static int calculate_packet_size(const unsigned char *buffer)$/;"	f	file:
calculated_file_size	./src/filegen.h	/^  uint64_t calculated_file_size;$/;"	m	struct:file_recovery_struct
calibdio	./src/file_spe.c	/^  float         calibdio[10];      \/*   50  calibration diodes                 *\/$/;"	m	struct:header_spe	file:
calibnan	./src/file_spe.c	/^  float         calibnan[10];      \/*  110  calibration nanometer              *\/$/;"	m	struct:header_spe	file:
calibpol	./src/file_spe.c	/^  double        calibpol[4];       \/*  158  calibration coeffients             *\/$/;"	m	struct:header_spe	file:
califile	./src/file_spe.c	/^  char          califile[16];      \/*  622  calibration file name (CSMA)       *\/$/;"	m	struct:header_spe	file:
cam_header	./src/file_cam.c	/^static const unsigned char cam_header[4]= {0x07, 0x20, 'M', 'M'};$/;"	v	file:
cam_hwr_rev	./src/file_ari.c	/^  uint32_t cam_hwr_rev;$/;"	m	struct:arri_header	file:
capabilities	./src/dir.h	/^  unsigned int capabilities;$/;"	m	struct:dir_data
capacity	./src/file_vmdk.c	/^  int64_t capacity;$/;"	m	struct:__anon39	file:
carve_free_space_only	./src/photorec.h	/^  unsigned int carve_free_space_only;$/;"	m	struct:ph_param
cat_file	./src/hfsp.h	/^        hfsp_fork_raw   cat_file;$/;"	m	struct:hfsp_vh
catalog_entries	./src/file_hds.c	/^    uint32_t catalog_entries;$/;"	m	struct:parallels_header	file:
catdrawing_header	./src/file_catdrawing.c	/^static const unsigned char catdrawing_header[9]=  {$/;"	v	file:
cbAllocated	./src/ntfs.h	/^  uint64_t cbAllocated;         \/* Allocated size of the attribute (c) *\/$/;"	m	struct:_ntfs_attribnonresident
cbAttribData	./src/ntfs.h	/^  uint32_t cbAttribData;    	\/* Length of the Attribute *\/$/;"	m	struct:_ntfs_attribresident
cbAttribData	./src/ntfs.h	/^  uint64_t cbAttribData;    	\/* Real size of the attribute *\/$/;"	m	struct:_ntfs_attribnonresident
cbAttribute	./src/ntfs.h	/^  uint32_t cbAttribute;         \/* Length (including this header) *\/$/;"	m	struct:_ntfs_attribheader
cbId	./src/file_bkf.c	/^  uint32_t	cbId;		\/* control block ID *\/$/;"	m	struct:mtf_db_hdr	file:
cbInitData	./src/ntfs.h	/^  uint64_t cbInitData;          \/* Initialized data size of the stream (d) *\/$/;"	m	struct:_ntfs_attribnonresident
cbSize	./src/file_wim.c	/^  uint32_t		cbSize;$/;"	m	struct:_WIMHEADER_V1_PACKED	file:
ccd	./src/file_mrw.c	/^  } ccd;$/;"	m	struct:prd	typeref:struct:prd::__anon1	file:
cd	./src/exfat_dir.c	/^  iconv_t cd;$/;"	m	struct:exfat_dir_struct	file:
cd	./src/ntfs_inc.h	/^        iconv_t cd;$/;"	m	struct:ntfs_dir_struct
cdate	./src/exfat.h	/^  uint16_t cdate;$/;"	m	struct:exfat_file_entry
cdate	./src/fat.h	/^	uint16_t	cdate;		\/* 10 Creation date *\/$/;"	m	struct:msdos_dir_entry
cdt_header	./src/file_cdt.c	/^static const unsigned char cdt_header[7]=  {$/;"	v	file:
cfa_header_offset	./src/file_raf.c	/^  uint32_t cfa_header_offset;$/;"	m	struct:header_raf	file:
cfa_header_size	./src/file_raf.c	/^  uint32_t cfa_header_size;$/;"	m	struct:header_raf	file:
cfa_offset	./src/file_raf.c	/^  uint32_t cfa_offset;$/;"	m	struct:header_raf	file:
cfa_size	./src/file_raf.c	/^  uint32_t cfa_size;$/;"	m	struct:header_raf	file:
change_arch_type_cli	./src/chgarch.c	/^int change_arch_type_cli(disk_t *disk, const int verbose, char**current_cmd)$/;"	f
change_arch_type_ncurses	./src/chgarchn.c	/^int change_arch_type_ncurses(disk_t *disk, const int verbose)$/;"	f
change_geometry_cli	./src/geometry.c	/^int change_geometry_cli(disk_t *disk_car, char ** current_cmd)$/;"	f
change_geometry_ncurses	./src/geometryn.c	/^int change_geometry_ncurses(disk_t *disk_car)$/;"	f
change_part_type_cli	./src/chgtype.c	/^void change_part_type_cli(const disk_t *disk_car,partition_t *partition, char **current_cmd)$/;"	f
change_part_type_int_ncurses	./src/chgtypen.c	/^static void change_part_type_int_ncurses(const disk_t *disk_car, partition_t *partition)$/;"	f	file:
change_part_type_list_ncurses	./src/chgtypen.c	/^static void change_part_type_list_ncurses(const disk_t *disk_car, partition_t *partition)$/;"	f	file:
change_part_type_ncurses	./src/chgtypen.c	/^void change_part_type_ncurses(const disk_t *disk_car, partition_t *partition)$/;"	f
change_sector_size	./src/geometry.c	/^int change_sector_size(disk_t *disk, const int cyl_modified, const unsigned int sector_size)$/;"	f
channels	./src/file_au.c	/^  uint32_t channels;$/;"	m	struct:header_au_s	file:
channels	./src/file_psb.c	/^  uint16_t channels;	\/* between 1 and 56 *\/$/;"	m	struct:psb_file_header	file:
channels	./src/file_psd.c	/^  uint16_t channels;	\/* between 1 and 56 *\/$/;"	m	struct:psd_file_header	file:
channels	./src/file_ra.c	/^  uint16_t channels;$/;"	m	struct:ra4_header	file:
check	./src/file_bkf.c	/^  uint16_t	check;		\/* header checksum *\/$/;"	m	struct:mtf_db_hdr	file:
checkSum	./src/file_ttf.c	/^  uint32_t 	checkSum;$/;"	m	struct:ttf_table_directory	file:
check_BSD	./src/bsd.c	/^int check_BSD(disk_t *disk_car,partition_t *partition,const int verbose, const unsigned int max_partitions)$/;"	f
check_BeFS	./src/bfs.c	/^int check_BeFS(disk_t *disk_car,partition_t *partition)$/;"	f
check_EXFAT	./src/exfat.c	/^int check_EXFAT(disk_t *disk, partition_t *partition)$/;"	f
check_EXT2	./src/ext2.c	/^int check_EXT2(disk_t *disk_car,partition_t *partition,const int verbose)$/;"	f
check_FAT	./src/fat.c	/^int check_FAT(disk_t *disk_car,partition_t *partition,const int verbose)$/;"	f
check_FATX	./src/fatx.c	/^int check_FATX(disk_t *disk_car,partition_t *partition)$/;"	f
check_FAT_dir_entry	./src/fat_adv.c	/^static int check_FAT_dir_entry(const unsigned char *entry, const unsigned int entry_nr)$/;"	f	file:
check_HFS	./src/hfs.c	/^int check_HFS(disk_t *disk_car,partition_t *partition,const int verbose)$/;"	f
check_HFSP	./src/hfsp.c	/^int check_HFSP(disk_t *disk_car,partition_t *partition,const int verbose)$/;"	f
check_HPFS	./src/hpfs.c	/^int check_HPFS(disk_t *disk_car,partition_t *partition,const int verbose)$/;"	f
check_ISO	./src/iso.c	/^int check_ISO(disk_t *disk_car, partition_t *partition)$/;"	f
check_JFS	./src/jfs.c	/^int check_JFS(disk_t *disk_car, partition_t *partition)$/;"	f
check_LUKS	./src/luks.c	/^int check_LUKS(disk_t *disk_car,partition_t *partition)$/;"	f
check_LVM	./src/lvm.c	/^int check_LVM(disk_t *disk_car,partition_t *partition,const int verbose)$/;"	f
check_LVM2	./src/lvm.c	/^int check_LVM2(disk_t *disk_car,partition_t *partition,const int verbose)$/;"	f
check_Linux_SWAP	./src/swap.c	/^int check_Linux_SWAP(disk_t *disk_car, partition_t *partition)$/;"	f
check_MD	./src/md.c	/^int check_MD(disk_t *disk_car, partition_t *partition, const int verbose)$/;"	f
check_NTFS	./src/ntfs.c	/^int check_NTFS(disk_t *disk_car,partition_t *partition,const int verbose,const int dump_ind)$/;"	f
check_OS2MB	./src/fat.c	/^int check_OS2MB(disk_t *disk, partition_t *partition, const int verbose)$/;"	f
check_VFAT_volume_name	./src/fat.c	/^int check_VFAT_volume_name(const char *name, const unsigned int max_size)$/;"	f
check_VMFS	./src/vmfs.c	/^int check_VMFS(disk_t *disk,partition_t *partition)$/;"	f
check_WBFS	./src/wbfs.c	/^int check_WBFS(disk_t *disk,partition_t *partition)$/;"	f
check_ZFS	./src/zfs.c	/^int check_ZFS(disk_t *disk,partition_t *partition)$/;"	f
check_btrfs	./src/btrfs.c	/^int check_btrfs(disk_t *disk_car,partition_t *partition)$/;"	f
check_bytes	./src/file_vmdk.c	/^  char check_bytes[4];$/;"	m	struct:__anon39	file:
check_cramfs	./src/cramfs.c	/^int check_cramfs(disk_t *disk_car,partition_t *partition,const int verbose)$/;"	f
check_enh_bios	./src/msdos.c	/^static int check_enh_bios(const unsigned int disk, const int verbose)$/;"	f	file:
check_enter_key_or_s	./src/intrfn.c	/^int check_enter_key_or_s(WINDOW *window)$/;"	f
check_gfs2	./src/gfs2.c	/^int check_gfs2(disk_t *disk, partition_t *partition)$/;"	f
check_linux	./src/analyse.c	/^int check_linux(disk_t *disk, partition_t *partition, const int verbose)$/;"	f
check_mpo_be	./src/file_jpg.c	/^static uint64_t check_mpo_be(const unsigned char *mpo, const uint64_t mpo_offset, const unsigned int size)$/;"	f	file:
check_mpo_le	./src/file_jpg.c	/^static uint64_t check_mpo_le(const unsigned char *mpo, const uint64_t mpo_offset, const unsigned int size)$/;"	f	file:
check_netware	./src/netware.c	/^int check_netware(disk_t *disk_car, partition_t *partition)$/;"	f
check_part	./src/common.h	/^  int (*check_part)(disk_t *disk,const int verbose,partition_t *partition, const int saveheader);$/;"	m	struct:arch_fnct_struct
check_part_gpt	./src/partgpt.c	/^static int check_part_gpt(disk_t *disk, const int verbose,partition_t *partition, const int saveheader)$/;"	f	file:
check_part_i386	./src/parti386.c	/^static int check_part_i386(disk_t *disk_car,const int verbose,partition_t *partition, const int saveheader)$/;"	f	file:
check_part_mac	./src/partmac.c	/^static int check_part_mac(disk_t *disk_car,const int verbose,partition_t *partition, const int saveheader)$/;"	f	file:
check_part_none	./src/partnone.c	/^static int check_part_none(disk_t *disk_car,const int verbose,partition_t *partition, const int saveheader)$/;"	f	file:
check_part_sun	./src/partsun.c	/^static int check_part_sun(disk_t *disk_car,const int verbose,partition_t *partition, const int saveheader)$/;"	f	file:
check_part_xbox	./src/partxbox.c	/^static int check_part_xbox(disk_t *disk_car,const int verbose,partition_t *partition, const int saveheader)$/;"	f	file:
check_rfs	./src/rfs.c	/^int check_rfs(disk_t *disk_car,partition_t *partition,const int verbose)$/;"	f
check_riff_list	./src/file_riff.c	/^static void check_riff_list(file_recovery_t *fr, const unsigned int depth, const uint64_t start, const uint64_t end)$/;"	f	file:
check_sun_i386	./src/sun.c	/^int check_sun_i386(disk_t *disk_car,partition_t *partition,const int verbose)$/;"	f
check_sysv	./src/sysv.c	/^int check_sysv(disk_t *disk_car,partition_t *partition,const int verbose)$/;"	f
check_ufs	./src/ufs.c	/^int check_ufs(disk_t *disk_car,partition_t *partition,const int verbose)$/;"	f
check_xfs	./src/xfs.c	/^int check_xfs(disk_t *disk_car,partition_t *partition,const int verbose)$/;"	f
checked_date	./src/hfsp.h	/^        uint32_t         checked_date; \/\/ 1C GMT (?) fsck ?$/;"	m	struct:hfsp_vh
checkpoint_offset	./src/filegen.h	/^  uint64_t checkpoint_offset;$/;"	m	struct:file_recovery_struct
checkpoint_status	./src/filegen.h	/^  int checkpoint_status;	\/* 0=suspend at offset_checkpoint if offset_checkpoint>0, 1=resume at offset_checkpoint *\/$/;"	m	struct:file_recovery_struct
checksum	./src/exfat.h	/^  uint16_t checksum;$/;"	m	struct:exfat_file_entry
checksum	./src/file_dex.c	/^  uint32_t	checksum;$/;"	m	struct:dex_header	file:
checksum	./src/ntfs.h	/^	uint32_t 	checksum;                   	\/* 0x50 Boot sector checksum. *\/$/;"	m	struct:ntfs_boot_sector
checksum	./src/pe.h	/^    uint16_t checksum;$/;"	m	struct:dos_image_file_hdr
chksum	./src/file_reg.c	/^  uint32_t chksum;$/;"	m	struct:creg_file_header	file:
chksum	./src/file_reg.c	/^  uint32_t chksum;$/;"	m	struct:rgdb_block	file:
chrsize	./src/file_nes.c	/^	uint8_t chrsize;$/;"	m	struct:nes_header	file:
chunk_root	./src/btrfs.h	/^	uint64_t chunk_root;$/;"	m	struct:btrfs_super_block
chunk_root_generation	./src/btrfs.h	/^	uint64_t chunk_root_generation;$/;"	m	struct:btrfs_super_block
chunk_root_level	./src/btrfs.h	/^	uint8_t chunk_root_level;$/;"	m	struct:btrfs_super_block
chunk_size	./src/md.h	/^	uint32_t chunk_size;	\/*  1 chunk size in bytes		      *\/$/;"	m	struct:mdp_superblock_s
chunk_struct	./src/file_caf.c	/^struct chunk_struct$/;"	s	file:
chunksize	./src/md.h	/^	uint32_t	chunksize;	\/* in 512byte sectors *\/$/;"	m	struct:mdp_superblock_1
cinfo	./src/file_jpg.c	/^  struct jpeg_decompress_struct cinfo;$/;"	m	struct:jpeg_session_struct	typeref:struct:jpeg_session_struct::jpeg_decompress_struct	file:
cinfo	./src/suspend.c	/^GLOBAL(void) jinit_memory_mgr (j_common_ptr cinfo);$/;"	v
cinfo_backup	./src/file_jpg.c	/^  struct jpeg_decompress_struct cinfo_backup;$/;"	m	struct:jpeg_session_struct	typeref:struct:jpeg_session_struct::jpeg_decompress_struct	file:
cipherMode	./src/luks.h	/^  uint8_t	cipherMode[LUKS_CIPHERMODE_L];$/;"	m	struct:luks_phdr
cipherName	./src/luks.h	/^  uint8_t	cipherName[LUKS_CIPHERNAME_L];$/;"	m	struct:luks_phdr
ckID	./src/file_aif.c	/^  char ckID[4];$/;"	m	struct:aif_header	file:
ckID	./src/file_wv.c	/^    char ckID [4];              \/\/ "wvpk"$/;"	m	struct:__anon47	file:
ckSize	./src/file_aif.c	/^  uint32_t ckSize;$/;"	m	struct:aif_header	file:
ckSize	./src/file_wv.c	/^    uint32_t ckSize;            \/\/ size of entire block (minus 8, of course)$/;"	m	struct:__anon47	file:
class_def_off	./src/file_dex.c	/^  uint32_t	class_def_off;$/;"	m	struct:dex_header	file:
class_def_size	./src/file_dex.c	/^  uint32_t	class_def_size;$/;"	m	struct:dex_header	file:
class_header	./src/file_class.c	/^struct class_header {$/;"	s	file:
class_magic	./src/file_class.c	/^static const unsigned char class_magic[4]= { 0xCA, 0xFE, 0xBA, 0xBE };$/;"	v	file:
clean	./src/common.h	/^  void (*clean)(disk_t *disk);$/;"	m	struct:param_disk_struct
cleans	./src/file_spe.c	/^  uint16_t  cleans;            \/*  618  cleans                             *\/$/;"	m	struct:header_spe	file:
clkspd	./src/file_spe.c	/^  uint16_t  clkspd;            \/* 1484 clock speed for kinetics &          *\/$/;"	m	struct:header_spe	file:
clkspd_us	./src/file_spe.c	/^  float         clkspd_us;         \/* 1428 Vert Clock Speed in micro-sec       *\/$/;"	m	struct:header_spe	file:
clock_seq_hi_and_reserved	./src/common.h	/^  uint8_t  clock_seq_hi_and_reserved;$/;"	m	struct:efi_guid_s
clock_seq_low	./src/common.h	/^  uint8_t  clock_seq_low;$/;"	m	struct:efi_guid_s
close	./src/dir.h	/^  void (*close)(dir_data_t *dir_data);$/;"	m	struct:dir_data
clsid	./src/ole.h	/^	char		clsid[16];				\/*8*\/$/;"	m	struct:OLE_HDR
clsid	./src/ole.h	/^	char		clsid[16];	\/\/ 80$/;"	m	struct:OLE_DIR
clump_size	./src/hfsp.h	/^        uint32_t		clump_size;  \/\/ number of bytes to preallocate$/;"	m	struct:__anon54
clus_blocknr	./src/exfat.h	/^	uint32_t  	clus_blocknr;           \/* start blocknr of cluster *\/$/;"	m	struct:exfat_super_block
cluster	./src/fat_cluster.h	/^  unsigned int cluster;$/;"	m	struct:sector_cluster_struct
cluster_bits	./src/file_cow.c	/^    uint32_t cluster_bits;$/;"	m	struct:QCowHeader	file:
cluster_bits	./src/file_cow.c	/^    uint8_t cluster_bits;$/;"	m	struct:__anon48	file:
cluster_offset_struct	./src/fat_cluster.h	/^struct cluster_offset_struct$/;"	s
cluster_offset_t	./src/fat_cluster.h	/^typedef struct cluster_offset_struct cluster_offset_t;$/;"	t	typeref:struct:cluster_offset_struct
cluster_size_in_sector	./src/fatx.h	/^  uint32_t	cluster_size_in_sector;$/;"	m	struct:disk_fatx
clusters_per_index_block	./src/ntfs.h	/^\/* 12*\/	int8_t clusters_per_index_block;\/* Size of index block in clusters (in$/;"	m	struct:__anon26
clusters_per_index_record	./src/ntfs.h	/^	int8_t	clusters_per_index_record;	\/* 0x44 clusters per index block *\/$/;"	m	struct:ntfs_boot_sector
clusters_per_mft_record	./src/ntfs.h	/^	int8_t   clusters_per_mft_record;		\/* 0x40 *\/$/;"	m	struct:ntfs_boot_sector
cm_header	./src/file_cm.c	/^static const unsigned char cm_header[8]	= { 'f','L','m','C','0','0','0','1'};$/;"	v	file:
cmd_device	./src/photorec.h	/^  char *cmd_device;$/;"	m	struct:ph_param
cmd_dos_segment	./src/msdos.c	/^static int cmd_dos_segment = 0;$/;"	v	file:
cmd_dos_selector	./src/msdos.c	/^static int cmd_dos_selector = 0;$/;"	v	file:
cmd_run	./src/photorec.h	/^  char *cmd_run;$/;"	m	struct:ph_param
cms	./src/exfat.h	/^  uint8_t  cms;$/;"	m	struct:exfat_file_entry
cnt_corrected_read	./src/md.h	/^	uint32_t	cnt_corrected_read; \/* number of read errors that were corrected by re-writing *\/$/;"	m	struct:mdp_superblock_1
codec_flavor	./src/file_ra.c	/^  uint16_t codec_flavor;$/;"	m	struct:ra4_header	file:
codec_frame_size	./src/file_ra.c	/^  uint32_t codec_frame_size;$/;"	m	struct:ra4_header	file:
coh_super_block	./src/sysv.h	/^struct coh_super_block {$/;"	s
collation_rule	./src/ntfs.h	/^\/*  4*\/	uint32_t collation_rule;	\/* Collation rule used to sort the$/;"	m	struct:__anon26
color_count	./src/file_ico.c	/^  uint8_t	color_count;$/;"	m	struct:ico_directory	file:
color_mode	./src/file_psb.c	/^  uint16_t color_mode;	\/* Bitmap = 0; Grayscale = 1; Indexed = 2; RGB = 3; CMYK = 4; Multichannel = 7; Duotone = 8; Lab = 9 *\/$/;"	m	struct:psb_file_header	file:
color_mode	./src/file_psd.c	/^  uint16_t color_mode;	\/* Bitmap = 0; Grayscale = 1; Indexed = 2; RGB = 3; CMYK = 4; Multichannel = 7; Duotone = 8; Lab = 9 *\/$/;"	m	struct:psd_file_header	file:
color_planes	./src/file_ico.c	/^  uint16_t	color_planes;$/;"	m	struct:ico_directory	file:
columns	./src/file_x3f.c	/^  uint32_t	columns;$/;"	m	struct:x3f_header	file:
command_line	./src/dfxml.c	/^static char *command_line = NULL;$/;"	v	file:
compUnitSize	./src/ntfs.h	/^  uint16_t compUnitSize;    	\/* Compression Unit Size (b) *\/$/;"	m	struct:_ntfs_attribnonresident
comp_FAT	./src/fat.c	/^int comp_FAT(disk_t *disk, const partition_t *partition, const unsigned long int fat_size, const unsigned long int sect_res)$/;"	f
comp_size	./src/file_lzh.c	/^  uint32_t comp_size;$/;"	m	struct:lzh_level0	file:
comp_size	./src/file_lzh.c	/^  uint32_t comp_size;$/;"	m	struct:lzh_level1	file:
comp_size	./src/file_lzh.c	/^  uint32_t comp_size;$/;"	m	struct:lzh_level2	file:
compat_flags	./src/btrfs.h	/^	uint64_t compat_flags;$/;"	m	struct:btrfs_super_block
compat_ro_flags	./src/btrfs.h	/^	uint64_t compat_ro_flags;$/;"	m	struct:btrfs_super_block
compress_header	./src/file_compress.c	/^static const unsigned char compress_header[9]	= {'S', 'Z', 'D', 'D', 0x88, 0xf0, 0x27, 0x33, 'A'};$/;"	v	file:
compressed	./src/ntfs_udl.c	/^	int		 compressed;	\/* Stream is compressed *\/$/;"	m	struct:data	file:
compressed_size	./src/file_zip.c	/^  uint32_t compressed_size;         \/** Compressed size *\/$/;"	m	struct:zip_file_entry	file:
compressed_size	./src/file_zip.c	/^  uint64_t compressed_size;$/;"	m	struct:zip64_extra_entry	file:
compression	./src/file_zip.c	/^  uint16_t compression;             \/** Compression method *\/$/;"	m	struct:zip_file_entry	file:
compression_info	./src/file_zip.c	/^  uint16_t compression_info:2;      \/** Info about compression method used *\/$/;"	m	struct:zip_file_entry	file:
compression_method	./src/file_gz.c	/^  uint8_t  compression_method;$/;"	m	struct:gzip_header	file:
compute_device_size	./src/hdaccess.c	/^static uint64_t compute_device_size(const int hd_h, const char *device, const int verbose, const unsigned int sector_size)$/;"	f	file:
constant_pool_count	./src/file_class.c	/^  uint16_t constant_pool_count;$/;"	m	struct:class_header	file:
controllerNum	./src/file_spe.c	/^  uint16_t  controllerNum;     \/* 1506  if multiple controller system will *\/$/;"	m	struct:header_spe	file:
convert_char_dos	./src/dir.c	/^static inline unsigned char convert_char_dos(unsigned char car)$/;"	f	file:
convert_char_win	./src/dir.c	/^static inline unsigned char convert_char_win(unsigned char car)$/;"	f	file:
copy_dir	./src/dirn.c	/^static void copy_dir(WINDOW *window, disk_t *disk, const partition_t *partition, dir_data_t *dir_data, const file_info_t *dir, unsigned int *copy_ok, unsigned int *copy_bad)$/;"	f	file:
copy_done	./src/dirn.c	/^static void copy_done(WINDOW *window, const unsigned int copy_ok, const unsigned int copy_bad)$/;"	f	file:
copy_file	./src/dir.h	/^  int (*copy_file)(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const file_info_t *file);$/;"	m	struct:dir_data
copy_progress	./src/dirn.c	/^static void copy_progress(WINDOW *window, const unsigned int copy_ok, const unsigned int copy_bad)$/;"	f	file:
copyright	./src/file_dpx.c	/^  char 		copyright[200];   \/* right to use or copyright info *\/$/;"	m	struct:header_dpx	file:
copyright_file_id	./src/iso9660.h	/^	char copyright_file_id[37];$/;"	m	struct:iso_primary_descriptor
count	./src/file_ico.c	/^  uint16_t	count;$/;"	m	struct:ico_header	file:
count	./src/file_jpg.c	/^  uint32_t count;$/;"	m	struct:MP_IFD_Field	file:
count	./src/hfs.h	/^  uint16_t count;$/;"	m	struct:hfs_extent
cpg	./src/bsd.h	/^			uint16_t cpg;	\/* UFS: FS cylinders per group *\/$/;"	m	union:disklabel::partition::__anon71
cramfs_info	./src/cramfs.h	/^struct cramfs_info {$/;"	s
cramfs_inode	./src/cramfs.h	/^struct cramfs_inode {$/;"	s
cramfs_super	./src/cramfs.h	/^struct cramfs_super {$/;"	s
crc	./src/cramfs.h	/^	uint32_t crc;$/;"	m	struct:cramfs_info
crc	./src/file_wv.c	/^    uint32_t crc;               \/\/ crc for actual decoded data$/;"	m	struct:__anon47	file:
crc16	./src/file_ace.c	/^  uint16_t crc16;      \/** Lower 16bits of CRC32 over block up from HEAD_TYPE *\/$/;"	m	struct:header_ace	file:
crc32	./src/file_zip.c	/^  uint32_t crc32;                   \/** CRC32 *\/$/;"	m	struct:zip_file_entry	file:
crc32_tab	./src/crc.c	/^static const uint32_t crc32_tab[] = {$/;"	v	file:
crcFromArchive	./src/file_7z.c	/^  uint32_t crcFromArchive;$/;"	m	struct:header_7z	file:
crc_xl	./src/lvm.h	/^  uint32_t crc_xl;        \/* 0x10 From next field to end of sector *\/$/;"	m	struct:lvm2_label_header
create_date	./src/hfsp.h	/^        uint32_t         create_date; \/\/ 10 local time !$/;"	m	struct:hfsp_vh
create_fat_boot_sector	./src/fat_adv.c	/^static void create_fat_boot_sector(disk_t *disk_car, partition_t *partition, const unsigned int reserved, const int verbose, const unsigned int dir_entries, const unsigned long int root_cluster, const unsigned int sectors_per_cluster, const unsigned int fat_length,const int interface, const upart_type_t upart_type, const unsigned int fats, char **current_cmd)$/;"	f	file:
create_ntfs_boot_sector	./src/ntfs_adv.c	/^static int create_ntfs_boot_sector(disk_t *disk_car, partition_t *partition, const int interface, const unsigned int cluster_size, const uint64_t mft_lcn, const uint64_t mftmirr_lcn, const uint32_t mft_record_size, const uint32_t index_block_size, char**current_cmd)$/;"	f	file:
create_pathname	./src/ntfs_udl.c	/^static int create_pathname(const char *dir, const char *dir2, const char *name,$/;"	f	file:
create_time	./src/file_dpx.c	/^  char 		create_time[24];  \/* file creation date "yyyy:mm:dd:hh:mm:ss:LTZ" *\/$/;"	m	struct:header_dpx	file:
creationDate	./src/file_prc.c	/^  uint32_t      creationDate;		\/* 0x22 *\/$/;"	m	struct:DatabaseHdrType_s	file:
creation_date	./src/iso9660.h	/^	char creation_date[17];$/;"	m	struct:iso_primary_descriptor
creation_time	./src/ntfs.h	/^\/*  8*\/	int64_t creation_time;		\/* Time file was created. *\/$/;"	m	struct:__anon23
creator	./src/file_dpx.c	/^  char 		creator[100];     \/* file creator's name *\/$/;"	m	struct:header_dpx	file:
creator	./src/file_prc.c	/^  uint32_t      creator;		\/* 0x40 *\/$/;"	m	struct:DatabaseHdrType_s	file:
creator_type	./src/file_cwk.c	/^  uint32_t	creator_type;	\/* BOBO *\/$/;"	m	struct:cwk_header	file:
creg_file_header	./src/file_reg.c	/^struct creg_file_header$/;"	s	file:
crw_header_be	./src/file_crw.c	/^static const unsigned char crw_header_be[2]= {'I','I'};$/;"	v	file:
crw_header_le	./src/file_crw.c	/^static const unsigned char crw_header_le[2]= {'M','M'};$/;"	v	file:
crypt_method	./src/file_cow.c	/^    uint32_t crypt_method;$/;"	m	struct:QCowHeader	file:
crypt_method	./src/file_cow.c	/^    uint32_t crypt_method;$/;"	m	struct:__anon48	file:
cs	./src/pe.h	/^    uint16_t cs;$/;"	m	struct:dos_image_file_hdr
cs_nbfree	./src/ufs.h	/^	uint32_t	cs_nbfree;	\/* number of free blocks *\/$/;"	m	struct:ufs_csum
cs_nbfree	./src/ufs.h	/^	uint64_t	cs_nbfree;	\/* number of free blocks *\/$/;"	m	struct:ufs2_csum_total
cs_ndir	./src/ufs.h	/^	uint32_t	cs_ndir;	\/* number of directories *\/$/;"	m	struct:ufs_csum
cs_ndir	./src/ufs.h	/^	uint64_t	cs_ndir;	\/* number of directories *\/$/;"	m	struct:ufs2_csum_total
cs_nffree	./src/ufs.h	/^	uint32_t	cs_nffree;	\/* number of free frags *\/$/;"	m	struct:ufs_csum
cs_nffree	./src/ufs.h	/^	uint64_t	cs_nffree;	\/* number of free frags *\/$/;"	m	struct:ufs2_csum_total
cs_nifree	./src/ufs.h	/^	uint32_t	cs_nifree;	\/* number of free inodes *\/$/;"	m	struct:ufs_csum
cs_nifree	./src/ufs.h	/^	uint64_t	cs_nifree;	\/* number of free inodes *\/$/;"	m	struct:ufs2_csum_total
cs_numclusters	./src/ufs.h	/^	uint64_t   cs_numclusters;	\/* number of free clusters *\/$/;"	m	struct:ufs2_csum_total
cs_spare	./src/ufs.h	/^	uint64_t   cs_spare[3];	\/* future expansion *\/$/;"	m	struct:ufs2_csum_total
csectDir	./src/ole.h	/^	uint32_t	csectDir;			\/*40 Number of sectors in directory chains for 4KB sectors *\/$/;"	m	struct:OLE_HDR
csectMiniFat	./src/ole.h	/^	uint32_t	csectMiniFat;			\/*64 number of sectors in the minifat *\/$/;"	m	struct:OLE_HDR
csum	./src/btrfs.h	/^	uint8_t csum[BTRFS_CSUM_SIZE];$/;"	m	struct:btrfs_super_block
csum	./src/sun.h	/^  uint16_t csum;       \/* Label xor'd checksum *\/$/;"	m	struct:__anon8
csum	./src/sun.h	/^  uint16_t csum;       \/* Label xor'd checksum *\/$/;"	m	struct:struct_sun_partition_i386
csum_type	./src/btrfs.h	/^	uint16_t csum_type;$/;"	m	struct:btrfs_super_block
ctg_header	./src/file_ctg.c	/^static const unsigned char ctg_header[7]= {':','\\\\','D','C','I','M','\\\\'};$/;"	v	file:
ctime	./src/exfat.h	/^  uint16_t ctime;$/;"	m	struct:exfat_file_entry
ctime	./src/fat.h	/^	uint16_t	ctime;		\/* 0E Creation time *\/$/;"	m	struct:msdos_dir_entry
ctime	./src/file_arj.c	/^  uint32_t	ctime;$/;"	m	struct:arj_main_header	file:
ctime	./src/file_lnk.c	/^  uint64_t ctime; 		\/* 1Ch *\/$/;"	m	struct:lnk_header_s	file:
ctime	./src/md.h	/^	uint32_t ctime;		\/*  6 Creation time			      *\/$/;"	m	struct:mdp_superblock_s
ctime	./src/md.h	/^	uint64_t	ctime;		\/* lo 40 bits are seconds, top 24 are microseconds or 0*\/$/;"	m	struct:mdp_superblock_1
ctime_ms	./src/fat.h	/^	uint8_t	        ctime_ms;	\/* 0D Creation time, milliseconds *\/$/;"	m	struct:msdos_dir_entry
ctz	./src/exfat.h	/^  uint8_t  ctz;$/;"	m	struct:exfat_file_entry
cur_start_row	./src/suspend.c	/^  JDIMENSION cur_start_row;	\/* first logical row # in the buffer *\/$/;"	m	struct:jvirt_barray_control	file:
cur_start_row	./src/suspend.c	/^  JDIMENSION cur_start_row;	\/* first logical row # in the buffer *\/$/;"	m	struct:jvirt_sarray_control	file:
current_directory	./src/dir.h	/^  char current_directory[DIR_NAME_LEN];$/;"	m	struct:dir_data
current_fs	./src/ext2_inc.h	/^	ext2_filsys current_fs;$/;"	m	struct:ext2_dir_struct
current_fs	./src/rfs_dir.c	/^	reiserfs_fs_t *current_fs;$/;"	m	struct:rfs_dir_struct	file:
current_inode	./src/dir.h	/^  unsigned long int current_inode;$/;"	m	struct:dir_data
cwk_header	./src/file_cwk.c	/^struct cwk_header$/;"	s	file:
cx	./src/file_emf.c	/^  int32_t cx;$/;"	m	struct:__anon21	file:
cy	./src/file_emf.c	/^  int32_t cy;$/;"	m	struct:__anon21	file:
cyl	./src/parti386.c	/^    unsigned char cyl;              \/* starting cylinder *\/$/;"	m	struct:partition_dos	file:
cylinder	./src/common.h	/^  unsigned long int cylinder;$/;"	m	struct:CHS_struct
cylinders	./src/common.h	/^  unsigned long int cylinders;$/;"	m	struct:__anon40
cylinders	./src/file_hds.c	/^    uint32_t cylinders;$/;"	m	struct:parallels_header	file:
cylinders	./src/file_vdi.c	/^    uint32_t cylinders;         \/* disk geometry, unused here *\/$/;"	m	struct:__anon57	file:
cylinders	./src/file_vmdk.c	/^  uint32_t cylinders;$/;"	m	struct:__anon38	file:
d1	./src/ole.h	/^	int32_t		d1;$/;"	m	struct:DIRECTORY
d2	./src/ole.h	/^	int32_t		d2;$/;"	m	struct:DIRECTORY
d2s_header	./src/file_d2s.c	/^struct d2s_header {$/;"	s	file:
dSignature	./src/file_emf.c	/^  uint32_t dSignature;$/;"	m	struct:EMF_HDR	file:
d_acylinders	./src/bsd.h	/^	uint32_t d_acylinders;		\/* # of alt. cylinders per unit *\/$/;"	m	struct:disklabel
d_bbsize	./src/bsd.h	/^	uint32_t d_bbsize;		\/* size of boot area at sn0, bytes *\/$/;"	m	struct:disklabel
d_boot0	./src/bsd.h	79;"	d
d_boot1	./src/bsd.h	80;"	d
d_checksum	./src/bsd.h	/^	uint16_t d_checksum;		\/* xor of data incl. partitions *\/$/;"	m	struct:disklabel
d_cylskew	./src/bsd.h	/^	uint16_t d_cylskew;		\/* sector 0 skew, per cylinder *\/$/;"	m	struct:disklabel
d_drivedata	./src/bsd.h	/^	uint32_t d_drivedata[NDDATA];	\/* drive-type specific information *\/$/;"	m	struct:disklabel
d_flags	./src/bsd.h	/^	uint32_t d_flags;		\/* generic flags *\/$/;"	m	struct:disklabel
d_headswitch	./src/bsd.h	/^	uint32_t d_headswitch;		\/* head switch time, usec *\/$/;"	m	struct:disklabel
d_interleave	./src/bsd.h	/^	uint16_t d_interleave;		\/* hardware sector interleave *\/$/;"	m	struct:disklabel
d_magic	./src/bsd.h	/^	uint32_t d_magic;		\/* the magic number *\/$/;"	m	struct:disklabel
d_magic2	./src/bsd.h	/^	uint32_t d_magic2;		\/* the magic number (again) *\/$/;"	m	struct:disklabel
d_ncylinders	./src/bsd.h	/^	uint32_t d_ncylinders;		\/* # of data cylinders per unit *\/$/;"	m	struct:disklabel
d_npartitions	./src/bsd.h	/^	uint16_t d_npartitions;	\/* number of partitions in following *\/$/;"	m	struct:disklabel
d_nsectors	./src/bsd.h	/^	uint32_t d_nsectors;		\/* # of data sectors per track *\/$/;"	m	struct:disklabel
d_ntracks	./src/bsd.h	/^	uint32_t d_ntracks;		\/* # of tracks per cylinder *\/$/;"	m	struct:disklabel
d_packname	./src/bsd.h	/^	char	  d_packname[16];		\/* pack identifier *\/ $/;"	m	struct:disklabel
d_packname	./src/bsd.h	78;"	d
d_partitions	./src/bsd.h	/^	} d_partitions[BSD_MAXPARTITIONS];	\/* actually may be more *\/$/;"	m	struct:disklabel	typeref:struct:disklabel::partition
d_rpm	./src/bsd.h	/^	uint16_t d_rpm;		\/* rotational speed *\/$/;"	m	struct:disklabel
d_sbsize	./src/bsd.h	/^	uint32_t d_sbsize;		\/* max size of fs superblock, bytes *\/$/;"	m	struct:disklabel
d_secpercyl	./src/bsd.h	/^	uint32_t d_secpercyl;		\/* # of data sectors per cylinder *\/$/;"	m	struct:disklabel
d_secperunit	./src/bsd.h	/^	uint32_t d_secperunit;		\/* # of data sectors per unit *\/$/;"	m	struct:disklabel
d_secsize	./src/bsd.h	/^	uint32_t d_secsize;		\/* # of bytes per sector *\/$/;"	m	struct:disklabel
d_spare	./src/bsd.h	/^	uint32_t d_spare[NSPARE];	\/* reserved for future use *\/$/;"	m	struct:disklabel
d_sparespercyl	./src/bsd.h	/^	uint16_t d_sparespercyl;	\/* # of spare sectors per cylinder *\/$/;"	m	struct:disklabel
d_sparespertrack	./src/bsd.h	/^	uint16_t d_sparespertrack;	\/* # of spare sectors per track *\/$/;"	m	struct:disklabel
d_subtype	./src/bsd.h	/^	uint16_t d_subtype;		\/* controller\/d_type specific *\/$/;"	m	struct:disklabel
d_trackskew	./src/bsd.h	/^	uint16_t d_trackskew;		\/* sector 0 skew, per track *\/$/;"	m	struct:disklabel
d_trkseek	./src/bsd.h	/^	uint32_t d_trkseek;		\/* track-to-track seek, usec *\/$/;"	m	struct:disklabel
d_type	./src/bsd.h	/^	uint16_t d_type;		\/* drive type *\/$/;"	m	struct:disklabel
d_typename	./src/bsd.h	/^	char	  d_typename[16];	\/* type name, e.g. "eagle" *\/$/;"	m	struct:disklabel
d_un	./src/bsd.h	/^	} d_un;$/;"	m	struct:disklabel	typeref:union:disklabel::__anon69
dad_header	./src/file_dad.c	/^struct dad_header$/;"	s	file:
dal	./src/rfs_dir.c	/^	dal_t *dal;$/;"	m	struct:rfs_dir_struct	file:
dal_block_size	./src/rfs_dir.c	/^size_t dal_block_size(dal_t *dal) {$/;"	f
dal_close	./src/rfs_dir.c	/^void dal_close(dal_t *dal) {$/;"	f
dal_dev	./src/rfs_dir.c	/^dev_t dal_dev(dal_t *dal) {$/;"	f
dal_equals	./src/rfs_dir.c	/^int dal_equals(dal_t *dal1, dal_t *dal2) {$/;"	f
dal_error	./src/rfs_dir.c	/^char *dal_error(dal_t *dal) {$/;"	f
dal_flags	./src/rfs_dir.c	/^int dal_flags(dal_t *dal) {$/;"	f
dal_get_blocksize	./src/rfs_dir.c	/^unsigned dal_get_blocksize(dal_t *dal) {$/;"	f
dal_len	./src/rfs_dir.c	/^blk_t dal_len(dal_t *dal) {$/;"	f
dal_open	./src/rfs_dir.c	/^dal_t *dal_open(struct dal_ops *myops, const void *dev, size_t blocksize, int flags, void *data)$/;"	f
dal_read	./src/rfs_dir.c	/^int dal_read(dal_t *dal, void *buff, blk_t block, blk_t count) {$/;"	f
dal_set_block_size	./src/rfs_dir.c	/^int dal_set_block_size(dal_t *dal, size_t blocksize) {$/;"	f
dal_set_blocksize	./src/rfs_dir.c	/^int dal_set_blocksize(dal_t *dal, unsigned blocksize) {$/;"	f
dal_stat	./src/rfs_dir.c	/^int dal_stat(dal_t *dal, struct stat *mystat)$/;"	f
dal_stat	./src/rfs_dir.c	/^unsigned int dal_stat(dal_t *dal) {$/;"	f
dal_sync	./src/rfs_dir.c	/^int dal_sync(dal_t *dal) {$/;"	f
dal_write	./src/rfs_dir.c	/^int dal_write(dal_t *dal, void *buff, blk_t block, blk_t count) {$/;"	f
dar_header	./src/file_dar.c	/^static const unsigned char dar_header[4]=  {$/;"	v	file:
data	./src/common.h	/^  void *data;$/;"	m	struct:param_disk_struct
data	./src/file_mrw.c	/^  char data[0];$/;"	m	struct:hdr	file:
data	./src/file_png.c	/^  char data[0];$/;"	m	struct:png_chunk	file:
data	./src/filegen.h	/^  unsigned int data;$/;"	m	struct:__anon66
data	./src/list.h	/^  unsigned int data;$/;"	m	struct:alloc_list_s
data	./src/ntfs_udl.c	/^	struct td_list_head data;		\/* A list of data streams *\/$/;"	m	struct:ufile	typeref:struct:ufile::td_list_head	file:
data	./src/ntfs_udl.c	/^	void		*data;		\/* If resident, a pointer to the data *\/$/;"	m	struct:data	file:
data	./src/ntfs_udl.c	/^struct data {$/;"	s	file:
data_check	./src/filegen.h	/^  data_check_t (*data_check)(const unsigned char*buffer, const unsigned int buffer_size, file_recovery_t *file_recovery);$/;"	m	struct:file_recovery_struct
data_check_NTSC	./src/file_dv.c	/^static data_check_t data_check_NTSC(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_PAL	./src/file_dv.c	/^static data_check_t data_check_PAL(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_addressbook	./src/file_ab.c	/^static data_check_t data_check_addressbook(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_amr	./src/file_amr.c	/^static data_check_t data_check_amr(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_avi	./src/file_riff.c	/^static data_check_t data_check_avi(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_avi_stream	./src/file_riff.c	/^data_check_t data_check_avi_stream(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f
data_check_bac	./src/file_bac.c	/^static data_check_t data_check_bac(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_blend4be	./src/file_bld.c	/^static data_check_t data_check_blend4be(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_blend4le	./src/file_bld.c	/^static data_check_t data_check_blend4le(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_blend8be	./src/file_bld.c	/^static data_check_t data_check_blend8be(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_blend8le	./src/file_bld.c	/^static data_check_t data_check_blend8le(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_caf	./src/file_caf.c	/^static data_check_t data_check_caf(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_dad	./src/file_dad.c	/^static data_check_t data_check_dad(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_dxf	./src/file_dxf.c	/^static data_check_t data_check_dxf(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_emf	./src/file_emf.c	/^static data_check_t data_check_emf(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_evt	./src/file_evt.c	/^static data_check_t data_check_evt(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_extdir	./src/file_ext.c	/^static data_check_t data_check_extdir(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_fatdir	./src/file_dir.c	/^static data_check_t data_check_fatdir(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_fits	./src/file_fits.c	/^static data_check_t data_check_fits(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_flv	./src/file_flv.c	/^static data_check_t data_check_flv(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_fs	./src/file_fs.c	/^static data_check_t data_check_fs(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_gif	./src/file_gif.c	/^static data_check_t data_check_gif(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_gif2	./src/file_gif.c	/^static data_check_t data_check_gif2(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_html	./src/file_txt.c	/^static data_check_t data_check_html(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_id3	./src/file_mp3.c	/^static data_check_t data_check_id3(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_jpg	./src/file_jpg.c	/^data_check_t data_check_jpg(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f
data_check_jpg2	./src/file_jpg.c	/^static data_check_t data_check_jpg2(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_midi	./src/file_mid.c	/^static data_check_t data_check_midi(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_mlv	./src/file_mlv.c	/^static data_check_t data_check_mlv(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *fr)$/;"	f	file:
data_check_mng	./src/file_png.c	/^static data_check_t data_check_mng(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_mov	./src/file_mov.c	/^static data_check_t data_check_mov(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_mp3	./src/file_mp3.c	/^static data_check_t data_check_mp3(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_mpg	./src/file_mpg.c	/^static data_check_t data_check_mpg(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_oci	./src/file_oci.c	/^static data_check_t data_check_oci(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_ogg	./src/file_ogg.c	/^static data_check_t data_check_ogg(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_par2	./src/file_par2.c	/^static data_check_t data_check_par2(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_png	./src/file_png.c	/^static data_check_t data_check_png(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_ps	./src/file_ps.c	/^static data_check_t data_check_ps(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_psp	./src/file_psp.c	/^static data_check_t data_check_psp(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_qbb	./src/file_qbb.c	/^static data_check_t data_check_qbb(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_r3d	./src/file_r3d.c	/^static data_check_t data_check_r3d(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_size	./src/filegen.c	/^data_check_t data_check_size(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f
data_check_t	./src/filegen.h	/^typedef enum { DC_SCAN=0, DC_CONTINUE=1, DC_STOP=2, DC_ERROR=3} data_check_t;$/;"	t	typeref:enum:__anon65
data_check_tib2	./src/file_tib.c	/^static data_check_t data_check_tib2(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_ts_188	./src/file_m2ts.c	/^static data_check_t data_check_ts_188(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_ts_192	./src/file_m2ts.c	/^static data_check_t data_check_ts_192(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_ttd	./src/file_txt.c	/^static data_check_t data_check_ttd(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_txt	./src/file_txt.c	/^static data_check_t data_check_txt(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_vault	./src/file_vault.c	/^static data_check_t data_check_vault(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_win	./src/file_win.c	/^static data_check_t data_check_win(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_check_wv	./src/file_wv.c	/^static data_check_t data_check_wv(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
data_clump_sz	./src/hfsp.h	/^        uint32_t         data_clump_sz;$/;"	m	struct:hfsp_vh
data_end	./src/file_fcs.c	/^  unsigned char data_end[8];		\/* 34 *\/$/;"	m	struct:fcs_header	file:
data_length	./src/exfat.h	/^  uint64_t data_length;$/;"	m	struct:exfat_alloc_bitmap_entry
data_length	./src/exfat.h	/^  uint64_t data_length;$/;"	m	struct:exfat_stream_ext_entry
data_off	./src/file_dex.c	/^  uint32_t	data_off;$/;"	m	struct:dex_header	file:
data_offset	./src/file_flv.c	/^  uint32_t	data_offset;$/;"	m	struct:flv_header	file:
data_offset	./src/md.h	/^	uint64_t	data_offset;	\/* sector start of data, often 0 *\/$/;"	m	struct:mdp_superblock_1
data_size	./src/file_dex.c	/^  uint32_t	data_size;$/;"	m	struct:dex_header	file:
data_size	./src/file_flv.c	/^  uint8_t	data_size[3];$/;"	m	struct:flv_tag	file:
data_size	./src/file_ra.c	/^  uint32_t data_size;$/;"	m	struct:ra3_header	file:
data_size	./src/file_ra.c	/^  uint32_t data_size;$/;"	m	struct:ra4_header	file:
data_size	./src/md.h	/^	uint64_t	data_size;	\/* sectors in this device that can be used for data *\/$/;"	m	struct:mdp_superblock_1
data_size	./src/ntfs.h	/^\/* 30*\/	int64_t data_size;			\/* Byte size of actual data in data$/;"	m	struct:__anon23
data_start	./src/file_fcs.c	/^  unsigned char data_start[8];		\/* 26 *\/$/;"	m	struct:fcs_header	file:
datalen	./src/file_fh5.c	/^  uint32_t        datalen;    \/* Big Endian size w\/o headers *\/$/;"	m	struct:fh5_header_s	file:
datasize	./src/file_mrw.c	/^  uint8_t datasize;  \/\/ bpp, 12 or 16$/;"	m	struct:prd	file:
datatype	./src/file_spe.c	/^  int16_t           datatype;          \/*  108  experiment data type               *\/$/;"	m	struct:header_spe	file:
date	./src/fat.h	/^        uint16_t        date;		\/* 18 *\/$/;"	m	struct:msdos_dir_entry
date	./src/file_spe.c	/^  char          date[10];          \/*   20  date as MM\/DD\/YY                   *\/$/;"	m	struct:header_spe	file:
date	./src/ntfs_udl.c	/^	time_t		 date;		\/* Last modification date\/time *\/$/;"	m	struct:ufile	file:
date_a	./src/ntfs_udl.c	/^	time_t		 date_a;	\/*	altered *\/$/;"	m	struct:filename	file:
date_c	./src/ntfs_udl.c	/^	time_t		 date_c;	\/* Time created *\/$/;"	m	struct:filename	file:
date_dos2unix	./src/common.c	/^int date_dos2unix(const unsigned short f_time, const unsigned short f_date)$/;"	f
date_m	./src/ntfs_udl.c	/^	time_t		 date_m;	\/*	mft record changed *\/$/;"	m	struct:filename	file:
date_r	./src/ntfs_udl.c	/^	time_t		 date_r;	\/*	read *\/$/;"	m	struct:filename	file:
days1	./src/ole.h	/^	int32_t		days1;		\/\/ 104$/;"	m	struct:OLE_DIR
days2	./src/ole.h	/^	int32_t		days2;		\/\/ 112$/;"	m	struct:OLE_DIR
db_header	./src/file_sql.c	/^struct db_header$/;"	s	file:
dbf_header	./src/file_dbf.c	/^static const unsigned char dbf_header[1]= {0x3};$/;"	v	file:
dbn_header	./src/file_dbn.c	/^static const unsigned char dbn_header[16]=  {$/;"	v	file:
dco	./src/common.h	/^  uint64_t dco;$/;"	m	struct:param_disk_struct
ddBlock	./src/partmac.h	/^    uint32_t 	ddBlock;	\/* 1st driver's starting block *\/$/;"	m	struct:DDMap
ddSize	./src/partmac.h	/^    uint16_t 	ddSize;		\/* size of 1st driver (512-byte blks) *\/$/;"	m	struct:DDMap
ddType	./src/partmac.h	/^    uint16_t 	ddType;		\/* system type (1 for Mac+) *\/$/;"	m	struct:DDMap
dd_struct	./src/file_hdf.c	/^struct dd_struct$/;"	s	file:
ddh_struct	./src/file_hdf.c	/^struct ddh_struct$/;"	s	file:
default_page_cache_size	./src/file_sql.c	/^ uint32_t default_page_cache_size;$/;"	m	struct:db_header	file:
del_search_space	./src/photorec.c	/^void del_search_space(alloc_data_t *list_search_space, const uint64_t start, const uint64_t end)$/;"	f
delete_list_disk	./src/fnctdsk.c	/^int delete_list_disk(list_disk_t *list_disk)$/;"	f
delete_list_file	./src/dir.c	/^unsigned int delete_list_file(file_info_t *file_info)$/;"	f
delta_disks	./src/md.h	/^	uint32_t	delta_disks;	\/* change in number of raid_disks		*\/$/;"	m	struct:mdp_superblock_1
dep1	./src/file_jpg.c	/^  uint16_t dep1;$/;"	m	struct:MP_Entry	file:
dep2	./src/file_jpg.c	/^  uint16_t dep2;$/;"	m	struct:MP_Entry	file:
depth	./src/file_psb.c	/^  uint16_t depth;	\/* 1, 8, 16 or 32 *\/$/;"	m	struct:psb_file_header	file:
depth	./src/file_psd.c	/^  uint16_t depth;	\/* 1, 8, 16 or 32 *\/$/;"	m	struct:psd_file_header	file:
desc	./src/intrf.h	/^    const char *desc; \/* Item description to be printed when item is selected *\/$/;"	m	struct:MenuItem
desc_offset	./src/file_vmdk.c	/^  int64_t desc_offset;$/;"	m	struct:__anon39	file:
desc_size	./src/file_vmdk.c	/^  int64_t desc_size;$/;"	m	struct:__anon39	file:
description	./src/common.h	/^  const char *(*description)(disk_t *disk);$/;"	m	struct:param_disk_struct
description	./src/file_vdi.c	/^    char description[256];$/;"	m	struct:__anon57	file:
description	./src/filegen.h	/^  const char *description;$/;"	m	struct:file_hint_struct
description	./src/savehdr.h	/^  char description[128];$/;"	m	struct:__anon18
description_short	./src/common.h	/^  const char *(*description_short)(disk_t *disk);$/;"	m	struct:param_disk_struct
description_short_txt	./src/common.h	/^  char description_short_txt[DISKDESCRIPTION_MAX];$/;"	m	struct:param_disk_struct
description_txt	./src/common.h	/^  char description_txt[DISKDESCRIPTION_MAX];$/;"	m	struct:param_disk_struct
dest	./src/ntfs_udl.c	/^	char		*dest;		\/* Save file to this directory *\/$/;"	m	struct:options	file:
dev	./src/hfsp.h	/^        uint32_t         dev;$/;"	m	struct:__anon52
dev_group	./src/btrfs.h	/^	uint32_t dev_group;$/;"	m	struct:btrfs_dev_item
dev_item	./src/btrfs.h	/^	struct btrfs_dev_item dev_item;$/;"	m	struct:btrfs_super_block	typeref:struct:btrfs_super_block::btrfs_dev_item
dev_number	./src/md.h	/^	uint32_t	dev_number;	\/* permanent identifier of this  device - not role in raid *\/$/;"	m	struct:mdp_superblock_1
dev_roles	./src/md.h	/^	uint16_t	dev_roles[0];	\/* role in array, or 0xffff for a spare, or 0xfffe for faulty *\/$/;"	m	struct:mdp_superblock_1
devflags	./src/md.h	/^	uint8_t	devflags;	\/* per-device flags.  Only one defined...*\/$/;"	m	struct:mdp_superblock_1
device	./src/common.h	/^  char *device;$/;"	m	struct:param_disk_struct
device_info	./src/hdaccess.c	/^  uint8_t device_info;$/;"	m	struct:_scsi_inquiry_data	file:
device_size_xl	./src/lvm.h	/^  uint64_t device_size_xl;        \/* Bytes *\/$/;"	m	struct:lvm2_pv_header
device_uuid	./src/md.h	/^	uint8_t	device_uuid[16]; \/* user-space setable, ignored by kernel *\/$/;"	m	struct:mdp_superblock_1
devid	./src/btrfs.h	/^	uint64_t devid;$/;"	m	struct:btrfs_dev_item
dex_header	./src/file_dex.c	/^struct dex_header$/;"	s	file:
dfsignature	./src/ole.h	/^	uint32_t	dfsignature;			\/*52*\/$/;"	m	struct:OLE_HDR
diff	./src/parti386.c	/^static int diff(const unsigned char buffer[DEFAULT_SECTOR_SIZE], const unsigned char buffer_org[DEFAULT_SECTOR_SIZE])$/;"	f	file:
dim_header	./src/file_dim.c	/^static const unsigned char dim_header[4]= { 'S', 'P','C','I'};$/;"	v	file:
dioden	./src/file_spe.c	/^  uint16_t        dioden;            \/*    0  num of physical pixels (X axis)    *\/$/;"	m	struct:header_spe	file:
dir	./src/ole.h	/^	int32_t		dir;$/;"	m	struct:DIRECTORY
dir_aff_entry	./src/askloc.c	/^static void dir_aff_entry(WINDOW *window, file_info_t *file_info)$/;"	f	file:
dir_aff_log	./src/dir.c	/^int dir_aff_log(const dir_data_t *dir_data, const file_info_t *dir_list)$/;"	f
dir_aff_ncurses	./src/dirn.c	/^static long int dir_aff_ncurses(disk_t *disk, const partition_t *partition, dir_data_t *dir_data, file_info_t*dir_list, const unsigned long int inode, const unsigned int depth)$/;"	f	file:
dir_data	./src/dir.h	/^struct dir_data$/;"	s
dir_data	./src/ext2_inc.h	/^	dir_data_t *dir_data;$/;"	m	struct:ext2_dir_struct
dir_data	./src/ntfs_inc.h	/^	dir_data_t *dir_data;$/;"	m	struct:ntfs_dir_struct
dir_data_t	./src/dir.h	/^typedef struct dir_data dir_data_t;$/;"	t	typeref:struct:dir_data
dir_entries	./src/fat.h	/^	uint8_t	dir_entries[2];	\/* 0x11 root directory entries *\/$/;"	m	struct:fat_boot_sector
dir_entries	./src/ntfs.h	/^	uint8_t	dir_entries[2];	\/* 0x11 root directory entries = 0 *\/$/;"	m	struct:ntfs_boot_sector
dir_exfat_aux	./src/exfat_dir.c	/^static int dir_exfat_aux(const unsigned char*buffer, const unsigned int size, const dir_data_t *dir_data, file_info_t *dir_list)$/;"	f	file:
dir_fat_aux	./src/fat_dir.c	/^int dir_fat_aux(const unsigned char*buffer, const unsigned int size, const unsigned int param, file_info_t *dir_list)$/;"	f
dir_list	./src/ext2_inc.h	/^	file_info_t *dir_list;$/;"	m	struct:ext2_dir_struct
dir_list	./src/ntfs_inc.h	/^	file_info_t *dir_list;$/;"	m	struct:ntfs_dir_struct
dir_list	./src/rfs_dir.c	/^	file_info_t *dir_list;$/;"	m	struct:rfs_dir_struct	file:
dir_num	./src/photorec.h	/^  unsigned int dir_num;$/;"	m	struct:ph_param
dir_partition	./src/dirpart.c	/^dir_partition_t dir_partition(disk_t *disk, const partition_t *partition, const int verbose, char **current_cmd)$/;"	f
dir_partition_aff	./src/dirn.c	/^int dir_partition_aff(disk_t *disk, const partition_t *partition, dir_data_t *dir_data, const unsigned long int inode, char **current_cmd)$/;"	f
dir_partition_aux	./src/dirn.c	/^static int dir_partition_aux(disk_t *disk, const partition_t *partition, dir_data_t *dir_data, const unsigned long int inode, const unsigned int depth, char**current_cmd)$/;"	f	file:
dir_partition_exfat_close	./src/exfat_dir.c	/^static void dir_partition_exfat_close(dir_data_t *dir_data)$/;"	f	file:
dir_partition_exfat_init	./src/exfat_dir.c	/^dir_partition_t dir_partition_exfat_init(disk_t *disk, const partition_t *partition, dir_data_t *dir_data, const int verbose)$/;"	f
dir_partition_ext2_close	./src/ext2_dir.c	/^static void dir_partition_ext2_close(dir_data_t *dir_data)$/;"	f	file:
dir_partition_ext2_init	./src/ext2_dir.c	/^dir_partition_t dir_partition_ext2_init(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const int verbose)$/;"	f
dir_partition_fat_close	./src/fat_dir.c	/^static void dir_partition_fat_close(dir_data_t *dir_data)$/;"	f	file:
dir_partition_fat_init	./src/fat_dir.c	/^dir_partition_t dir_partition_fat_init(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const int verbose)$/;"	f
dir_partition_init	./src/dirpart.c	/^static dir_partition_t dir_partition_init(disk_t *disk, const partition_t *partition, const int verbose, dir_data_t *dir_data)$/;"	f	file:
dir_partition_ntfs_close	./src/ntfs_dir.c	/^static void dir_partition_ntfs_close(dir_data_t *dir_data)$/;"	f	file:
dir_partition_ntfs_init	./src/ntfs_dir.c	/^dir_partition_t dir_partition_ntfs_init(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const int verbose)$/;"	f
dir_partition_reiser_close	./src/rfs_dir.c	/^static void dir_partition_reiser_close(dir_data_t *dir_data)$/;"	f	file:
dir_partition_reiser_init	./src/rfs_dir.c	/^dir_partition_t dir_partition_reiser_init(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const int verbose)$/;"	f
dir_partition_t	./src/dir.h	/^typedef enum { DIR_PART_ENOSYS=-2, DIR_PART_EIO=-1, DIR_PART_OK=0} dir_partition_t;$/;"	t	typeref:enum:__anon49
dir_version	./src/file_raf.c	/^  char dir_version[4];	\/* 0100 or 0159 *\/$/;"	m	struct:header_raf	file:
dir_whole_partition_log	./src/dir.c	/^int dir_whole_partition_log(disk_t *disk, const partition_t *partition, dir_data_t *dir_data, const unsigned long int inode)$/;"	f
dir_whole_partition_log_aux	./src/dir.c	/^static int dir_whole_partition_log_aux(disk_t *disk, const partition_t *partition, dir_data_t *dir_data, const unsigned long int inode)$/;"	f	file:
directory	./src/ntfs_udl.c	/^	int		 directory;	\/* MFT record represents a directory *\/$/;"	m	struct:ufile	file:
directoryLabel	./src/qphotorec.h	/^		QLineEdit 		*directoryLabel;$/;"	m	class:QPhotorec
dirty	./src/suspend.c	/^  boolean dirty;		\/* do current buffer contents need written? *\/$/;"	m	struct:jvirt_barray_control	file:
dirty	./src/suspend.c	/^  boolean dirty;		\/* do current buffer contents need written? *\/$/;"	m	struct:jvirt_sarray_control	file:
disc_table	./src/wbfs.h	/^  uint8_t  disc_table[0];    	\/\/ size depends on hd sector size$/;"	m	struct:wbfs_head
disk	./src/common.h	/^  disk_t *disk;$/;"	m	struct:list_disk_struct
disk	./src/msdos.h	/^  unsigned int disk;$/;"	m	struct:info_disk_struct
disk	./src/photorec.h	/^  disk_t *disk;$/;"	m	struct:ph_param
disk_areas_xl	./src/lvm.h	/^  struct lvm2_disk_locn disk_areas_xl[0];      \/* Two lists *\/$/;"	m	struct:lvm2_pv_header	typeref:struct:lvm2_pv_header::lvm2_disk_locn
disk_car	./src/common.h	/^  disk_t *disk_car;$/;"	m	struct:my_data_struct
disk_car	./src/hdcache.c	/^  disk_t *disk_car;$/;"	m	struct:cache_struct	file:
disk_car	./src/io_redir.c	/^  disk_t *disk_car;$/;"	m	struct:info_io_redir	file:
disk_clean	./src/msdos.c	/^static void disk_clean(disk_t *disk_car)$/;"	f	file:
disk_description	./src/msdos.c	/^const char *disk_description(disk_t *disk_car)$/;"	f
disk_description_short	./src/msdos.c	/^static const char *disk_description_short(disk_t *disk_car)$/;"	f	file:
disk_fatx	./src/fatx.h	/^struct disk_fatx$/;"	s
disk_get_geometry	./src/hdaccess.c	/^static void disk_get_geometry(CHSgeometry_t *geom, const int hd_h, const char *device, const int verbose)$/;"	f	file:
disk_get_geometry_win32	./src/win32.c	/^void disk_get_geometry_win32(CHSgeometry_t *geom, HANDLE handle, const char *device, const int verbose)$/;"	f
disk_get_hpa_dco	./src/hpa_dco.c	/^void disk_get_hpa_dco(const int fd, disk_t *disk)$/;"	f
disk_get_model	./src/hdaccess.c	/^static void disk_get_model(const int hd_h, disk_t *dev, const unsigned int verbose)$/;"	f	file:
disk_get_sector_size	./src/hdaccess.c	/^static unsigned int disk_get_sector_size(const int hd_h, const char *device, const int verbose)$/;"	f	file:
disk_get_sector_size_win32	./src/win32.c	/^unsigned int disk_get_sector_size_win32(HANDLE handle, const char *device, const int verbose)$/;"	f
disk_get_size	./src/hdaccess.c	/^static uint64_t disk_get_size(const int hd_h, const char *device, const int verbose, const unsigned int sector_size)$/;"	f	file:
disk_get_size_win32	./src/win32.c	/^uint64_t disk_get_size_win32(HANDLE handle, const char *device, const int verbose)$/;"	f
disk_image	./src/dimage.c	/^int disk_image(disk_t *disk, const partition_t *partition, const char *image_dd)$/;"	f
disk_image_backward	./src/dimage.c	/^static void disk_image_backward(int disk_dst, disk_t *disk, const uint64_t src_offset_start, const uint64_t src_offset_end, uint64_t dst_offset)$/;"	f	file:
disk_netware	./src/netware.h	/^struct disk_netware$/;"	s
disk_nopwrite	./src/msdos.c	/^static int disk_nopwrite(disk_t *disk_car, const void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
disk_pe_t	./src/lvm.h	/^} disk_pe_t;$/;"	t	typeref:struct:__anon11
disk_plugin_id	./src/rfs.h	/^  uint16_t disk_plugin_id;     \/* id of disk layout plugin *\/$/;"	m	struct:reiser4_master_sb
disk_pread	./src/msdos.c	/^static int disk_pread(disk_t *disk_car, void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
disk_pread_aux	./src/msdos.c	/^static int disk_pread_aux(disk_t *disk_car, void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
disk_pwrite	./src/msdos.c	/^static int disk_pwrite(disk_t *disk_car, const void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
disk_pwrite_aux	./src/msdos.c	/^static int disk_pwrite_aux(disk_t *disk_car, const void *buf, const unsigned int count, const uint64_t hd_offset)$/;"	f	file:
disk_real_size	./src/common.h	/^  uint64_t disk_real_size;$/;"	m	struct:param_disk_struct
disk_reset_error	./src/msdos.c	/^static void disk_reset_error(disk_t *disk_car)$/;"	f	file:
disk_sectors	./src/file_vmdk.c	/^  uint32_t disk_sectors;$/;"	m	struct:__anon38	file:
disk_size	./src/common.h	/^  uint64_t disk_size;$/;"	m	struct:param_disk_struct
disk_size	./src/file_vdi.c	/^    uint64_t disk_size;$/;"	m	struct:__anon57	file:
disk_start_number	./src/file_zip.c	/^  uint32_t disk_start_number;	\/* Number of the disk on which this file starts  *\/$/;"	m	struct:zip64_extra_entry	file:
disk_super_block	./src/bfs.h	/^struct disk_super_block          \/* super block as it is on disk *\/$/;"	s
disk_sync	./src/msdos.c	/^static int disk_sync(disk_t *disk_car)$/;"	f	file:
disk_t	./src/common.h	/^typedef struct param_disk_struct disk_t;$/;"	t	typeref:struct:param_disk_struct
disklabel	./src/bsd.h	/^struct disklabel {$/;"	s
diskmap	./src/rfs.h	/^  uint64_t diskmap;            \/* location of the diskmap. 0 if not present *\/$/;"	m	struct:reiser4_master_sb
disks	./src/md.h	/^	mdp_disk_t disks[MD_SB_DISKS];$/;"	m	struct:mdp_superblock_s
display	./src/dir.h	/^  void *display;$/;"	m	struct:dir_data
display_disk_list	./src/testdisk.c	/^static int display_disk_list(list_disk_t *list_disk, const int testdisk_mode, $/;"	f	file:
display_help	./src/fidentify.c	/^static void display_help(void)$/;"	f	file:
display_help	./src/phmain.c	/^static void display_help(void)$/;"	f	file:
display_help	./src/testdisk.c	/^static void display_help(void)$/;"	f	file:
display_message	./src/intrfn.c	/^void display_message(const char*msg)$/;"	f
display_version	./src/fidentify.c	/^static void display_version(void)$/;"	f	file:
display_version	./src/phmain.c	/^static void display_version(void)$/;"	f	file:
display_version	./src/testdisk.c	/^static void display_version(void)$/;"	f	file:
ditto_key	./src/file_dpx.c	/^  uint32_t   	ditto_key;        \/* read time short cut - 0 = same, 1 = new *\/$/;"	m	struct:header_dpx	file:
djv_header	./src/file_djv.c	/^struct djv_header$/;"	s	file:
dlabel	./src/file_spe.c	/^  char          dlabel[16];        \/*  726  Data label.						 *\/$/;"	m	struct:header_spe	file:
do_curses_photorec	./src/pdiskseln.c	/^int do_curses_photorec(struct ph_param *params, struct ph_options *options, const list_disk_t *list_disk)$/;"	f
do_curses_testdisk	./src/tdisksel.c	/^int do_curses_testdisk(int verbose,int dump_ind, const list_disk_t *list_disk, const int saveheader, const char *cmd_device, char **current_cmd)$/;"	f
doc_header	./src/file_doc.c	/^static const unsigned char doc_header[]= { 0xd0, 0xcf, 0x11, 0xe0, 0xa1, 0xb1, 0x1a, 0xe1};$/;"	v	file:
documentEncryption	./src/file_wpd.c	/^  uint16_t	documentEncryption;$/;"	m	struct:wpd_hdr	file:
documentOffset	./src/file_wpd.c	/^  uint32_t	documentOffset;$/;"	m	struct:wpd_hdr	file:
documentSize	./src/file_wpd.c	/^  uint32_t	documentSize;		\/* 20: WP 6.1 or later ? *\/$/;"	m	struct:wpd_hdr	file:
dos_image_file_hdr	./src/pe.h	/^struct dos_image_file_hdr$/;"	s
dpme	./src/partmac.h	/^struct dpme {$/;"	s
dpme_boot_args	./src/partmac.h	/^    uint32_t     dpme_boot_args[32]      ;$/;"	m	struct:dpme
dpme_boot_block	./src/partmac.h	/^    uint32_t     dpme_boot_block         ;$/;"	m	struct:dpme
dpme_boot_bytes	./src/partmac.h	/^    uint32_t     dpme_boot_bytes         ;$/;"	m	struct:dpme
dpme_checksum	./src/partmac.h	/^    uint32_t     dpme_checksum           ;$/;"	m	struct:dpme
dpme_flags	./src/partmac.h	/^    uint32_t     dpme_flags;$/;"	m	struct:dpme
dpme_goto_addr	./src/partmac.h	/^    uint8_t     *dpme_goto_addr          ;$/;"	m	struct:dpme
dpme_goto_addr_2	./src/partmac.h	/^    uint8_t     *dpme_goto_addr_2        ;$/;"	m	struct:dpme
dpme_lblock_start	./src/partmac.h	/^    uint32_t     dpme_lblock_start       ;$/;"	m	struct:dpme
dpme_lblocks	./src/partmac.h	/^    uint32_t     dpme_lblocks            ;$/;"	m	struct:dpme
dpme_load_addr	./src/partmac.h	/^    uint8_t     *dpme_load_addr          ;$/;"	m	struct:dpme
dpme_load_addr_2	./src/partmac.h	/^    uint8_t     *dpme_load_addr_2        ;$/;"	m	struct:dpme
dpme_map_entries	./src/partmac.h	/^    uint32_t     dpme_map_entries        ;$/;"	m	struct:dpme
dpme_name	./src/partmac.h	/^    char    	dpme_name[DPISTRLEN]    ;  \/* name of partition *\/$/;"	m	struct:dpme
dpme_pblock_start	./src/partmac.h	/^    uint32_t     dpme_pblock_start       ;$/;"	m	struct:dpme
dpme_pblocks	./src/partmac.h	/^    uint32_t     dpme_pblocks            ;$/;"	m	struct:dpme
dpme_process_id	./src/partmac.h	/^    char    	dpme_process_id[16]     ;$/;"	m	struct:dpme
dpme_reserved_1	./src/partmac.h	/^    uint16_t     dpme_reserved_1         ;$/;"	m	struct:dpme
dpme_reserved_3	./src/partmac.h	/^    uint32_t     dpme_reserved_3[62]     ;$/;"	m	struct:dpme
dpme_signature	./src/partmac.h	/^    uint16_t     dpme_signature          ;$/;"	m	struct:dpme
dpme_type	./src/partmac.h	/^    char    	dpme_type[DPISTRLEN]    ;  \/* type of partition *\/$/;"	m	struct:dpme
drAlBlSt	./src/hfs.h	/^  uint16_t drAlBlSt;                   \/* 0x1C location (in 512-byte blocks)$/;"	m	struct:hfs_mdb
drAlBlkSiz	./src/hfs.h	/^  uint32_t drAlBlkSiz;                 \/* 0x14 bytes in an allocation block *\/$/;"	m	struct:hfs_mdb
drAllocPtr	./src/hfs.h	/^  uint16_t drAllocPtr;                 \/* 0x10 location (in allocation blocks)$/;"	m	struct:hfs_mdb
drAtrb	./src/hfs.h	/^  uint16_t drAtrb;                     \/* 0x0A fs attributes *\/$/;"	m	struct:hfs_mdb
drCTClpSiz	./src/hfs.h	/^  uint32_t drCTClpSiz;                 \/* 0x4e clumpsize for the catalog B-tree *\/$/;"	m	struct:hfs_mdb
drCTExtRec	./src/hfs.h	/^  hfs_extent_rec drCTExtRec;           \/* 0x96 catalog B-tree's first 3 extents *\/$/;"	m	struct:hfs_mdb
drCTFlSize	./src/hfs.h	/^  uint32_t drCTFlSize;                 \/* 0x92 bytes in the catalog B-tree *\/$/;"	m	struct:hfs_mdb
drClpSiz	./src/hfs.h	/^  uint32_t drClpSiz;                   \/* 0x18 clumpsize, the number of bytes to$/;"	m	struct:hfs_mdb
drCrDate	./src/hfs.h	/^  uint32_t drCrDate;                   \/* 0x02 fs creation date\/time *\/$/;"	m	struct:hfs_mdb
drDirCnt	./src/hfs.h	/^  uint32_t drDirCnt;                   \/* 0x58 number of directories in the fs *\/$/;"	m	struct:hfs_mdb
drEmbedExtent	./src/hfs.h	/^  uint32_t drEmbedExtent;              \/* 0x7e starting block number (xdrStABN)$/;"	m	struct:hfs_mdb
drEmbedSigWord	./src/hfs.h	/^  uint16_t drEmbedSigWord;             \/* 0x7c embedded volume signature *\/$/;"	m	struct:hfs_mdb
drFilCnt	./src/hfs.h	/^  uint32_t drFilCnt;                   \/* 0x54 number of files in the fs *\/$/;"	m	struct:hfs_mdb
drFndrInfo	./src/hfs.h	/^  uint8_t  drFndrInfo[32];             \/* 0x5c data used by the Finder *\/$/;"	m	struct:hfs_mdb
drFreeBks	./src/hfs.h	/^  uint16_t drFreeBks;                  \/* 0x22 number of free allocation blocks *\/$/;"	m	struct:hfs_mdb
drLsMod	./src/hfs.h	/^  uint32_t drLsMod;                    \/* 0x06 fs modification date\/time *\/$/;"	m	struct:hfs_mdb
drNmAlBlks	./src/hfs.h	/^  uint16_t drNmAlBlks;                 \/* 0x12 number of allocation blocks *\/$/;"	m	struct:hfs_mdb
drNmFls	./src/hfs.h	/^  uint16_t drNmFls;                    \/* 0x0C number of files in root directory *\/$/;"	m	struct:hfs_mdb
drNmRtDirs	./src/hfs.h	/^  uint16_t drNmRtDirs;                 \/* 0x52 number of directories in$/;"	m	struct:hfs_mdb
drNxtCNID	./src/hfs.h	/^  uint32_t drNxtCNID;                  \/* 0x1E CNID to assign to the next$/;"	m	struct:hfs_mdb
drSigWord	./src/hfs.h	/^  uint16_t drSigWord;                  \/* 0x00 Signature word indicating fs type *\/$/;"	m	struct:hfs_mdb
drVBMSt	./src/hfs.h	/^  uint16_t drVBMSt;                    \/* 0x0E location (in 512-byte blocks)$/;"	m	struct:hfs_mdb
drVN	./src/hfs.h	/^  uint8_t  drVN[28];                   \/* 0x24 the volume label *\/$/;"	m	struct:hfs_mdb
drVSeqNum	./src/hfs.h	/^  uint16_t drVSeqNum;                  \/* 0x44 backup sequence number *\/$/;"	m	struct:hfs_mdb
drVolBkUp	./src/hfs.h	/^  uint32_t drVolBkUp;                  \/* 0x40 fs backup date\/time *\/$/;"	m	struct:hfs_mdb
drWrCnt	./src/hfs.h	/^  uint32_t drWrCnt;                    \/* 0x46 fs write count *\/$/;"	m	struct:hfs_mdb
drXTClpSiz	./src/hfs.h	/^  uint32_t drXTClpSiz;                 \/* 0x4a clumpsize for the extents B-tree *\/$/;"	m	struct:hfs_mdb
drXTExtRec	./src/hfs.h	/^  hfs_extent_rec drXTExtRec;           \/* 0x86 extents B-tree's first 3 extents *\/$/;"	m	struct:hfs_mdb
drXTFlSize	./src/hfs.h	/^  uint32_t drXTFlSize;                 \/* 0x82 bytes in the extents B-tree *\/$/;"	m	struct:hfs_mdb
drive_select	./src/exfat.h	/^	unsigned char   drive_select;           \/* Used by INT 13 *\/$/;"	m	struct:exfat_super_block
dsc_header	./src/file_dsc.c	/^static const unsigned char dsc_header[3]= { 'M','L','T'};$/;"	v	file:
dta_header_71le	./src/file_dta.c	/^static const unsigned char dta_header_71le[3]= {0x71, 0x02, 0x01};$/;"	v	file:
dta_header_72le	./src/file_dta.c	/^static const unsigned char dta_header_72le[3]= {0x72, 0x02, 0x01};$/;"	v	file:
dump	./src/intrfn.c	/^void dump(WINDOW *window, const void *nom_dump,unsigned int lng)$/;"	f
dump2	./src/intrfn.c	/^void dump2(WINDOW *window, const void *dump_1, const void *dump_2, const unsigned int lng)$/;"	f
dump2_log	./src/log.c	/^void dump2_log(const void *dump_1, const void *dump_2, const unsigned int lng)$/;"	f
dump_2fat_info_ncurses	./src/fatn.c	/^int dump_2fat_info_ncurses(const struct fat_boot_sector*fh1, const struct fat_boot_sector*fh2, const upart_type_t upart_type, const unsigned int sector_size)$/;"	f
dump_NTFS	./src/tntfs.c	/^static void dump_NTFS(disk_t *disk_car, const partition_t *partition, const unsigned char *buffer_bs, const unsigned char *buffer_backup_bs)$/;"	f	file:
dump_NTFS_ncurses	./src/tntfs.c	/^static void dump_NTFS_ncurses(disk_t *disk_car, const partition_t *partition, const unsigned char *buffer_bs, const unsigned char *buffer_backup_bs)$/;"	f	file:
dump_bytes	./src/hpa_dco.c	/^static void dump_bytes(const char *prefix, const unsigned char *p, const unsigned int len)$/;"	f	file:
dump_editor	./src/edit.c	/^static int dump_editor(const unsigned char *nom_dump,const unsigned int lng, const int menu_pos)$/;"	f	file:
dump_fat1x	./src/fat1x.c	/^static void dump_fat1x(disk_t *disk_car, partition_t *partition, const unsigned char *buffer_bs, char **current_cmd)$/;"	f	file:
dump_fat1x_ncurses	./src/fat1x.c	/^static void dump_fat1x_ncurses(disk_t *disk_car, partition_t *partition, const unsigned char *buffer_bs)$/;"	f	file:
dump_fat32	./src/fat32.c	/^static void dump_fat32(disk_t *disk_car, const partition_t *partition, const unsigned char *buffer_bs, const unsigned char *buffer_backup_bs, char **current_cmd)$/;"	f	file:
dump_fat32_ncurses	./src/fat32.c	/^static void dump_fat32_ncurses(disk_t *disk_car, const partition_t *partition, const unsigned char *buffer_bs, const unsigned char *buffer_backup_bs)$/;"	f	file:
dump_fat_info_ncurses	./src/fatn.c	/^int dump_fat_info_ncurses(const struct fat_boot_sector*fh1, const upart_type_t upart_type, const unsigned int sector_size)$/;"	f
dump_log	./src/log.c	/^void dump_log(const void *nom_dump,unsigned int lng)$/;"	f
dump_ncurses	./src/intrfn.c	/^void dump_ncurses(const void *nom_dump, unsigned int lng)$/;"	f
dump_struct	./src/file_dump.c	/^struct	dump_struct$/;"	s	file:
dup_geometry	./src/hdcache.c	/^static void dup_geometry(CHSgeometry_t * CHS_dst, const CHSgeometry_t * CHS_source)$/;"	f	file:
dup_partition_t	./src/fnctdsk.c	/^void dup_partition_t(partition_t *dst, const partition_t *src)$/;"	f
dwBootIndex	./src/file_wim.c	/^  uint32_t		dwBootIndex;$/;"	m	struct:_WIMHEADER_V1_PACKED	file:
dwCompressionSize	./src/file_wim.c	/^  uint32_t		dwCompressionSize;$/;"	m	struct:_WIMHEADER_V1_PACKED	file:
dwFlags	./src/file_wim.c	/^  uint32_t		dwFlags;$/;"	m	struct:_WIMHEADER_V1_PACKED	file:
dwFourCC	./src/file_riff.c	/^  uint32_t dwFourCC;$/;"	m	struct:__anon3	file:
dwFourCC	./src/file_riff.c	/^  uint32_t dwFourCC;$/;"	m	struct:__anon4	file:
dwImageCount	./src/file_wim.c	/^  uint32_t		dwImageCount;$/;"	m	struct:_WIMHEADER_V1_PACKED	file:
dwList	./src/file_riff.c	/^  uint32_t dwList;$/;"	m	struct:__anon4	file:
dwSize	./src/file_riff.c	/^  uint32_t dwSize;$/;"	m	struct:__anon3	file:
dwSize	./src/file_riff.c	/^  uint32_t dwSize;$/;"	m	struct:__anon4	file:
dwVersion	./src/file_wim.c	/^  uint32_t		dwVersion;$/;"	m	struct:_WIMHEADER_V1_PACKED	file:
e_cyl	./src/parti386.c	85;"	d	file:
e_ehsize	./src/file_elf.c	/^        Elf32_Half      e_ehsize;$/;"	m	struct:__anon44	file:
e_ehsize	./src/file_elf.c	/^        Elf64_Half      e_ehsize;$/;"	m	struct:__anon45	file:
e_entry	./src/file_elf.c	/^        Elf32_Addr      e_entry;$/;"	m	struct:__anon44	file:
e_entry	./src/file_elf.c	/^        Elf64_Addr      e_entry;$/;"	m	struct:__anon45	file:
e_flags	./src/file_elf.c	/^        Elf32_Word      e_flags;$/;"	m	struct:__anon44	file:
e_flags	./src/file_elf.c	/^        Elf64_Word      e_flags;$/;"	m	struct:__anon45	file:
e_ident	./src/file_elf.c	/^        unsigned char   e_ident[EI_NIDENT];$/;"	m	struct:__anon44	file:
e_ident	./src/file_elf.c	/^        unsigned char   e_ident[EI_NIDENT];$/;"	m	struct:__anon45	file:
e_lfanew	./src/pe.h	/^    uint32_t e_lfanew;        \/\/ File address of new exe header$/;"	m	struct:dos_image_file_hdr
e_machine	./src/file_elf.c	/^        Elf32_Half      e_machine;$/;"	m	struct:__anon44	file:
e_machine	./src/file_elf.c	/^        Elf64_Half      e_machine;$/;"	m	struct:__anon45	file:
e_oemid	./src/pe.h	/^    uint16_t e_oemid;         \/\/ OEM identifier (for e_oeminfo)$/;"	m	struct:dos_image_file_hdr
e_oeminfo	./src/pe.h	/^    uint16_t e_oeminfo;       \/\/ OEM information; e_oemid specific$/;"	m	struct:dos_image_file_hdr
e_phentsize	./src/file_elf.c	/^        Elf32_Half      e_phentsize;$/;"	m	struct:__anon44	file:
e_phentsize	./src/file_elf.c	/^        Elf64_Half      e_phentsize;$/;"	m	struct:__anon45	file:
e_phnum	./src/file_elf.c	/^        Elf32_Half      e_phnum;$/;"	m	struct:__anon44	file:
e_phnum	./src/file_elf.c	/^        Elf64_Half      e_phnum;$/;"	m	struct:__anon45	file:
e_phoff	./src/file_elf.c	/^        Elf32_Off       e_phoff;$/;"	m	struct:__anon44	file:
e_phoff	./src/file_elf.c	/^        Elf64_Off       e_phoff;$/;"	m	struct:__anon45	file:
e_res	./src/pe.h	/^    uint16_t e_res[4];        \/\/ Reserved words$/;"	m	struct:dos_image_file_hdr
e_res2	./src/pe.h	/^    uint16_t e_res2[10];      \/\/ Reserved words$/;"	m	struct:dos_image_file_hdr
e_sect	./src/parti386.c	86;"	d	file:
e_shentsize	./src/file_elf.c	/^        Elf32_Half      e_shentsize;$/;"	m	struct:__anon44	file:
e_shentsize	./src/file_elf.c	/^        Elf64_Half      e_shentsize;$/;"	m	struct:__anon45	file:
e_shnum	./src/file_elf.c	/^        Elf32_Half      e_shnum;$/;"	m	struct:__anon44	file:
e_shnum	./src/file_elf.c	/^        Elf64_Half      e_shnum;$/;"	m	struct:__anon45	file:
e_shoff	./src/file_elf.c	/^        Elf32_Off       e_shoff;$/;"	m	struct:__anon44	file:
e_shoff	./src/file_elf.c	/^        Elf64_Off       e_shoff;$/;"	m	struct:__anon45	file:
e_shtrndx	./src/file_elf.c	/^        Elf32_Half      e_shtrndx;$/;"	m	struct:__anon44	file:
e_shtrndx	./src/file_elf.c	/^        Elf64_Half      e_shtrndx;$/;"	m	struct:__anon45	file:
e_type	./src/file_elf.c	/^        Elf32_Half      e_type;$/;"	m	struct:__anon44	file:
e_type	./src/file_elf.c	/^        Elf64_Half      e_type;$/;"	m	struct:__anon45	file:
e_version	./src/file_elf.c	/^        Elf32_Word      e_version;$/;"	m	struct:__anon44	file:
e_version	./src/file_elf.c	/^        Elf64_Word      e_version;$/;"	m	struct:__anon45	file:
ecrypfs_header	./src/file_ecryptfs.c	/^struct ecrypfs_header {$/;"	s	file:
ecryptfs_header	./src/file_ecryptfs.c	/^static const unsigned char ecryptfs_header[2]= {0, 0};$/;"	v	file:
edition	./src/cramfs.h	/^	uint32_t edition;$/;"	m	struct:cramfs_info
effective_date	./src/iso9660.h	/^	char effective_date[17];$/;"	m	struct:iso_primary_descriptor
efi_generate_uuid	./src/partgptw.c	/^static void efi_generate_uuid(efi_guid_t *ent_uuid)$/;"	f	file:
efi_guid_s	./src/common.h	/^struct efi_guid_s$/;"	s
efi_guid_t	./src/common.h	/^typedef struct efi_guid_s efi_guid_t;$/;"	t	typeref:struct:efi_guid_s
ehour	./src/file_spe.c	/^  int16_t           ehour;             \/*   30  Experiment Time: Hours (as binary) *\/$/;"	m	struct:header_spe	file:
element_new	./src/fnctdsk.c	/^static list_part_t *element_new(partition_t *part)$/;"	f	file:
emf_header	./src/file_emf.c	/^static const unsigned char emf_header[4]= { 0x01, 0x00, 0x00, 0x00};$/;"	v	file:
emf_sign	./src/file_emf.c	/^static const unsigned char emf_sign[4]= { ' ','E', 'M','F'};$/;"	v	file:
eminute	./src/file_spe.c	/^  int16_t           eminute;           \/*   32  Experiment Time: Minutes(as binary)*\/$/;"	m	struct:header_spe	file:
empty	./src/file_spe.c	/^  char          empty[686];        \/*  742  EMPTY BLOCK FOR EXPANSION          *\/$/;"	m	struct:header_spe	file:
empty3	./src/file_spe.c	/^  char          empty3[80];        \/* 4018  empty block to reach 4100 bytes    *\/$/;"	m	struct:header_spe	file:
emr	./src/file_emf.c	/^  U_EMR emr;$/;"	m	struct:EMF_HDR	file:
enable	./src/filegen.h	/^  unsigned int enable;$/;"	m	struct:file_enable_struct
enable_by_default	./src/filegen.h	/^  const unsigned int enable_by_default;$/;"	m	struct:file_hint_struct
encoding	./src/file_au.c	/^  uint32_t encoding;$/;"	m	struct:header_au_s	file:
encodings_bmp	./src/hfsp.h	/^        uint64_t        encodings_bmp;$/;"	m	struct:hfsp_vh
encrypted	./src/ntfs_udl.c	/^	int		 encrypted;	\/* Stream is encrypted *\/$/;"	m	struct:data	file:
encrypted_central_dir	./src/file_zip.c	/^  uint16_t encrypted_central_dir:1; \/** Selected data values in the Local Header are masked *\/$/;"	m	struct:zip_file_entry	file:
end	./src/filegen.h	/^  uint64_t end;$/;"	m	struct:__anon66
end	./src/list.h	/^  uint64_t end;$/;"	m	struct:alloc_list_s
end_cyl	./src/parti386.c	/^    unsigned char end_cyl;          \/* end cylinder *\/$/;"	m	struct:partition_dos	file:
end_head	./src/parti386.c	/^    unsigned char end_head;         \/* end head *\/$/;"	m	struct:partition_dos	file:
end_ncurses	./src/intrfn.c	/^int end_ncurses(void)$/;"	f
end_sector	./src/parti386.c	/^    unsigned char end_sector;       \/* end sector *\/$/;"	m	struct:partition_dos	file:
endian	./src/file_ari.c	/^  uint32_t endian;$/;"	m	struct:arri_header	file:
endian_tag	./src/file_dex.c	/^  uint32_t	endian_tag;$/;"	m	struct:dex_header	file:
endx	./src/file_spe.c	/^    uint16_t endx;              \/* right x value.                           *\/$/;"	m	struct:header_spe::ROIinfo	file:
endy	./src/file_spe.c	/^    uint16_t endy;              \/* bottom y value.                          *\/$/;"	m	struct:header_spe::ROIinfo	file:
enhanced_deflate	./src/file_zip.c	/^  uint16_t enhanced_deflate:1;      \/** Reserved for use with method 8 *\/$/;"	m	struct:zip_file_entry	file:
ent_attr	./src/partgpt.h	/^  uint64_t	ent_attr;$/;"	m	struct:gpt_ent
ent_lba_end	./src/partgpt.h	/^  uint64_t	ent_lba_end;$/;"	m	struct:gpt_ent
ent_lba_start	./src/partgpt.h	/^  uint64_t	ent_lba_start;$/;"	m	struct:gpt_ent
ent_name	./src/partgpt.h	/^  uint8_t	ent_name[72];		\/* UNICODE-16 *\/$/;"	m	struct:gpt_ent
ent_type	./src/partgpt.h	/^  efi_guid_t ent_type;$/;"	m	struct:gpt_ent
ent_uuid	./src/partgpt.h	/^  efi_guid_t ent_uuid;$/;"	m	struct:gpt_ent
entries_count	./src/file_nk2.c	/^  uint32_t entries_count;$/;"	m	struct:__anon6	file:
entries_offset	./src/ntfs.h	/^\/*  0*\/ uint32_t entries_offset;\/* Byte offset from the INDEX_HEADER to first$/;"	m	struct:__anon22
entryHeader	./src/file_nk2.c	/^} entryHeader;$/;"	t	typeref:struct:__anon7	file:
entrySelector	./src/file_ttf.c	/^  uint16_t	entrySelector;$/;"	m	struct:ttf_offset_table	file:
entry_type	./src/file_nk2.c	/^  uint16_t entry_type;$/;"	m	struct:__anon7	file:
erase_list_part	./src/common.h	/^  int (*erase_list_part)(disk_t *disk);$/;"	m	struct:arch_fnct_struct
erase_list_part_i386	./src/parti386.c	/^static int erase_list_part_i386(disk_t *disk)$/;"	f	file:
errcode	./src/common.h	/^  errcode_type_t errcode;$/;"	m	struct:partition_struct
errcode_type	./src/common.h	/^enum errcode_type {BAD_NOERR, BAD_SS, BAD_ES, BAD_SH, BAD_EH, BAD_EBS, BAD_RS, BAD_SC, BAD_EC, BAD_SCOUNT};$/;"	g
errcode_type_t	./src/common.h	/^typedef enum errcode_type errcode_type_t;$/;"	t	typeref:enum:errcode_type
errmsg_i386_entry2partition	./src/parti386.c	/^static const char* errmsg_i386_entry2partition(const errcode_type_t errcode)$/;"	f	file:
events	./src/md.h	/^	uint64_t	events;		\/* incremented when superblock updated *\/$/;"	m	struct:mdp_superblock_1
events_hi	./src/md.h	/^	uint32_t events_hi;	\/*  7 high-order of superblock update count   *\/$/;"	m	struct:mdp_superblock_s
events_hi	./src/md.h	/^	uint32_t events_hi;	\/*  8 high-order of superblock update count   *\/$/;"	m	struct:mdp_superblock_s
events_lo	./src/md.h	/^	uint32_t events_lo;	\/*  7 low-order of superblock update count    *\/$/;"	m	struct:mdp_superblock_s
events_lo	./src/md.h	/^	uint32_t events_lo;	\/*  8 low-order of superblock update count    *\/$/;"	m	struct:mdp_superblock_s
evt_chunk	./src/file_evt.c	/^struct evt_chunk {$/;"	s	file:
ewf_file_header	./src/file_e01.c	/^struct ewf_file_header$/;"	s	file:
exFAT_FOLLOW_CLUSTER	./src/exfat_dir.c	/^typedef enum {exFAT_FOLLOW_CLUSTER, exFAT_NEXT_FREE_CLUSTER, exFAT_NEXT_CLUSTER} exfat_method_t;$/;"	e	enum:__anon9	file:
exFAT_NEXT_CLUSTER	./src/exfat_dir.c	/^typedef enum {exFAT_FOLLOW_CLUSTER, exFAT_NEXT_FREE_CLUSTER, exFAT_NEXT_CLUSTER} exfat_method_t;$/;"	e	enum:__anon9	file:
exFAT_NEXT_FREE_CLUSTER	./src/exfat_dir.c	/^typedef enum {exFAT_FOLLOW_CLUSTER, exFAT_NEXT_FREE_CLUSTER, exFAT_NEXT_CLUSTER} exfat_method_t;$/;"	e	enum:__anon9	file:
exFAT_boot_sector	./src/texfat.c	/^int exFAT_boot_sector(disk_t *disk, partition_t *partition, const int verbose, char **current_cmd)$/;"	f
exFAT_dump	./src/texfat.c	/^static void exFAT_dump(disk_t *disk, const partition_t *partition, const unsigned char *buffer_bs, const unsigned char *buffer_backup_bs, char **current_cmd)$/;"	f	file:
exFAT_dump_ncurses	./src/texfat.c	/^static void exFAT_dump_ncurses(disk_t *disk, const partition_t *partition, const unsigned char *buffer_bs, const unsigned char *buffer_backup_bs)$/;"	f	file:
exe_header	./src/file_exe.c	/^static const unsigned char exe_header[2]  = {'M','Z'};$/;"	v	file:
exe_reloc	./src/pe.h	/^struct exe_reloc{$/;"	s
exfat_alloc_bitmap_entry	./src/exfat.h	/^struct exfat_alloc_bitmap_entry$/;"	s
exfat_cluster_to_offset	./src/exfat.c	/^uint64_t exfat_cluster_to_offset(const struct exfat_super_block *exfat_header, const unsigned int cluster)$/;"	f
exfat_copy	./src/exfat_dir.c	/^static int exfat_copy(disk_t *disk, const partition_t *partition, dir_data_t *dir_data, const file_info_t *file)$/;"	f	file:
exfat_dir	./src/exfat_dir.c	/^static int exfat_dir(disk_t *disk, const partition_t *partition, dir_data_t *dir_data, const unsigned long int first_cluster, file_info_t *dir_list)$/;"	f	file:
exfat_dir_struct	./src/exfat_dir.c	/^struct exfat_dir_struct$/;"	s	file:
exfat_file_entry	./src/exfat.h	/^struct exfat_file_entry$/;"	s
exfat_get_bitmap	./src/exfatp.c	/^static struct exfat_alloc_bitmap_entry *exfat_get_bitmap(unsigned char*buffer, const unsigned int size)$/;"	f	file:
exfat_get_next_cluster	./src/exfat_dir.c	/^static unsigned int exfat_get_next_cluster(disk_t *disk_car,const partition_t *partition, const int offset, const unsigned int cluster)$/;"	f	file:
exfat_method_t	./src/exfat_dir.c	/^typedef enum {exFAT_FOLLOW_CLUSTER, exFAT_NEXT_FREE_CLUSTER, exFAT_NEXT_CLUSTER} exfat_method_t;$/;"	t	typeref:enum:__anon9	file:
exfat_read_cluster	./src/exfat.c	/^int exfat_read_cluster(disk_t *disk, const partition_t *partition, const struct exfat_super_block*exfat_header, void *buffer, const unsigned int cluster)$/;"	f
exfat_remove_used_space	./src/exfatp.c	/^unsigned int exfat_remove_used_space(disk_t *disk, const partition_t *partition, alloc_data_t *list_search_space)$/;"	f
exfat_stream_ext_entry	./src/exfat.h	/^struct exfat_stream_ext_entry$/;"	s
exfat_super_block	./src/exfat.h	/^struct exfat_super_block {$/;"	s
exfat_ucstoutf8	./src/exfat_dir.c	/^static int exfat_ucstoutf8(iconv_t cd, const unsigned char *ins, const unsigned int ins_len, char **outs, const unsigned int outs_len)$/;"	f	file:
exp_sec	./src/file_spe.c	/^  float         exp_sec;           \/*   10  alternative exposure, in secs.     *\/$/;"	m	struct:header_spe	file:
expected_compressed_size	./src/file_zip.c	/^static uint32_t expected_compressed_size=0;$/;"	v	file:
expert	./src/photorec.h	/^  unsigned int expert;$/;"	m	struct:ph_options
expiration_date	./src/iso9660.h	/^	char expiration_date[17];$/;"	m	struct:iso_primary_descriptor
exposure	./src/file_spe.c	/^  int16_t         exposure;          \/*    4  exposure time (in milliseconds)    *\/$/;"	m	struct:header_spe	file:
exprem	./src/file_spe.c	/^  char          exprem[5][80];     \/*  200  experiment remarks                 *\/$/;"	m	struct:header_spe	file:
ext	./src/fat.h	/^	int8_t	name[8],ext[3];		\/* 00 name and extension *\/$/;"	m	struct:msdos_dir_entry
ext2_copy	./src/ext2_dir.c	/^static int ext2_copy(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const file_info_t *file)$/;"	f	file:
ext2_dir	./src/ext2_dir.c	/^static int ext2_dir(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const unsigned long int cluster, file_info_t *dir_list)$/;"	f	file:
ext2_dir_struct	./src/ext2_inc.h	/^struct ext2_dir_struct {$/;"	s
ext2_fix_group	./src/ext2grp.c	/^unsigned int ext2_fix_group(alloc_data_t *list_search_space, disk_t *disk, partition_t *partition)$/;"	f
ext2_fix_inode	./src/ext2grp.c	/^unsigned int ext2_fix_inode(alloc_data_t *list_search_space, disk_t *disk, partition_t *partition)$/;"	f
ext2_fs_header	./src/file_ext2.c	/^static const unsigned char ext2_fs_header[2]= {0x53, 0xEF};$/;"	v	file:
ext2_remove_used_space	./src/ext2p.c	/^unsigned int ext2_remove_used_space(disk_t *disk, const partition_t *partition, alloc_data_t *list_search_space)$/;"	f
ext2_super_block	./src/ext2.h	/^struct ext2_super_block {$/;"	s
ext_file	./src/hfsp.h	/^        hfsp_fork_raw   ext_file;$/;"	m	struct:hfsp_vh
extension	./src/file_sig.c	/^  const char *extension;$/;"	m	struct:signature_s	file:
extension	./src/file_txt.c	/^  const char *extension;$/;"	m	struct:__anon46	file:
extension	./src/filegen.h	/^  const char *extension;$/;"	m	struct:file_hint_struct
extension	./src/filegen.h	/^  const char *extension;$/;"	m	struct:file_recovery_struct
extents	./src/hfsp.h	/^        hfsp_extent_rec extents;     \/\/ initial (8) extents$/;"	m	struct:__anon54
extra	./src/filegen.h	/^  uint64_t extra;	\/* extra bytes between offset_ok and offset_error *\/$/;"	m	struct:file_recovery_struct
extra_flags	./src/file_gz.c	/^  uint8_t  extra_flags;$/;"	m	struct:gzip_header	file:
extra_length	./src/file_zip.c	/^  uint16_t extra_length;            \/** Extra fields length *\/$/;"	m	struct:zip_file_entry	file:
fChecksum	./src/file_indd.c	/^  uint32_t fChecksum;$/;"	m	struct:InDesignContigObjMarker	file:
fFilePages	./src/file_indd.c	/^  uint32_t fFilePages;$/;"	m	struct:InDesignMasterPage	file:
fGUID	./src/file_indd.c	/^  uint8_t  fGUID [16];$/;"	m	struct:InDesignContigObjMarker	file:
fGUID	./src/file_indd.c	/^  uint8_t  fGUID [16];$/;"	m	struct:InDesignMasterPage	file:
fIrrelevant1	./src/file_indd.c	/^  uint8_t  fIrrelevant1 [239];$/;"	m	struct:InDesignMasterPage	file:
fIrrelevant2	./src/file_indd.c	/^  uint8_t  fIrrelevant2 [8];$/;"	m	struct:InDesignMasterPage	file:
fIrrelevant3	./src/file_indd.c	/^  uint8_t  fIrrelevant3 [3812];$/;"	m	struct:InDesignMasterPage	file:
fMagicBytes	./src/file_indd.c	/^  uint8_t  fMagicBytes [8];$/;"	m	struct:InDesignMasterPage	file:
fObjectClassID	./src/file_indd.c	/^  uint32_t fObjectClassID;$/;"	m	struct:InDesignContigObjMarker	file:
fObjectStreamEndian	./src/file_indd.c	/^  uint8_t  fObjectStreamEndian;$/;"	m	struct:InDesignMasterPage	file:
fObjectUID	./src/file_indd.c	/^  uint32_t fObjectUID;$/;"	m	struct:InDesignContigObjMarker	file:
fSequenceNumber	./src/file_indd.c	/^  uint64_t fSequenceNumber;$/;"	m	struct:InDesignMasterPage	file:
fStreamLength	./src/file_indd.c	/^  uint32_t fStreamLength;$/;"	m	struct:InDesignContigObjMarker	file:
f_status	./src/log.c	/^static int f_status=0;$/;"	v	file:
factors	./src/ext2_sbn.c	/^static const  uint64_t factors[3]={3,5,7};$/;"	v	file:
failed_disks	./src/md.h	/^	uint32_t failed_disks;	\/*  4 Number of failed disks		      *\/$/;"	m	struct:mdp_superblock_s
fastacc	./src/file_spe.c	/^  int16_t           fastacc;           \/*   36                                     *\/$/;"	m	struct:header_spe	file:
fastfile	./src/file_spe.c	/^  char          fastfile[16];      \/*   90  name of pixel control file         *\/$/;"	m	struct:header_spe	file:
fasttxt_headers	./src/file_txt.c	/^static const txt_header_t fasttxt_headers[] = {$/;"	v	file:
fat12_remove_used_space	./src/fatp.c	/^static void fat12_remove_used_space(disk_t *disk,const partition_t *partition, alloc_data_t *list_search_space, const unsigned int fat_offset, const unsigned int no_of_cluster, const unsigned int start_data, const unsigned int cluster_size, const unsigned int sector_size)$/;"	f	file:
fat16_remove_used_space	./src/fatp.c	/^static void fat16_remove_used_space(disk_t *disk_car,const partition_t *partition, alloc_data_t *list_search_space, const unsigned int fat_offset, const unsigned int no_of_cluster, const unsigned int start_data, const unsigned int cluster_size, const unsigned int sector_size)$/;"	f	file:
fat16_towchar	./src/fat_dir.c	/^static inline void fat16_towchar(wchar_t *dst, const uint8_t *src, size_t len)$/;"	f	file:
fat1x_boot_sector	./src/fat1x.c	/^int fat1x_boot_sector(disk_t *disk_car, partition_t *partition, const int verbose, const int dump_ind, const unsigned int expert, char **current_cmd)$/;"	f
fat1x_rootdir	./src/fat_dir.c	/^static int fat1x_rootdir(disk_t *disk_car, const partition_t *partition, const dir_data_t *dir_data, const struct fat_boot_sector*fat_header, file_info_t *dir_list)$/;"	f	file:
fat32_boot_sector	./src/fat32.c	/^int fat32_boot_sector(disk_t *disk_car, partition_t *partition, const int verbose, const int dump_ind, const unsigned int expert, char **current_cmd)$/;"	f
fat32_create_rootdir	./src/fat_adv.c	/^static int fat32_create_rootdir(disk_t *disk_car,const partition_t *partition, const unsigned int reserved, const unsigned int fat_length, const unsigned int root_cluster, const unsigned int sectors_per_cluster, const int verbose, file_info_t *rootdir_list, const unsigned int fats)$/;"	f	file:
fat32_dump	./src/fat_adv.c	/^static void fat32_dump(disk_t *disk_car, const partition_t *partition, const upart_type_t upart_type, const unsigned char *orgboot, const unsigned char *newboot, char **current_cmd)$/;"	f	file:
fat32_dump_ncurses	./src/fat_adv.c	/^static void fat32_dump_ncurses(disk_t *disk_car, const partition_t *partition, const upart_type_t upart_type, const unsigned char *orgboot, const unsigned char *newboot)$/;"	f	file:
fat32_find_root_cluster	./src/fat_adv.c	/^static unsigned int fat32_find_root_cluster(disk_t *disk_car,const partition_t *partition,const unsigned int sectors_per_cluster, const unsigned long int no_of_cluster,const unsigned int reserved, const unsigned int fat_length, const int interface, const int verbose, const unsigned int expert, const unsigned int first_free_cluster, const unsigned int fats)$/;"	f	file:
fat32_free_info	./src/fat.c	/^int fat32_free_info(disk_t *disk_car,const partition_t *partition, const unsigned int fat_offset, const unsigned int no_of_cluster, unsigned int *next_free, unsigned int*free_count)$/;"	f
fat32_get_free_count	./src/fat.c	/^unsigned long int fat32_get_free_count(const unsigned char *boot_fat32, const unsigned int sector_size)$/;"	f
fat32_get_next_free	./src/fat.c	/^unsigned long int fat32_get_next_free(const unsigned char *boot_fat32, const unsigned int sector_size)$/;"	f
fat32_get_prev_cluster	./src/fat.c	/^unsigned int fat32_get_prev_cluster(disk_t *disk_car,const partition_t *partition, const unsigned int fat_offset, const unsigned int cluster, const unsigned int no_of_cluster)$/;"	f
fat32_length	./src/fat.h	/^	uint32_t	fat32_length;	\/* 0x24=36 sectors\/FAT *\/$/;"	m	struct:fat_boot_sector
fat32_remove_used_space	./src/fatp.c	/^static void fat32_remove_used_space(disk_t *disk_car,const partition_t *partition, alloc_data_t *list_search_space, const unsigned int fat_offset, const unsigned int no_of_cluster, const unsigned int start_data, const unsigned int cluster_size, const unsigned int sector_size)$/;"	f	file:
fat32_set_part_name	./src/fat.c	/^static int fat32_set_part_name(disk_t *disk_car, partition_t *partition, const struct fat_boot_sector*fat_header)$/;"	f	file:
fat_block_counts	./src/exfat.h	/^	uint32_t  	fat_block_counts;       \/* number of FAT blocks *\/$/;"	m	struct:exfat_super_block
fat_blocknr	./src/exfat.h	/^	uint32_t  	fat_blocknr;            \/* 0x50 start blocknr of FAT *\/$/;"	m	struct:exfat_super_block
fat_boot_sector	./src/fat.h	/^struct fat_boot_sector {$/;"	s
fat_copy	./src/fat_dir.c	/^static int fat_copy(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const file_info_t *file)$/;"	f	file:
fat_copy_file	./src/fat_unformat.c	/^static int fat_copy_file(disk_t *disk, const partition_t *partition, const unsigned int cluster_size, const uint64_t start_data, const char *recup_dir, const unsigned int dir_num, const unsigned int inode_num, const file_info_t *file)$/;"	f	file:
fat_date_unix2dos	./src/fat_adv.c	/^static void fat_date_unix2dos(int unix_date,unsigned short *mstime, unsigned short *msdate)$/;"	f	file:
fat_dir	./src/fat_dir.c	/^static int fat_dir(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const unsigned long int first_cluster, file_info_t *dir_list)$/;"	f	file:
fat_dir_struct	./src/fat_dir.c	/^struct fat_dir_struct$/;"	s	file:
fat_find_fat_start	./src/fat_adv.c	/^static unsigned int fat_find_fat_start(const unsigned char *buffer,const int p_fat12, const int p_fat16, const int p_fat32,unsigned long int*fat_offset, const unsigned int sector_size)$/;"	f	file:
fat_find_info	./src/fat_adv.c	/^static upart_type_t fat_find_info(disk_t *disk_car,unsigned int*reserved, unsigned int*fat_length, const partition_t *partition,const uint64_t max_offset,const int p_fat12,const int p_fat16,const int p_fat32,const int verbose,const int dump_ind,const int interface, const unsigned int expert, unsigned int *fats)$/;"	f	file:
fat_find_type	./src/fat_adv.c	/^static int fat_find_type(disk_t *disk_car,const partition_t *partition,const uint64_t max_offset,const int p_fat12,const int p_fat16,const int p_fat32,const int verbose,const int dump_ind,const int interface,unsigned int *nbr_offset,info_offset_t *info_offset, const unsigned int max_nbr_offset)$/;"	f	file:
fat_fsinfo	./src/fat.h	/^struct fat_fsinfo {$/;"	s
fat_get_cluster_from_entry	./src/fat_common.c	/^unsigned int fat_get_cluster_from_entry(const struct msdos_dir_entry *entry)$/;"	f
fat_length	./src/fat.h	/^	uint16_t	fat_length;	\/* 0x16 sectors\/FAT *\/$/;"	m	struct:fat_boot_sector
fat_length	./src/ntfs.h	/^	uint16_t	fat_length;	\/* 0x16 sectors\/FAT = 0 *\/$/;"	m	struct:ntfs_boot_sector
fat_method_t	./src/fat_dir.c	/^typedef enum {FAT_FOLLOW_CLUSTER, FAT_NEXT_FREE_CLUSTER, FAT_NEXT_CLUSTER} fat_method_t;$/;"	t	typeref:enum:__anon17	file:
fat_remove_used_space	./src/fatp.c	/^unsigned int fat_remove_used_space(disk_t *disk_car, const partition_t *partition, alloc_data_t *list_search_space)$/;"	f
fat_repair_t	./src/fat_adv.c	/^typedef enum { FAT_REPAIR_ASK=0, FAT_REPAIR_YES=1, FAT_REPAIR_NO=2 } fat_repair_t;$/;"	t	typeref:enum:__anon37	file:
fat_sector_size	./src/fat_common.c	/^unsigned int fat_sector_size(const struct fat_boot_sector *fat_header)$/;"	f
fat_sectors	./src/fat_common.c	/^unsigned int fat_sectors(const struct fat_boot_sector *fat_header)$/;"	f
fat_sign	./src/file_fat.c	/^static const unsigned char fat_sign[2]= { 0x55, 0xAA};$/;"	v	file:
fat_status_t	./src/fat_adv.c	/^typedef enum { FAT_UNREADABLE=0, FAT_CORRUPTED=1, FAT_OK=2 } fat_status_t;$/;"	t	typeref:enum:__anon36	file:
fat_type	./src/fat_adv.c	/^  unsigned int  fat_type;$/;"	m	struct:info_offset_struct	file:
fat_unformat	./src/fat_unformat.c	/^pstatus_t fat_unformat(struct ph_param *params, const struct ph_options *options, alloc_data_t *list_search_space)$/;"	f
fat_unformat_aux	./src/fat_unformat.c	/^static pstatus_t fat_unformat_aux(struct ph_param *params, const struct ph_options *options, const uint64_t start_data, alloc_data_t *list_search_space)$/;"	f	file:
fats	./src/fat.h	/^	uint8_t	fats;		\/* 0x10 number of FATs *\/$/;"	m	struct:fat_boot_sector
fats	./src/fatx.h	/^  uint16_t	fats;$/;"	m	struct:disk_fatx
fats	./src/ntfs.h	/^	uint8_t	fats;		\/* 0x10 number of FATs = 0 *\/$/;"	m	struct:ntfs_boot_sector
fbk_header	./src/file_fbk.c	/^static const unsigned char fbk_header[10]	= {'T','a','b','l','e','D','a','t','a',' '};$/;"	v	file:
fcp_header	./src/file_fcp.c	/^static const unsigned char fcp_header[5]= { 0xA2, 'K','e','y','G'};$/;"	v	file:
fcs_header	./src/file_fcs.c	/^struct fcs_header$/;"	s	file:
fcs_signature	./src/file_fcs.c	/^static const unsigned char fcs_signature[6]= {'F','C','S','3','.','0'};$/;"	v	file:
fdb_header	./src/file_fdb.c	/^static const unsigned char fdb_header[7]	= { 0x00, 0x00, 0x00, 0x5c, 0xa0, 0x83, 0x02};$/;"	v	file:
fds_header	./src/file_fds.c	/^struct fds_header$/;"	s	file:
feature_map	./src/md.h	/^	uint32_t	feature_map;	\/* bit 0 set if 'bitmap_offset' is meaningful *\/$/;"	m	struct:mdp_superblock_1
fewf_clean	./src/ewf.c	/^static void fewf_clean(disk_t *disk)$/;"	f	file:
fewf_description	./src/ewf.c	/^static const char *fewf_description(disk_t *disk)$/;"	f	file:
fewf_description_short	./src/ewf.c	/^static const char *fewf_description_short(disk_t *disk)$/;"	f	file:
fewf_init	./src/ewf.c	/^disk_t *fewf_init(const char *device, const int mode)$/;"	f
fewf_nopwrite	./src/ewf.c	/^static int fewf_nopwrite(disk_t *disk, const void *buffer, const unsigned int count, const uint64_t offset)$/;"	f	file:
fewf_pread	./src/ewf.c	/^static int fewf_pread(disk_t *disk, void *buffer, const unsigned int count, const uint64_t offset)$/;"	f	file:
fewf_pwrite	./src/ewf.c	/^static int fewf_pwrite(disk_t *disk, const void *buffer, const unsigned int count, const uint64_t offset)$/;"	f	file:
fewf_sync	./src/ewf.c	/^static int fewf_sync(disk_t *disk)$/;"	f	file:
ffread	./src/file_sql.c	/^ uint8_t  ffread;$/;"	m	struct:db_header	file:
ffwrite	./src/file_sql.c	/^ uint8_t  ffwrite;$/;"	m	struct:db_header	file:
fh10_header	./src/file_fh10.c	/^static const unsigned char fh10_header[]  = { $/;"	v	file:
fh5_header_s	./src/file_fh5.c	/^struct fh5_header_s$/;"	s	file:
fh5_header_t	./src/file_fh5.c	/^typedef struct fh5_header_s fh5_header_t;$/;"	t	typeref:struct:fh5_header_s	file:
field_ids_off	./src/file_dex.c	/^  uint32_t	field_ids_off;$/;"	m	struct:dex_header	file:
field_ids_size	./src/file_dex.c	/^  uint32_t	field_ids_size;$/;"	m	struct:dex_header	file:
fields_end	./src/file_e01.c	/^        uint16_t fields_end;$/;"	m	struct:ewf_file_header	file:
fields_end	./src/hdaccess.c	/^        uint16_t fields_end;$/;"	m	struct:tdewf_file_header	file:
fields_segment	./src/file_e01.c	/^        uint16_t fields_segment;$/;"	m	struct:ewf_file_header	file:
fields_segment	./src/hdaccess.c	/^        uint16_t fields_segment;$/;"	m	struct:tdewf_file_header	file:
fields_start	./src/file_e01.c	/^        uint8_t fields_start;$/;"	m	struct:ewf_file_header	file:
fields_start	./src/hdaccess.c	/^        uint8_t fields_start;$/;"	m	struct:tdewf_file_header	file:
file2entry	./src/fat_adv.c	/^static int file2entry(struct msdos_dir_entry *de, const file_info_t *current_file)$/;"	f	file:
fileCount	./src/file_mlv.c	/^  uint16_t    fileCount;	\/* how many files belong to this group (splitting or parallel) *\/$/;"	m	struct:__anon55	file:
fileFlags	./src/file_mlv.c	/^  uint32_t    fileFlags;	\/* 1=out-of-order data, 2=dropped frames, 4=single image mode, 8=stopped due to error *\/$/;"	m	struct:__anon55	file:
fileGuid	./src/file_mlv.c	/^  uint64_t    fileGuid;		\/* UID of the file (group) generated using hw counter, time of day and PRNG *\/$/;"	m	struct:__anon55	file:
fileMagic	./src/file_mlv.c	/^  uint8_t     fileMagic[4];	\/* Magic Lantern Video file header *\/$/;"	m	struct:__anon55	file:
fileNum	./src/file_mlv.c	/^  uint16_t    fileNum;		\/* the ID within fileCount this file has (0 to fileCount-1) *\/$/;"	m	struct:__anon55	file:
fileType	./src/file_wpd.c	/^  uint8_t	fileType;$/;"	m	struct:wpd_hdr	file:
file_add_data	./src/psearch.h	/^static inline alloc_data_t *file_add_data(alloc_data_t *data, const uint64_t offset, const unsigned int content)$/;"	f
file_allow_nl	./src/filegen.c	/^void file_allow_nl(file_recovery_t *file_recovery, const unsigned int nl_mode)$/;"	f
file_attributes	./src/file_lnk.c	/^  uint32_t file_attributes; 	\/* 18h  *\/$/;"	m	struct:lnk_header_s	file:
file_attributes	./src/ntfs.h	/^\/* 38*\/	uint32_t file_attributes;	\/* Flags describing the file. *\/$/;"	m	struct:__anon23
file_block_add_to_file	./src/photorec.c	/^static inline void file_block_add_to_file(alloc_list_t *list, const uint64_t offset, const uint64_t blocksize, const unsigned int data)$/;"	f	file:
file_block_append	./src/photorec.c	/^void file_block_append(file_recovery_t *file_recovery, alloc_data_t *list_search_space, alloc_data_t **new_current_search_space, uint64_t *offset, const unsigned int blocksize, const unsigned int data)$/;"	f
file_block_free	./src/photorec.c	/^void file_block_free(alloc_list_t *list_allocation)$/;"	f
file_block_log	./src/photorec.c	/^void file_block_log(const file_recovery_t *file_recovery, const unsigned int sector_size)$/;"	f
file_block_move	./src/photorec.c	/^static void file_block_move(const file_recovery_t *file_recovery, alloc_data_t *list_search_space, alloc_data_t **new_current_search_space, uint64_t *offset)$/;"	f	file:
file_block_remove_from_sp	./src/photorec.c	/^static inline void file_block_remove_from_sp(alloc_data_t *list_search_space, alloc_data_t **new_current_search_space, uint64_t *offset, const unsigned int blocksize)$/;"	f	file:
file_block_remove_from_sp_aux	./src/photorec.c	/^static inline void file_block_remove_from_sp_aux(alloc_data_t *tmp, alloc_data_t **new_current_search_space, uint64_t *offset, const unsigned int blocksize)$/;"	f	file:
file_block_truncate	./src/photorec.c	/^static void file_block_truncate(const file_recovery_t *file_recovery, alloc_data_t *list_search_space, const unsigned int blocksize)$/;"	f	file:
file_block_truncate_and_move	./src/photorec.c	/^void file_block_truncate_and_move(file_recovery_t *file_recovery, alloc_data_t *list_search_space, const unsigned int blocksize,  alloc_data_t **new_current_search_space, uint64_t *offset, unsigned char *buffer)$/;"	f
file_block_truncate_aux	./src/photorec.c	/^static void file_block_truncate_aux(const uint64_t start, const uint64_t end, alloc_data_t *list_search_space)$/;"	f	file:
file_block_truncate_zero	./src/photorec.c	/^static void file_block_truncate_zero(const file_recovery_t *file_recovery, alloc_data_t *list_search_space)$/;"	f	file:
file_block_truncate_zero_aux	./src/photorec.c	/^static void file_block_truncate_zero_aux(const uint64_t start, const uint64_t end, alloc_data_t *list_search_space, file_stat_t *file_stat)$/;"	f	file:
file_change_counter	./src/file_sql.c	/^ uint32_t file_change_counter;$/;"	m	struct:db_header	file:
file_check	./src/filegen.h	/^  void (*file_check)(file_recovery_t *file_recovery);$/;"	m	struct:file_recovery_struct
file_check_EXTENSION	./src/file_template.c	/^static void file_check_EXTENSION(file_recovery_t *file_recovery)$/;"	f	file:
file_check_ace	./src/file_ace.c	/^static void file_check_ace(file_recovery_t *file_recovery)$/;"	f	file:
file_check_add_tail	./src/filegen.c	/^static void file_check_add_tail(file_check_t *file_check_new, file_check_list_t *pos)$/;"	f	file:
file_check_als	./src/file_als.c	/^static void file_check_als(file_recovery_t *file_recovery)$/;"	f	file:
file_check_arj	./src/file_arj.c	/^static void file_check_arj(file_recovery_t *file_recovery)$/;"	f	file:
file_check_asm	./src/file_asm.c	/^static void file_check_asm(file_recovery_t *file_recovery)$/;"	f	file:
file_check_avi	./src/file_riff.c	/^static void file_check_avi(file_recovery_t *fr)$/;"	f	file:
file_check_axx	./src/file_axx.c	/^static void file_check_axx(file_recovery_t *fr)$/;"	f	file:
file_check_bkf	./src/file_bkf.c	/^static void file_check_bkf(file_recovery_t *file_recovery)$/;"	f	file:
file_check_cmp	./src/filegen.c	/^static int file_check_cmp(const struct td_list_head *a, const struct td_list_head *b)$/;"	f	file:
file_check_crw	./src/file_crw.c	/^static void file_check_crw(file_recovery_t *file_recovery)$/;"	f	file:
file_check_cwk	./src/file_cwk.c	/^static void file_check_cwk(file_recovery_t *file_recovery)$/;"	f	file:
file_check_doc	./src/file_doc.c	/^static void file_check_doc(file_recovery_t *file_recovery)$/;"	f	file:
file_check_drw	./src/file_drw.c	/^static void file_check_drw(file_recovery_t *file_recovery)$/;"	f	file:
file_check_dv_NTSC	./src/file_dv.c	/^static void file_check_dv_NTSC(file_recovery_t *fr)$/;"	f	file:
file_check_dv_PAL	./src/file_dv.c	/^static void file_check_dv_PAL(file_recovery_t *fr)$/;"	f	file:
file_check_dxf	./src/file_dxf.c	/^static void file_check_dxf(file_recovery_t *file_recovery)$/;"	f	file:
file_check_e01	./src/file_e01.c	/^static void file_check_e01(file_recovery_t *file_recovery)$/;"	f	file:
file_check_ecryptfs	./src/file_ecryptfs.c	/^static void file_check_ecryptfs(file_recovery_t *file_recovery)$/;"	f	file:
file_check_emlx	./src/file_txt.c	/^static void file_check_emlx(file_recovery_t *file_recovery)$/;"	f	file:
file_check_ers	./src/file_txt.c	/^static void file_check_ers(file_recovery_t *file_recovery)$/;"	f	file:
file_check_fh5	./src/file_fh5.c	/^static void file_check_fh5(file_recovery_t *file_recovery)$/;"	f	file:
file_check_frm	./src/file_frm.c	/^static void file_check_frm(file_recovery_t *file_recovery)$/;"	f	file:
file_check_gif	./src/file_gif.c	/^static void file_check_gif(file_recovery_t *file_recovery)$/;"	f	file:
file_check_gp5	./src/file_gp5.c	/^static void file_check_gp5(file_recovery_t *file_recovery)$/;"	f	file:
file_check_gpg	./src/file_gpg.c	/^static void file_check_gpg(file_recovery_t *file_recovery)$/;"	f	file:
file_check_hdf	./src/file_hdf.c	/^static void file_check_hdf(file_recovery_t *file_recovery)$/;"	f	file:
file_check_hr9	./src/file_hr9.c	/^static void file_check_hr9(file_recovery_t *file_recovery)$/;"	f	file:
file_check_indd	./src/file_indd.c	/^static void file_check_indd(file_recovery_t *file_recovery)$/;"	f	file:
file_check_jpg	./src/file_jpg.c	/^static void file_check_jpg(file_recovery_t *file_recovery)$/;"	f	file:
file_check_list	./src/filegen.c	/^file_check_list_t file_check_list={$/;"	v
file_check_list_t	./src/filegen.h	/^} file_check_list_t;$/;"	t	typeref:struct:__anon68
file_check_lso	./src/file_lso.c	/^static void file_check_lso(file_recovery_t *file_recovery)$/;"	f	file:
file_check_mfa	./src/file_mfa.c	/^static void file_check_mfa(file_recovery_t *file_recovery)$/;"	f	file:
file_check_mfg	./src/file_mfg.c	/^static void file_check_mfg(file_recovery_t *file_recovery)$/;"	f	file:
file_check_midi	./src/file_mid.c	/^static void file_check_midi(file_recovery_t *file_recovery)$/;"	f	file:
file_check_mig	./src/file_mig.c	/^static void file_check_mig(file_recovery_t *file_recovery)$/;"	f	file:
file_check_mlv	./src/file_mlv.c	/^static void file_check_mlv(file_recovery_t *file_recovery)$/;"	f	file:
file_check_mobi	./src/file_mobi.c	/^static void file_check_mobi(file_recovery_t *file_recovery)$/;"	f	file:
file_check_mpo	./src/file_jpg.c	/^static void file_check_mpo(file_recovery_t *fr)$/;"	f	file:
file_check_mus	./src/file_mus.c	/^static void file_check_mus(file_recovery_t *file_recovery)$/;"	f	file:
file_check_njx	./src/file_njx.c	/^static void file_check_njx(file_recovery_t *file_recovery)$/;"	f	file:
file_check_nk2	./src/file_nk2.c	/^static void file_check_nk2(file_recovery_t *fr)$/;"	f	file:
file_check_pct	./src/file_pct.c	/^static void file_check_pct(file_recovery_t *file_recovery)$/;"	f	file:
file_check_pdf	./src/file_pdf.c	/^static void file_check_pdf(file_recovery_t *file_recovery)$/;"	f	file:
file_check_pdf_and_size	./src/file_pdf.c	/^static void file_check_pdf_and_size(file_recovery_t *file_recovery)$/;"	f	file:
file_check_plist	./src/filegen.c	/^static  file_check_t file_check_plist={$/;"	v	file:
file_check_png	./src/file_png.c	/^static void file_check_png(file_recovery_t *fr)$/;"	f	file:
file_check_prt	./src/file_prt.c	/^static void file_check_prt(file_recovery_t *file_recovery)$/;"	f	file:
file_check_psb	./src/file_psb.c	/^static void file_check_psb(file_recovery_t *file_recovery)$/;"	f	file:
file_check_psd	./src/file_psd.c	/^static void file_check_psd(file_recovery_t *file_recovery)$/;"	f	file:
file_check_pzf	./src/file_pzf.c	/^static void file_check_pzf(file_recovery_t *file_recovery)$/;"	f	file:
file_check_qbb	./src/file_qbb.c	/^static void file_check_qbb(file_recovery_t *file_recovery)$/;"	f	file:
file_check_rar	./src/file_rar.c	/^static void file_check_rar(file_recovery_t *file_recovery)$/;"	f	file:
file_check_size	./src/filegen.c	/^void file_check_size(file_recovery_t *file_recovery)$/;"	f
file_check_size_lax	./src/filegen.c	/^void file_check_size_lax(file_recovery_t *file_recovery)$/;"	f
file_check_size_rifx	./src/file_riff.c	/^static void file_check_size_rifx(file_recovery_t *file_recovery)$/;"	f	file:
file_check_smil	./src/file_txt.c	/^static void file_check_smil(file_recovery_t *file_recovery)$/;"	f	file:
file_check_spf	./src/file_spf.c	/^static void file_check_spf(file_recovery_t *file_recovery)$/;"	f	file:
file_check_svg	./src/file_txt.c	/^static void file_check_svg(file_recovery_t *file_recovery)$/;"	f	file:
file_check_t	./src/filegen.h	/^} file_check_t;$/;"	t	typeref:struct:__anon67
file_check_tib2	./src/file_tib.c	/^static void file_check_tib2(file_recovery_t *file_recovery)$/;"	f	file:
file_check_tiff	./src/file_tiff.c	/^void file_check_tiff(file_recovery_t *fr)$/;"	f
file_check_tivo	./src/file_tivo.c	/^static void file_check_tivo(file_recovery_t *file_recovery)$/;"	f	file:
file_check_tph	./src/file_tph.c	/^static void file_check_tph(file_recovery_t *file_recovery)$/;"	f	file:
file_check_vfb	./src/file_vfb.c	/^static void file_check_vfb(file_recovery_t *file_recovery)$/;"	f	file:
file_check_vmg	./src/file_vmg.c	/^static void file_check_vmg(file_recovery_t *file_recovery)$/;"	f	file:
file_check_xm	./src/file_xm.c	/^static void file_check_xm(file_recovery_t *fr)$/;"	f	file:
file_check_xml	./src/file_txt.c	/^static void file_check_xml(file_recovery_t *file_recovery)$/;"	f	file:
file_check_xz	./src/file_xz.c	/^static void file_check_xz(file_recovery_t *file_recovery)$/;"	f	file:
file_check_zip	./src/file_zip.c	/^static void file_check_zip(file_recovery_t *fr)$/;"	f	file:
file_checks	./src/filegen.h	/^  file_check_t file_checks[256];$/;"	m	struct:__anon68
file_clean	./src/hdaccess.c	/^static void file_clean(disk_t *disk)$/;"	f	file:
file_close	./src/rfs_dir.c	/^void file_close(dal_t *dal) {$/;"	f
file_count	./src/hfsp.h	/^        uint32_t         file_count;	\/\/ 20$/;"	m	struct:hfsp_vh
file_crc	./src/file_lzh.c	/^  uint16_t file_crc;$/;"	m	struct:lzh_level2	file:
file_date	./src/file_asf.c	/^  uint64_t      file_date;$/;"	m	struct:asf_file_prop_s	file:
file_date_pdf	./src/file_pdf.c	/^static void file_date_pdf(file_recovery_t *file_recovery)$/;"	f	file:
file_description	./src/hdaccess.c	/^static const char *file_description(disk_t *disk)$/;"	f	file:
file_description_short	./src/hdaccess.c	/^static const char *file_description_short(disk_t *disk_car)$/;"	f	file:
file_enable_struct	./src/filegen.h	/^struct file_enable_struct$/;"	s
file_enable_t	./src/filegen.h	/^typedef struct file_enable_struct file_enable_t;$/;"	t	typeref:struct:file_enable_struct
file_equals	./src/rfs_dir.c	/^static int file_equals(dal_t *dal1, dal_t *dal2)$/;"	f	file:
file_exe_ressource	./src/file_exe.c	/^static void file_exe_ressource(FILE *file, const unsigned int base, const unsigned int dir_start, const unsigned int size, const unsigned int rsrcType, const unsigned int level, const struct pe_image_section_hdr *pe_sections, unsigned int nbr_sections, const char *old_filename)$/;"	f	file:
file_finish2	./src/photorec.c	/^int file_finish2(file_recovery_t *file_recovery, struct ph_param *params, const int paranoid, alloc_data_t *list_search_space)$/;"	f
file_finish_aux	./src/photorec.c	/^static void file_finish_aux(file_recovery_t *file_recovery, struct ph_param *params, const int paranoid)$/;"	f	file:
file_finish_bf	./src/photorec.c	/^int file_finish_bf(file_recovery_t *file_recovery, struct ph_param *params,$/;"	f
file_flags	./src/rfs_dir.c	/^static int file_flags(dal_t *dal)$/;"	f	file:
file_found	./src/file_found.c	/^alloc_data_t *file_found(alloc_data_t *current_search_space, const uint64_t offset, file_stat_t *file_stat)$/;"	f
file_get_pos	./src/file_zip.c	/^static int64_t file_get_pos(FILE *f, const void* needle, const unsigned int size)$/;"	f	file:
file_header	./src/file_a.c	/^struct file_header$/;"	s	file:
file_header_ver	./src/file_spe.c	/^  float		  file_header_ver;   \/* 1992 Version of this file header		 *\/$/;"	m	struct:header_spe	file:
file_hint	./src/filegen.h	/^  const file_hint_t *file_hint;$/;"	m	struct:file_enable_struct
file_hint	./src/filegen.h	/^  const file_hint_t *file_hint;$/;"	m	struct:file_stat_struct
file_hint_1cd	./src/file_1cd.c	/^const file_hint_t file_hint_1cd= {$/;"	v
file_hint_3dm	./src/file_3dm.c	/^const file_hint_t file_hint_3dm= {$/;"	v
file_hint_7z	./src/file_7z.c	/^const file_hint_t file_hint_7z= {$/;"	v
file_hint_DB	./src/file_DB.c	/^const file_hint_t file_hint_DB= {$/;"	v
file_hint_EXTENSION	./src/file_template.c	/^const file_hint_t file_hint_EXTENSION= {$/;"	v
file_hint_a	./src/file_a.c	/^const file_hint_t file_hint_a= {$/;"	v
file_hint_abcdp	./src/file_abcdp.c	/^const file_hint_t file_hint_abcdp= {$/;"	v
file_hint_abr	./src/file_abr.c	/^const file_hint_t file_hint_abr= {$/;"	v
file_hint_acb	./src/file_acb.c	/^const file_hint_t file_hint_acb= {$/;"	v
file_hint_accdb	./src/file_mdb.c	/^const file_hint_t file_hint_accdb= {$/;"	v
file_hint_ace	./src/file_ace.c	/^const file_hint_t file_hint_ace= {$/;"	v
file_hint_addressbook	./src/file_ab.c	/^const file_hint_t file_hint_addressbook= {$/;"	v
file_hint_ado	./src/file_ado.c	/^const file_hint_t file_hint_ado= {$/;"	v
file_hint_ahn	./src/file_ahn.c	/^const file_hint_t file_hint_ahn= {$/;"	v
file_hint_aif	./src/file_aif.c	/^const file_hint_t file_hint_aif= {$/;"	v
file_hint_all	./src/file_all.c	/^const file_hint_t file_hint_all= {$/;"	v
file_hint_als	./src/file_als.c	/^const file_hint_t file_hint_als= {$/;"	v
file_hint_amd	./src/file_amd.c	/^const file_hint_t file_hint_amd= {$/;"	v
file_hint_amr	./src/file_amr.c	/^const file_hint_t file_hint_amr= {$/;"	v
file_hint_apa	./src/file_apa.c	/^const file_hint_t file_hint_apa= {$/;"	v
file_hint_ape	./src/file_ape.c	/^const file_hint_t file_hint_ape= {$/;"	v
file_hint_apple	./src/file_apple.c	/^const file_hint_t file_hint_apple= {$/;"	v
file_hint_ari	./src/file_ari.c	/^const file_hint_t file_hint_ari= {$/;"	v
file_hint_arj	./src/file_arj.c	/^const file_hint_t file_hint_arj= {$/;"	v
file_hint_asf	./src/file_asf.c	/^const file_hint_t file_hint_asf= {$/;"	v
file_hint_asl	./src/file_asl.c	/^const file_hint_t file_hint_asl= {$/;"	v
file_hint_asm	./src/file_asm.c	/^const file_hint_t file_hint_asm= {$/;"	v
file_hint_atd	./src/file_atd.c	/^const file_hint_t file_hint_atd= {$/;"	v
file_hint_au	./src/file_au.c	/^const file_hint_t file_hint_au= {$/;"	v
file_hint_axx	./src/file_axx.c	/^const file_hint_t file_hint_axx= {$/;"	v
file_hint_bac	./src/file_bac.c	/^const file_hint_t file_hint_bac= {$/;"	v
file_hint_berkeley	./src/file_berkeley.c	/^const file_hint_t file_hint_berkeley= {$/;"	v
file_hint_bim	./src/file_bim.c	/^const file_hint_t file_hint_bim= {$/;"	v
file_hint_binvox	./src/file_binvox.c	/^const file_hint_t file_hint_binvox= {$/;"	v
file_hint_bkf	./src/file_bkf.c	/^const file_hint_t file_hint_bkf= {$/;"	v
file_hint_blend	./src/file_bld.c	/^const file_hint_t file_hint_blend= {$/;"	v
file_hint_bmp	./src/file_bmp.c	/^const file_hint_t file_hint_bmp= {$/;"	v
file_hint_bz2	./src/file_bz2.c	/^const file_hint_t file_hint_bz2= {$/;"	v
file_hint_cab	./src/file_cab.c	/^const file_hint_t file_hint_cab= {$/;"	v
file_hint_caf	./src/file_caf.c	/^const file_hint_t file_hint_caf= {$/;"	v
file_hint_cam	./src/file_cam.c	/^const file_hint_t file_hint_cam= {$/;"	v
file_hint_catdrawing	./src/file_catdrawing.c	/^const file_hint_t file_hint_catdrawing= {$/;"	v
file_hint_cdt	./src/file_cdt.c	/^const file_hint_t file_hint_cdt= {$/;"	v
file_hint_chm	./src/file_chm.c	/^const file_hint_t file_hint_chm= {$/;"	v
file_hint_class	./src/file_class.c	/^const file_hint_t file_hint_class= {$/;"	v
file_hint_cm	./src/file_cm.c	/^const file_hint_t file_hint_cm= {$/;"	v
file_hint_compress	./src/file_compress.c	/^const file_hint_t file_hint_compress= {$/;"	v
file_hint_cow	./src/file_cow.c	/^const file_hint_t file_hint_cow= {$/;"	v
file_hint_crw	./src/file_crw.c	/^const file_hint_t file_hint_crw= {$/;"	v
file_hint_csh	./src/file_csh.c	/^const file_hint_t file_hint_csh= {$/;"	v
file_hint_ctg	./src/file_ctg.c	/^const file_hint_t file_hint_ctg= {$/;"	v
file_hint_cwk	./src/file_cwk.c	/^const file_hint_t file_hint_cwk= {$/;"	v
file_hint_d2s	./src/file_d2s.c	/^const file_hint_t file_hint_d2s= {$/;"	v
file_hint_dad	./src/file_dad.c	/^const file_hint_t file_hint_dad= {$/;"	v
file_hint_dar	./src/file_dar.c	/^const file_hint_t file_hint_dar= {$/;"	v
file_hint_dat	./src/file_dat.c	/^const file_hint_t file_hint_dat= {$/;"	v
file_hint_dbf	./src/file_dbf.c	/^const file_hint_t file_hint_dbf= {$/;"	v
file_hint_dbn	./src/file_dbn.c	/^const file_hint_t file_hint_dbn= {$/;"	v
file_hint_dcm	./src/file_dcm.c	/^const file_hint_t file_hint_dcm= {$/;"	v
file_hint_ddf	./src/file_ddf.c	/^const file_hint_t file_hint_ddf= {$/;"	v
file_hint_dex	./src/file_dex.c	/^const file_hint_t file_hint_dex= {$/;"	v
file_hint_dim	./src/file_dim.c	/^const file_hint_t file_hint_dim= {$/;"	v
file_hint_dir	./src/file_dir.c	/^const file_hint_t file_hint_dir= {$/;"	v
file_hint_djv	./src/file_djv.c	/^const file_hint_t file_hint_djv= {$/;"	v
file_hint_dmp	./src/file_dmp.c	/^const file_hint_t file_hint_dmp= {$/;"	v
file_hint_doc	./src/file_doc.c	/^const file_hint_t file_hint_doc= {$/;"	v
file_hint_dpx	./src/file_dpx.c	/^const file_hint_t file_hint_dpx= {$/;"	v
file_hint_drw	./src/file_drw.c	/^const file_hint_t file_hint_drw= {$/;"	v
file_hint_ds2	./src/file_ds2.c	/^const file_hint_t file_hint_ds2= {$/;"	v
file_hint_dsc	./src/file_dsc.c	/^const file_hint_t file_hint_dsc= {$/;"	v
file_hint_dss	./src/file_dss.c	/^const file_hint_t file_hint_dss= {$/;"	v
file_hint_dta	./src/file_dta.c	/^const file_hint_t file_hint_dta= {$/;"	v
file_hint_dump	./src/file_dump.c	/^const file_hint_t file_hint_dump= {$/;"	v
file_hint_dv	./src/file_dv.c	/^const file_hint_t file_hint_dv= {$/;"	v
file_hint_dwg	./src/file_dwg.c	/^const file_hint_t file_hint_dwg= {$/;"	v
file_hint_dxf	./src/file_dxf.c	/^const file_hint_t file_hint_dxf= {$/;"	v
file_hint_e01	./src/file_e01.c	/^const file_hint_t file_hint_e01= {$/;"	v
file_hint_ecryptfs	./src/file_ecryptfs.c	/^const file_hint_t file_hint_ecryptfs= {$/;"	v
file_hint_edb	./src/file_edb.c	/^const file_hint_t file_hint_edb= {$/;"	v
file_hint_elf	./src/file_elf.c	/^const file_hint_t file_hint_elf= {$/;"	v
file_hint_emf	./src/file_emf.c	/^const file_hint_t file_hint_emf= {$/;"	v
file_hint_evt	./src/file_evt.c	/^const file_hint_t file_hint_evt= {$/;"	v
file_hint_exe	./src/file_exe.c	/^const file_hint_t file_hint_exe= {$/;"	v
file_hint_exs	./src/file_exs.c	/^const file_hint_t file_hint_exs= {$/;"	v
file_hint_ext2_fs	./src/file_ext2.c	/^const file_hint_t file_hint_ext2_fs= {$/;"	v
file_hint_ext2_sb	./src/file_ext.c	/^const file_hint_t file_hint_ext2_sb= {$/;"	v
file_hint_fasttxt	./src/file_txt.c	/^const file_hint_t file_hint_fasttxt= {$/;"	v
file_hint_fat	./src/file_fat.c	/^const file_hint_t file_hint_fat= {$/;"	v
file_hint_fbf	./src/file_fbf.c	/^const file_hint_t file_hint_fbf= {$/;"	v
file_hint_fbk	./src/file_fbk.c	/^const file_hint_t file_hint_fbk= {$/;"	v
file_hint_fcp	./src/file_fcp.c	/^const file_hint_t file_hint_fcp= {$/;"	v
file_hint_fcs	./src/file_fcs.c	/^const file_hint_t file_hint_fcs= {$/;"	v
file_hint_fdb	./src/file_fdb.c	/^const file_hint_t file_hint_fdb= {$/;"	v
file_hint_fds	./src/file_fds.c	/^const file_hint_t file_hint_fds= {$/;"	v
file_hint_fh10	./src/file_fh10.c	/^const file_hint_t file_hint_fh10= {$/;"	v
file_hint_fh5	./src/file_fh5.c	/^const file_hint_t file_hint_fh5= {$/;"	v
file_hint_filevault	./src/file_filevault.c	/^const file_hint_t file_hint_filevault= {$/;"	v
file_hint_fits	./src/file_fits.c	/^const file_hint_t file_hint_fits= {$/;"	v
file_hint_flac	./src/file_flac.c	/^const file_hint_t file_hint_flac= {$/;"	v
file_hint_flp	./src/file_flp.c	/^const file_hint_t file_hint_flp= {$/;"	v
file_hint_flv	./src/file_flv.c	/^const file_hint_t file_hint_flv= {$/;"	v
file_hint_fob	./src/file_fob.c	/^const file_hint_t file_hint_fob= {$/;"	v
file_hint_fp5	./src/file_fp5.c	/^const file_hint_t file_hint_fp5= {$/;"	v
file_hint_fp7	./src/file_fp7.c	/^const file_hint_t file_hint_fp7= {$/;"	v
file_hint_freeway	./src/file_freeway.c	/^const file_hint_t file_hint_freeway= {$/;"	v
file_hint_frm	./src/file_frm.c	/^const file_hint_t file_hint_frm= {$/;"	v
file_hint_fs	./src/file_fs.c	/^const file_hint_t file_hint_fs= {$/;"	v
file_hint_fwd	./src/file_fwd.c	/^const file_hint_t file_hint_fwd= {$/;"	v
file_hint_gam	./src/file_gam.c	/^const file_hint_t file_hint_gam= {$/;"	v
file_hint_gct	./src/file_gct.c	/^const file_hint_t file_hint_gct= {$/;"	v
file_hint_gho	./src/file_gho.c	/^const file_hint_t file_hint_gho= {$/;"	v
file_hint_gif	./src/file_gif.c	/^const file_hint_t file_hint_gif= {$/;"	v
file_hint_gm6	./src/file_gm6.c	/^const file_hint_t file_hint_gm6= {$/;"	v
file_hint_gp5	./src/file_gp5.c	/^const file_hint_t file_hint_gp5= {$/;"	v
file_hint_gpg	./src/file_gpg.c	/^const file_hint_t file_hint_gpg= {$/;"	v
file_hint_gz	./src/file_gz.c	/^const file_hint_t file_hint_gz= {$/;"	v
file_hint_hdf	./src/file_hdf.c	/^const file_hint_t file_hint_hdf= {$/;"	v
file_hint_hds	./src/file_hds.c	/^const file_hint_t file_hint_hds= {$/;"	v
file_hint_hfsp	./src/file_hfsp.c	/^const file_hint_t file_hint_hfsp= {$/;"	v
file_hint_hr9	./src/file_hr9.c	/^const file_hint_t file_hint_hr9= {$/;"	v
file_hint_http	./src/file_http.c	/^const file_hint_t file_hint_http= {$/;"	v
file_hint_icc	./src/file_icc.c	/^const file_hint_t file_hint_icc= {$/;"	v
file_hint_ico	./src/file_ico.c	/^const file_hint_t file_hint_ico= {$/;"	v
file_hint_ifo	./src/file_ifo.c	/^const file_hint_t file_hint_ifo= {$/;"	v
file_hint_imb	./src/file_imb.c	/^const file_hint_t file_hint_imb= {$/;"	v
file_hint_indd	./src/file_indd.c	/^const file_hint_t file_hint_indd= {$/;"	v
file_hint_info	./src/file_info.c	/^const file_hint_t file_hint_info= {$/;"	v
file_hint_iso	./src/file_iso.c	/^const file_hint_t file_hint_iso= {$/;"	v
file_hint_it	./src/file_it.c	/^const file_hint_t file_hint_it= {$/;"	v
file_hint_itunes	./src/file_itu.c	/^const file_hint_t file_hint_itunes= {$/;"	v
file_hint_jpg	./src/file_jpg.c	/^const file_hint_t file_hint_jpg= {$/;"	v
file_hint_kdb	./src/file_kdb.c	/^const file_hint_t file_hint_kdb= {$/;"	v
file_hint_kdbx	./src/file_kdbx.c	/^const file_hint_t file_hint_kdbx= {$/;"	v
file_hint_ldf	./src/file_ldf.c	/^const file_hint_t file_hint_ldf= {$/;"	v
file_hint_lit	./src/file_lit.c	/^const file_hint_t file_hint_lit= {$/;"	v
file_hint_lnk	./src/file_lnk.c	/^const file_hint_t file_hint_lnk= {$/;"	v
file_hint_logic	./src/file_logic.c	/^const file_hint_t file_hint_logic= {$/;"	v
file_hint_lso	./src/file_lso.c	/^const file_hint_t file_hint_lso= {$/;"	v
file_hint_luks	./src/file_luks.c	/^const file_hint_t file_hint_luks= {$/;"	v
file_hint_lxo	./src/file_lxo.c	/^const file_hint_t file_hint_lxo= {$/;"	v
file_hint_lzh	./src/file_lzh.c	/^const file_hint_t file_hint_lzh= {$/;"	v
file_hint_lzo	./src/file_lzo.c	/^const file_hint_t file_hint_lzo= {$/;"	v
file_hint_m2ts	./src/file_m2ts.c	/^const file_hint_t file_hint_m2ts= {$/;"	v
file_hint_mat	./src/file_mat.c	/^const file_hint_t file_hint_mat= {$/;"	v
file_hint_max	./src/file_max.c	/^const file_hint_t file_hint_max= {$/;"	v
file_hint_mb	./src/file_mb.c	/^const file_hint_t file_hint_mb= {$/;"	v
file_hint_mcd	./src/file_mcd.c	/^const file_hint_t file_hint_mcd= {$/;"	v
file_hint_mdb	./src/file_mdb.c	/^const file_hint_t file_hint_mdb= {$/;"	v
file_hint_mdf	./src/file_mdf.c	/^const file_hint_t file_hint_mdf= {$/;"	v
file_hint_mfa	./src/file_mfa.c	/^const file_hint_t file_hint_mfa= {$/;"	v
file_hint_mfg	./src/file_mfg.c	/^const file_hint_t file_hint_mfg= {$/;"	v
file_hint_mft	./src/file_mft.c	/^const file_hint_t file_hint_mft= {$/;"	v
file_hint_mid	./src/file_mid.c	/^const file_hint_t file_hint_mid= {$/;"	v
file_hint_mig	./src/file_mig.c	/^const file_hint_t file_hint_mig= {$/;"	v
file_hint_mk5	./src/file_mk5.c	/^const file_hint_t file_hint_mk5= {$/;"	v
file_hint_mkv	./src/file_mkv.c	/^const file_hint_t file_hint_mkv= {$/;"	v
file_hint_mlv	./src/file_mlv.c	/^const file_hint_t file_hint_mlv= {$/;"	v
file_hint_mobi	./src/file_mobi.c	/^const file_hint_t file_hint_mobi= {$/;"	v
file_hint_mov	./src/file_mov.c	/^const file_hint_t file_hint_mov= {$/;"	v
file_hint_mp3	./src/file_mp3.c	/^const file_hint_t file_hint_mp3= {$/;"	v
file_hint_mpg	./src/file_mpg.c	/^const file_hint_t file_hint_mpg= {$/;"	v
file_hint_mrw	./src/file_mrw.c	/^const file_hint_t file_hint_mrw= {$/;"	v
file_hint_mus	./src/file_mus.c	/^const file_hint_t file_hint_mus= {$/;"	v
file_hint_mxf	./src/file_mxf.c	/^const file_hint_t file_hint_mxf= {$/;"	v
file_hint_myo	./src/file_myo.c	/^const file_hint_t file_hint_myo= {$/;"	v
file_hint_mysql	./src/file_mysql.c	/^const file_hint_t file_hint_mysql= {$/;"	v
file_hint_nds	./src/file_nds.c	/^const file_hint_t file_hint_nds= {$/;"	v
file_hint_nes	./src/file_nes.c	/^const file_hint_t file_hint_nes= {$/;"	v
file_hint_njx	./src/file_njx.c	/^const file_hint_t file_hint_njx= {$/;"	v
file_hint_nk2	./src/file_nk2.c	/^const file_hint_t file_hint_nk2= {$/;"	v
file_hint_nsf	./src/file_nsf.c	/^const file_hint_t file_hint_nsf= {$/;"	v
file_hint_oci	./src/file_oci.c	/^const file_hint_t file_hint_oci= {$/;"	v
file_hint_ogg	./src/file_ogg.c	/^const file_hint_t file_hint_ogg= {$/;"	v
file_hint_one	./src/file_one.c	/^const file_hint_t file_hint_one= {$/;"	v
file_hint_orf	./src/file_orf.c	/^const file_hint_t file_hint_orf= {$/;"	v
file_hint_paf	./src/file_paf.c	/^const file_hint_t file_hint_paf= {$/;"	v
file_hint_pap	./src/file_pap.c	/^const file_hint_t file_hint_pap= {$/;"	v
file_hint_par2	./src/file_par2.c	/^const file_hint_t file_hint_par2= {$/;"	v
file_hint_pcap	./src/file_pcap.c	/^const file_hint_t file_hint_pcap= {$/;"	v
file_hint_pct	./src/file_pct.c	/^const file_hint_t file_hint_pct= {$/;"	v
file_hint_pcx	./src/file_pcx.c	/^const file_hint_t file_hint_pcx= {$/;"	v
file_hint_pdf	./src/file_pdf.c	/^const file_hint_t file_hint_pdf= {$/;"	v
file_hint_pds	./src/file_pds.c	/^const file_hint_t file_hint_pds= {$/;"	v
file_hint_pfx	./src/file_pfx.c	/^const file_hint_t file_hint_pfx= {$/;"	v
file_hint_plt	./src/file_plt.c	/^const file_hint_t file_hint_plt= {$/;"	v
file_hint_png	./src/file_png.c	/^const file_hint_t file_hint_png= {$/;"	v
file_hint_pnm	./src/file_pnm.c	/^const file_hint_t file_hint_pnm= {$/;"	v
file_hint_prc	./src/file_prc.c	/^const file_hint_t file_hint_prc= {$/;"	v
file_hint_prt	./src/file_prt.c	/^const file_hint_t file_hint_prt= {$/;"	v
file_hint_ps	./src/file_ps.c	/^const file_hint_t file_hint_ps= {$/;"	v
file_hint_psb	./src/file_psb.c	/^const file_hint_t file_hint_psb= {$/;"	v
file_hint_psd	./src/file_psd.c	/^const file_hint_t file_hint_psd= {$/;"	v
file_hint_psf	./src/file_psf.c	/^const file_hint_t file_hint_psf= {$/;"	v
file_hint_psp	./src/file_psp.c	/^const file_hint_t file_hint_psp= {$/;"	v
file_hint_pst	./src/file_pst.c	/^const file_hint_t file_hint_pst= {$/;"	v
file_hint_ptb	./src/file_ptb.c	/^const file_hint_t file_hint_ptb= {$/;"	v
file_hint_ptf	./src/file_ptf.c	/^const file_hint_t file_hint_ptf= {$/;"	v
file_hint_pyc	./src/file_pyc.c	/^const file_hint_t file_hint_pyc= {$/;"	v
file_hint_pzf	./src/file_pzf.c	/^const file_hint_t file_hint_pzf= {$/;"	v
file_hint_pzh	./src/file_pzh.c	/^const file_hint_t file_hint_pzh= {$/;"	v
file_hint_qbb	./src/file_qbb.c	/^const file_hint_t file_hint_qbb= {$/;"	v
file_hint_qdf	./src/file_qdf.c	/^const file_hint_t file_hint_qdf= {$/;"	v
file_hint_qkt	./src/file_qkt.c	/^const file_hint_t file_hint_qkt= {$/;"	v
file_hint_qxd	./src/file_qxd.c	/^const file_hint_t file_hint_qxd= {$/;"	v
file_hint_r3d	./src/file_r3d.c	/^const file_hint_t file_hint_r3d= {$/;"	v
file_hint_ra	./src/file_ra.c	/^const file_hint_t file_hint_ra= {$/;"	v
file_hint_raf	./src/file_raf.c	/^const file_hint_t file_hint_raf= {$/;"	v
file_hint_rar	./src/file_rar.c	/^const file_hint_t file_hint_rar= {$/;"	v
file_hint_raw	./src/file_raw.c	/^const file_hint_t file_hint_raw= {$/;"	v
file_hint_rdc	./src/file_rdc.c	/^const file_hint_t file_hint_rdc= {$/;"	v
file_hint_reg	./src/file_reg.c	/^const file_hint_t file_hint_reg= {$/;"	v
file_hint_res	./src/file_res.c	/^const file_hint_t file_hint_res= {$/;"	v
file_hint_rfp	./src/file_rfp.c	/^const file_hint_t file_hint_rfp= {$/;"	v
file_hint_riff	./src/file_riff.c	/^const file_hint_t file_hint_riff= {$/;"	v
file_hint_rlv	./src/file_rlv.c	/^const file_hint_t file_hint_rlv= {$/;"	v
file_hint_rm	./src/file_rm.c	/^const file_hint_t file_hint_rm= {$/;"	v
file_hint_rns	./src/file_rns.c	/^const file_hint_t file_hint_rns= {$/;"	v
file_hint_rpm	./src/file_rpm.c	/^const file_hint_t file_hint_rpm= {$/;"	v
file_hint_rw2	./src/file_rw2.c	/^const file_hint_t file_hint_rw2= {$/;"	v
file_hint_rx2	./src/file_rx2.c	/^const file_hint_t file_hint_rx2= {$/;"	v
file_hint_save	./src/file_save.c	/^const file_hint_t file_hint_save= {$/;"	v
file_hint_ses	./src/file_ses.c	/^const file_hint_t file_hint_ses= {$/;"	v
file_hint_shn	./src/file_shn.c	/^const file_hint_t file_hint_shn= {$/;"	v
file_hint_sib	./src/file_sib.c	/^const file_hint_t file_hint_sib= {$/;"	v
file_hint_sig	./src/file_sig.c	/^const file_hint_t file_hint_sig= {$/;"	v
file_hint_sit	./src/file_sit.c	/^const file_hint_t file_hint_sit= {$/;"	v
file_hint_skd	./src/file_skd.c	/^const file_hint_t file_hint_skd= {$/;"	v
file_hint_skp	./src/file_skp.c	/^const file_hint_t file_hint_skp= {$/;"	v
file_hint_sp3	./src/file_sp3.c	/^const file_hint_t file_hint_sp3= {$/;"	v
file_hint_spe	./src/file_spe.c	/^const file_hint_t file_hint_spe= {$/;"	v
file_hint_spf	./src/file_spf.c	/^const file_hint_t file_hint_spf= {$/;"	v
file_hint_spss	./src/file_spss.c	/^const file_hint_t file_hint_spss= {$/;"	v
file_hint_sqlite	./src/file_sql.c	/^const file_hint_t file_hint_sqlite= {$/;"	v
file_hint_sqm	./src/file_sqm.c	/^const file_hint_t file_hint_sqm= {$/;"	v
file_hint_stl	./src/file_stl.c	/^const file_hint_t file_hint_stl= {$/;"	v
file_hint_struct	./src/filegen.h	/^struct file_hint_struct$/;"	s
file_hint_stuffit	./src/file_stu.c	/^const file_hint_t file_hint_stuffit= {$/;"	v
file_hint_swf	./src/file_swf.c	/^const file_hint_t file_hint_swf= {$/;"	v
file_hint_t	./src/filegen.h	/^typedef struct file_hint_struct file_hint_t;$/;"	t	typeref:struct:file_hint_struct
file_hint_tar	./src/file_tar.c	/^const file_hint_t file_hint_tar= {$/;"	v
file_hint_tax	./src/file_tax.c	/^const file_hint_t file_hint_tax= {$/;"	v
file_hint_tib	./src/file_tib.c	/^const file_hint_t file_hint_tib= {$/;"	v
file_hint_tiff	./src/file_tiff.c	/^const file_hint_t file_hint_tiff= {$/;"	v
file_hint_tivo	./src/file_tivo.c	/^const file_hint_t file_hint_tivo= {$/;"	v
file_hint_torrent	./src/file_torrent.c	/^const file_hint_t file_hint_torrent= {$/;"	v
file_hint_tph	./src/file_tph.c	/^const file_hint_t file_hint_tph= {$/;"	v
file_hint_tpl	./src/file_tpl.c	/^const file_hint_t file_hint_tpl= {$/;"	v
file_hint_ts	./src/file_m2ts.c	/^const file_hint_t file_hint_ts= {$/;"	v
file_hint_ttf	./src/file_ttf.c	/^const file_hint_t file_hint_ttf= {$/;"	v
file_hint_txt	./src/file_txt.c	/^const file_hint_t file_hint_txt= {$/;"	v
file_hint_tz	./src/file_tz.c	/^const file_hint_t file_hint_tz= {$/;"	v
file_hint_v2i	./src/file_v2i.c	/^const file_hint_t file_hint_v2i= {$/;"	v
file_hint_vault	./src/file_vault.c	/^const file_hint_t file_hint_vault= {$/;"	v
file_hint_vdi	./src/file_vdi.c	/^const file_hint_t file_hint_vdi= {$/;"	v
file_hint_veg	./src/file_veg.c	/^const file_hint_t file_hint_veg= {$/;"	v
file_hint_vfb	./src/file_vfb.c	/^const file_hint_t file_hint_vfb= {$/;"	v
file_hint_vmdk	./src/file_vmdk.c	/^const file_hint_t file_hint_vmdk= {$/;"	v
file_hint_vmg	./src/file_vmg.c	/^const file_hint_t file_hint_vmg= {$/;"	v
file_hint_wallet	./src/file_wallet.c	/^const file_hint_t file_hint_wallet= {$/;"	v
file_hint_wdp	./src/file_wdp.c	/^const file_hint_t file_hint_wdp= {$/;"	v
file_hint_wim	./src/file_wim.c	/^const file_hint_t file_hint_wim= {$/;"	v
file_hint_win	./src/file_win.c	/^const file_hint_t file_hint_win= {$/;"	v
file_hint_wks	./src/file_wks.c	/^const file_hint_t file_hint_wks= {$/;"	v
file_hint_wmf	./src/file_wmf.c	/^const file_hint_t file_hint_wmf= {$/;"	v
file_hint_wnk	./src/file_wnk.c	/^const file_hint_t file_hint_wnk= {$/;"	v
file_hint_woff	./src/file_woff.c	/^const file_hint_t file_hint_woff= {$/;"	v
file_hint_wpb	./src/file_wpb.c	/^const file_hint_t file_hint_wpb= {$/;"	v
file_hint_wpd	./src/file_wpd.c	/^const file_hint_t file_hint_wpd= {$/;"	v
file_hint_wtv	./src/file_wtv.c	/^const file_hint_t file_hint_wtv= {$/;"	v
file_hint_wv	./src/file_wv.c	/^const file_hint_t file_hint_wv= {$/;"	v
file_hint_x3f	./src/file_x3f.c	/^const file_hint_t file_hint_x3f= {$/;"	v
file_hint_xcf	./src/file_xcf.c	/^const file_hint_t file_hint_xcf= {$/;"	v
file_hint_xfi	./src/file_xfi.c	/^const file_hint_t file_hint_xfi= {$/;"	v
file_hint_xm	./src/file_xm.c	/^const file_hint_t file_hint_xm= {$/;"	v
file_hint_xpt	./src/file_xpt.c	/^const file_hint_t file_hint_xpt= {$/;"	v
file_hint_xsv	./src/file_xsv.c	/^const file_hint_t file_hint_xsv= {$/;"	v
file_hint_xv	./src/file_xv.c	/^const file_hint_t file_hint_xv= {$/;"	v
file_hint_xz	./src/file_xz.c	/^const file_hint_t file_hint_xz= {$/;"	v
file_hint_z2d	./src/file_z2d.c	/^const file_hint_t file_hint_z2d= {$/;"	v
file_hint_zip	./src/file_zip.c	/^const file_hint_t file_hint_zip= {$/;"	v
file_id	./src/file_asf.c	/^  unsigned char file_id[16];$/;"	m	struct:asf_file_prop_s	file:
file_identify	./src/fidentify.c	/^static int file_identify(const char *filename, const unsigned int check)$/;"	f	file:
file_identify_dir	./src/fidentify.c	/^static void file_identify_dir(const char *current_dir, const unsigned int check)$/;"	f	file:
file_info_t	./src/dir.h	/^} file_info_t;$/;"	t	typeref:struct:__anon50
file_len	./src/rfs_dir.c	/^static blk_t   file_len(dal_t *dal) {$/;"	f	file:
file_length	./src/file_lnk.c	/^  uint32_t file_length; 	\/* 34h *\/$/;"	m	struct:lnk_header_s	file:
file_length	./src/file_xpt.c	/^  uint32_t                 file_length;$/;"	m	struct:TypeLibHeader	file:
file_name	./src/ewf.c	/^  char *file_name;$/;"	m	struct:info_fewf_struct	file:
file_name	./src/file_dpx.c	/^  char 		file_name[100];   \/* image file name *\/$/;"	m	struct:header_dpx	file:
file_name	./src/hdaccess.c	/^  char file_name[DISKNAME_MAX];$/;"	m	struct:info_file_struct	file:
file_name	./src/ntfs.h	/^\/* 42*\/	char *file_name[0];			\/* File name in Unicode. *\/$/;"	m	struct:__anon23
file_name	./src/win32.c	/^  char file_name[DISKNAME_MAX];$/;"	m	struct:info_file_win32_struct	file:
file_name_length	./src/ntfs.h	/^\/* 40*\/	uint8_t file_name_length;			\/* Length of file name in$/;"	m	struct:__anon23
file_name_type	./src/ntfs.h	/^\/* 41*\/	uint8_t file_name_type;	\/* Namespace of the file name.*\/$/;"	m	struct:__anon23
file_nbr	./src/photorec.h	/^  unsigned int file_nbr;$/;"	m	struct:ph_param
file_nopwrite	./src/hdaccess.c	/^static int file_nopwrite(disk_t *disk_car, const void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
file_offset_end	./src/file_sp3.c	/^static uint64_t file_offset_end(uint64_t offset, uint64_t len)$/;"	f	file:
file_offset_end	./src/photorec.c	/^static uint64_t file_offset_end(const file_recovery_t *file_recovery)$/;"	f	file:
file_options_load	./src/phcfg.c	/^int file_options_load(file_enable_t *files_enable)$/;"	f
file_options_load_aux	./src/phcfg.c	/^static FILE *file_options_load_aux(void)$/;"	f	file:
file_options_save	./src/phcfg.c	/^int file_options_save(const file_enable_t *files_enable)$/;"	f
file_options_save_aux	./src/phcfg.c	/^static FILE *file_options_save_aux(void)$/;"	f	file:
file_pread	./src/hdaccess.c	/^static int file_pread(disk_t *disk_car, void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
file_pread_aux	./src/hdaccess.c	/^static int file_pread_aux(disk_t *disk, void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
file_pwrite	./src/hdaccess.c	/^static int file_pwrite(disk_t *disk_car, const void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
file_pwrite_aux	./src/hdaccess.c	/^static int file_pwrite_aux(disk_t *disk_car, const void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
file_read	./src/rfs_dir.c	/^static int file_read(dal_t *dal, void *buff, blk_t block, blk_t count) {$/;"	f	file:
file_recovery_cpy	./src/phbf.c	/^static inline void file_recovery_cpy(file_recovery_t *dst, file_recovery_t *src)$/;"	f	file:
file_recovery_cpy	./src/phbs.c	/^static inline void file_recovery_cpy(file_recovery_t *dst, file_recovery_t *src)$/;"	f	file:
file_recovery_cpy	./src/psearch.h	/^static inline void file_recovery_cpy(file_recovery_t *dst, file_recovery_t *src)$/;"	f
file_recovery_struct	./src/filegen.h	/^struct file_recovery_struct$/;"	s
file_recovery_t	./src/filegen.h	/^typedef struct file_recovery_struct file_recovery_t;$/;"	t	typeref:struct:file_recovery_struct
file_rename	./src/filegen.c	/^void file_rename(const char *old_filename, const void *buffer, const int buffer_size, const int offset, const char *new_ext, const int force_ext)$/;"	f
file_rename	./src/filegen.h	/^  void (*file_rename)(const char *old_filename);$/;"	m	struct:file_recovery_struct
file_rename_d2s	./src/file_d2s.c	/^static void file_rename_d2s(const char *old_filename)$/;"	f	file:
file_rename_doc	./src/file_doc.c	/^static void file_rename_doc(const char *old_filename)$/;"	f	file:
file_rename_exs	./src/file_exs.c	/^static void file_rename_exs(const char *old_filename)$/;"	f	file:
file_rename_ext	./src/file_ext.c	/^static void file_rename_ext(const char *old_filename)$/;"	f	file:
file_rename_extdir	./src/file_ext.c	/^static void file_rename_extdir(const char *old_filename)$/;"	f	file:
file_rename_fatdir	./src/file_dir.c	/^static void file_rename_fatdir(const char *old_filename)$/;"	f	file:
file_rename_gz	./src/file_gz.c	/^static void file_rename_gz(const char *old_filename)$/;"	f	file:
file_rename_level0	./src/file_lzh.c	/^static void file_rename_level0(const char *old_filename)$/;"	f	file:
file_rename_mft	./src/file_mft.c	/^static void file_rename_mft(const char *old_filename)$/;"	f	file:
file_rename_mov	./src/file_mov.c	/^static void file_rename_mov(const char *old_filename)$/;"	f	file:
file_rename_par2	./src/file_par2.c	/^static void file_rename_par2(const char *old_filename)$/;"	f	file:
file_rename_pdf	./src/file_pdf.c	/^static void file_rename_pdf(const char *old_filename)$/;"	f	file:
file_rename_pe_exe	./src/file_exe.c	/^static void file_rename_pe_exe(const char *old_filename)$/;"	f	file:
file_rename_pzh	./src/file_pzh.c	/^static void file_rename_pzh(const char *old_filename)$/;"	f	file:
file_rename_r3d	./src/file_r3d.c	/^static void file_rename_r3d(const char *old_filename)$/;"	f	file:
file_rename_rpm	./src/file_rpm.c	/^static void file_rename_rpm(const char *old_filename)$/;"	f	file:
file_rename_ts_188	./src/file_m2ts.c	/^static void file_rename_ts_188(const char *old_filename)$/;"	f	file:
file_rename_ts_192	./src/file_m2ts.c	/^static void file_rename_ts_192(const char *old_filename)$/;"	f	file:
file_rename_unicode	./src/filegen.c	/^void file_rename_unicode(const char *old_filename, const void *buffer, const int buffer_size, const int offset, const char *new_ext, const int force_ext)$/;"	f
file_rename_zip	./src/file_zip.c	/^static void file_rename_zip(const char *old_filename)$/;"	f	file:
file_rsearch	./src/filegen.c	/^uint64_t file_rsearch(FILE *handle, uint64_t offset, const void*footer, const unsigned int footer_length)$/;"	f
file_search_footer	./src/filegen.c	/^void file_search_footer(file_recovery_t *file_recovery, const void*footer, const unsigned int footer_length, const unsigned int extra_length)$/;"	f
file_sectors	./src/file_vmdk.c	/^  uint32_t file_sectors;$/;"	m	struct:__anon38	file:
file_select_cli	./src/phcli.c	/^static int file_select_cli(file_enable_t *files_enable, char**current_cmd)$/;"	f	file:
file_size	./src/file_asf.c	/^  uint64_t      file_size;$/;"	m	struct:asf_file_prop_s	file:
file_size	./src/file_dex.c	/^  uint32_t	file_size;$/;"	m	struct:dex_header	file:
file_size	./src/file_dpx.c	/^  uint32_t   	file_size;        \/* file size in bytes *\/$/;"	m	struct:header_dpx	file:
file_size	./src/file_jpg.c	/^  unsigned long int file_size;$/;"	m	struct:__anon60	file:
file_size	./src/filegen.h	/^  uint64_t file_size;$/;"	m	struct:file_recovery_struct
file_size_max	./src/file_jpg.c	/^  unsigned long int file_size_max;$/;"	m	struct:__anon60	file:
file_stat	./src/filegen.h	/^  file_stat_t *file_stat;$/;"	m	struct:__anon66
file_stat	./src/filegen.h	/^  file_stat_t *file_stat;$/;"	m	struct:__anon67
file_stat	./src/filegen.h	/^  file_stat_t *file_stat;$/;"	m	struct:file_recovery_struct
file_stat	./src/rfs_dir.c	/^static int file_stat(dal_t *dal,struct stat *st)$/;"	f	file:
file_stat	./src/rfs_dir.c	/^static unsigned int file_stat(dal_t *dal)$/;"	f	file:
file_stat_struct	./src/filegen.h	/^struct file_stat_struct$/;"	s
file_stat_t	./src/filegen.h	/^typedef struct file_stat_struct file_stat_t;$/;"	t	typeref:struct:file_stat_struct
file_stats	./src/photorec.h	/^  file_stat_t *file_stats;$/;"	m	struct:ph_param
file_structure_version	./src/iso9660.h	/^	char file_structure_version;$/;"	m	struct:iso_primary_descriptor
file_sync	./src/hdaccess.c	/^static int file_sync(disk_t *disk_car)$/;"	f	file:
file_sync	./src/rfs_dir.c	/^static int file_sync(dal_t *dal)$/;"	f	file:
file_test_availability	./src/hdaccess.c	/^disk_t *file_test_availability(const char *device, const int verbose, int testdisk_mode)$/;"	f
file_test_availability_win32	./src/win32.c	/^disk_t *file_test_availability_win32(const char *device, const int verbose, int testdisk_mode)$/;"	f
file_time	./src/file_lzh.c	/^  uint32_t file_time;$/;"	m	struct:lzh_level0	file:
file_time	./src/file_lzh.c	/^  uint32_t file_time;$/;"	m	struct:lzh_level1	file:
file_time_unix	./src/file_lzh.c	/^  uint32_t file_time_unix;$/;"	m	struct:lzh_level2	file:
file_type	./src/file_arj.c	/^  uint8_t	file_type;$/;"	m	struct:arj_main_header	file:
file_type	./src/file_reg.c	/^  uint32_t file_type;$/;"	m	struct:regf_file_header	file:
file_version	./src/file_rm.c	/^  uint32_t file_version;$/;"	m	struct:rm_header	file:
file_win32_clean	./src/win32.c	/^static void file_win32_clean(disk_t *disk)$/;"	f	file:
file_win32_compute_sector_size	./src/win32.c	/^static unsigned int file_win32_compute_sector_size(HANDLE handle)$/;"	f	file:
file_win32_description	./src/win32.c	/^static const char *file_win32_description(disk_t *disk_car)$/;"	f	file:
file_win32_description_short	./src/win32.c	/^static const char *file_win32_description_short(disk_t *disk_car)$/;"	f	file:
file_win32_disk_get_model	./src/hdwin32.c	/^void file_win32_disk_get_model(HANDLE handle, disk_t *dev, const int verbose)$/;"	f
file_win32_nopwrite	./src/win32.c	/^static int file_win32_nopwrite(disk_t *disk_car, const void *buf, const unsigned int count,  const uint64_t offset)$/;"	f	file:
file_win32_pread	./src/win32.c	/^static int file_win32_pread(disk_t *disk_car, void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
file_win32_pread_aux	./src/win32.c	/^static int file_win32_pread_aux(disk_t *disk_car, void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
file_win32_pwrite	./src/win32.c	/^static int file_win32_pwrite(disk_t *disk_car, const void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
file_win32_pwrite_aux	./src/win32.c	/^static int file_win32_pwrite_aux(disk_t *disk_car, const void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
file_win32_sync	./src/win32.c	/^static int file_win32_sync(disk_t *disk_car)$/;"	f	file:
file_write	./src/rfs_dir.c	/^static int file_write(dal_t *dal, void *buff, blk_t block, blk_t count)$/;"	f	file:
filename	./src/file_arj.c	/^  char		filename;$/;"	m	struct:arj_main_header	file:
filename	./src/file_lzh.c	/^  uint8_t  filename[0];$/;"	m	struct:lzh_level0	file:
filename	./src/file_lzh.c	/^  uint8_t  filename[0];$/;"	m	struct:lzh_level1	file:
filename	./src/filegen.h	/^  char filename[2048];$/;"	m	struct:file_recovery_struct
filename	./src/ntfs_udl.c	/^struct filename {$/;"	s	file:
filename_convert	./src/dir.c	/^static unsigned int filename_convert(char *dst, const char*src, const unsigned int n)$/;"	f	file:
filename_len	./src/file_lzh.c	/^  uint8_t  filename_len;$/;"	m	struct:lzh_level0	file:
filename_len	./src/file_lzh.c	/^  uint8_t  filename_len;$/;"	m	struct:lzh_level1	file:
filename_length	./src/file_zip.c	/^  uint16_t filename_length;         \/** Filename length *\/$/;"	m	struct:zip_file_entry	file:
filename_to_directory	./src/intrfn.c	/^static char *filename_to_directory(const char *filename)$/;"	f	file:
files	./src/cramfs.h	/^	uint32_t files;$/;"	m	struct:cramfs_info
files_checksum	./src/file_cab.c	/^  uint32_t files_checksum;$/;"	m	struct:cab_header	file:
filesize	./src/file_cab.c	/^  uint32_t filesize;$/;"	m	struct:cab_header	file:
filesize	./src/file_pct.c	/^  uint16_t filesize;		\/* 0x00 *\/$/;"	m	struct:pct_file_entry	file:
filesize_in_page	./src/file_sql.c	/^ uint32_t filesize_in_page;$/;"	m	struct:db_header	file:
filesort	./src/dir.c	/^int filesort(const struct td_list_head *a, const struct td_list_head *b)$/;"	f
filespec_pos	./src/file_arj.c	/^  uint16_t	filespec_pos;$/;"	m	struct:arj_main_header	file:
filestatsWidget	./src/qphotorec.h	/^                QTableWidget 		*filestatsWidget;$/;"	m	class:QPhotorec
filevault_header	./src/file_filevault.c	/^static const unsigned char filevault_header[8]=  {$/;"	v	file:
filewin32_getfilesize	./src/win32.c	/^static uint64_t filewin32_getfilesize(HANDLE handle, const char *device)$/;"	f	file:
filewin32_setfilepointer	./src/win32.c	/^static uint64_t filewin32_setfilepointer(HANDLE handle, const char *device)$/;"	f	file:
filler	./src/file_vmdk.c	/^  char filler[1];$/;"	m	struct:__anon39	file:
filtre	./src/file_txt.c	/^static int filtre(unsigned int car)$/;"	f	file:
find_attribute	./src/ntfs_utl.c	/^ATTR_RECORD * find_attribute(const ATTR_TYPES type, ntfs_attr_search_ctx *ctx)$/;"	f
find_blocksize	./src/photorec.c	/^unsigned int find_blocksize(alloc_data_t *list_search_space, const unsigned int default_blocksize, uint64_t *offset)$/;"	f
find_dir_entries	./src/fat_adv.c	/^static int find_dir_entries(disk_t *disk_car,const partition_t *partition, const unsigned int offset,const int verbose)$/;"	f	file:
find_first_attribute	./src/ntfs_utl.c	/^ATTR_RECORD * find_first_attribute(const ATTR_TYPES type, MFT_RECORD *mft)$/;"	f
find_sectors_per_cluster	./src/fat_cluster.c	/^int find_sectors_per_cluster(disk_t *disk_car, partition_t *partition, const int verbose, const int dump_ind,const int interface, unsigned int *sectors_per_cluster, uint64_t *offset_org, const upart_type_t upart_type)$/;"	f
find_sectors_per_cluster_aux	./src/fat_cluster.c	/^int find_sectors_per_cluster_aux(const sector_cluster_t *sector_cluster, const unsigned int nbr_sector_cluster,unsigned int *sectors_per_cluster, uint64_t *offset, const int verbose, const unsigned long int part_size_in_sectors, const upart_type_t upart_type)$/;"	f
find_tag_from_tiff_header	./src/file_tiff.c	/^const char *find_tag_from_tiff_header(const TIFFHeader *tiff, const unsigned int tiff_size, const unsigned int tag, const char **potential_error)$/;"	f
find_tag_from_tiff_header_be	./src/file_tiff.c	/^static const char *find_tag_from_tiff_header_be(const TIFFHeader *tiff, const unsigned int tiff_size, const unsigned int tag, const char**potential_error)$/;"	f	file:
find_tag_from_tiff_header_le	./src/file_tiff.c	/^static const char *find_tag_from_tiff_header_le(const TIFFHeader *tiff, const unsigned int tiff_size, const unsigned int tag, const char**potential_error)$/;"	f	file:
finder_info	./src/hfsp.h	/^        char          finder_info[32];                                      $/;"	m	struct:hfsp_vh
first_cluster	./src/exfat.h	/^  uint32_t first_cluster;$/;"	m	struct:exfat_alloc_bitmap_entry
first_cluster	./src/exfat.h	/^  uint32_t first_cluster;$/;"	m	struct:exfat_stream_ext_entry
first_filename	./src/file_zip.c	/^static char first_filename[256];$/;"	v	file:
first_free_id	./src/file_reg.c	/^  uint16_t first_free_id;$/;"	m	struct:rgdb_block	file:
first_freelist_page	./src/file_sql.c	/^ uint32_t first_freelist_page;$/;"	m	struct:db_header	file:
first_header_size	./src/file_arj.c	/^  uint8_t	first_header_size;$/;"	m	struct:arj_main_header	file:
first_sol	./src/fat_cluster.h	/^  unsigned int  first_sol;$/;"	m	struct:cluster_offset_struct
first_undef_row	./src/suspend.c	/^  JDIMENSION first_undef_row;	\/* row # of first uninitialized row *\/$/;"	m	struct:jvirt_barray_control	file:
first_undef_row	./src/suspend.c	/^  JDIMENSION first_undef_row;	\/* row # of first uninitialized row *\/$/;"	m	struct:jvirt_sarray_control	file:
fits_get_val	./src/file_fits.c	/^static uint64_t fits_get_val(const unsigned char *str)$/;"	f	file:
fits_info	./src/file_fits.c	/^static uint64_t fits_info(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery, unsigned int *i_pointer)$/;"	f	file:
fla	./src/file_bkf.c	/^  uint64_t	fla;		\/* format logical address *\/$/;"	m	struct:mtf_db_hdr	file:
flags	./src/bfs.h	/^    uint32_t        flags;                 \/* 0x54 if it's clean, etc *\/$/;"	m	struct:disk_super_block
flags	./src/btrfs.h	/^	uint64_t flags;$/;"	m	struct:btrfs_super_block
flags	./src/cramfs.h	/^	uint32_t flags;			\/* feature flags *\/$/;"	m	struct:cramfs_super
flags	./src/ext2_inc.h	/^	int flags;$/;"	m	struct:ext2_dir_struct
flags	./src/fat.h	/^	uint16_t	flags;		\/* 0x28 bit 8: fat mirroring, low 4: active fat *\/$/;"	m	struct:fat_boot_sector
flags	./src/file_ace.c	/^  uint16_t flags;      \/** flags related to the block and its content$/;"	m	struct:header_ace	file:
flags	./src/file_arj.c	/^  uint8_t	flags;$/;"	m	struct:arj_main_header	file:
flags	./src/file_cab.c	/^  uint16_t flags;$/;"	m	struct:cab_header	file:
flags	./src/file_ecryptfs.c	/^  uint32_t flags;$/;"	m	struct:ecrypfs_header	file:
flags	./src/file_gz.c	/^  uint8_t  flags;$/;"	m	struct:gzip_header	file:
flags	./src/file_jpg.c	/^  unsigned int flags;$/;"	m	struct:jpeg_session_struct	file:
flags	./src/file_lnk.c	/^  uint32_t flags; 		\/* 14h  *\/$/;"	m	struct:lnk_header_s	file:
flags	./src/file_reg.c	/^  uint16_t flags;$/;"	m	struct:creg_file_header	file:
flags	./src/file_reg.c	/^  uint16_t flags;$/;"	m	struct:rgdb_block	file:
flags	./src/file_vmdk.c	/^  uint32_t flags;$/;"	m	struct:__anon38	file:
flags	./src/file_vmdk.c	/^  uint32_t flags;$/;"	m	struct:__anon39	file:
flags	./src/file_wim.c	/^    uint64_t flags;	\/* one byte is a combination of RESHDR_FLAG_XXX *\/$/;"	m	union:reshdr_disk_short::__anon15	file:
flags	./src/file_wv.c	/^    uint32_t flags;             \/\/ various flags for id and decoding$/;"	m	struct:__anon47	file:
flags	./src/filegen.h	/^  unsigned int flags;$/;"	m	struct:file_recovery_struct
flags	./src/ntfs.h	/^  uint16_t	flags;$/;"	m	struct:ntfs_mft_record
flags	./src/ntfs.h	/^  uint16_t flags;               \/* Flags *\/$/;"	m	struct:_ntfs_attribheader
flags	./src/ntfs_udl.c	/^	FILE_ATTR_FLAGS	 flags;$/;"	m	struct:filename	file:
flags	./src/rfs_dir.c	/^	int flags;$/;"	m	struct:rfs_dir_struct	file:
flags	./src/sun.h	/^    uint16_t flags;$/;"	m	struct:struct_sun_partition_i386::sun_info_i386
flags	./src/sun.h	/^    unsigned char flags;$/;"	m	struct:__anon8::sun_info
flatFieldApplied	./src/file_spe.c	/^  int16_t           flatFieldApplied;  \/*  706  Set to 1 if flat field was applied *\/$/;"	m	struct:header_spe	file:
flavor	./src/file_woff.c	/^  uint32_t	flavor;$/;"	m	struct:WOFFHeader	file:
fld_checksum	./src/file_cab.c	/^  uint32_t fld_checksum;$/;"	m	struct:cab_header	file:
flp_header	./src/file_flp.c	/^struct flp_header$/;"	s	file:
flv_header	./src/file_flv.c	/^struct flv_header$/;"	s	file:
flv_tag	./src/file_flv.c	/^struct flv_tag$/;"	s	file:
fn	./src/file_mig.c	/^  unsigned char fn[0];$/;"	m	struct:MIG_HDR	file:
fn_size	./src/file_mig.c	/^  uint32_t fn_size;$/;"	m	struct:MIG_HDR	file:
folder_count	./src/hfsp.h	/^        uint32_t         folder_count; \/\/ 24 excluding the root folder$/;"	m	struct:hfsp_vh
folder_txt	./src/qphotorec.h	/^		QLabel			*folder_txt;$/;"	m	class:QPhotorec
fopen_local	./src/dir.c	/^FILE *fopen_local(char **localfilename, const char *localroot, const char *filename)$/;"	f
fopen_with_retry	./src/psearchn.c	/^static FILE *fopen_with_retry(const char *path, const char *mode)$/;"	f	file:
forget	./src/photorec.c	/^void forget(alloc_data_t *list_search_space, alloc_data_t *current_search_space)$/;"	f
formType	./src/file_aif.c	/^  char formType[4];$/;"	m	struct:aif_header	file:
format	./src/file_flp.c	/^  uint16_t format;$/;"	m	struct:flp_header	file:
format	./src/file_mid.c	/^  uint16_t format;$/;"	m	struct:midi_header	file:
format40_super	./src/rfs.h	/^struct format40_super {$/;"	s
formats	./src/qphotorec.h	/^		QListWidget		*formats;$/;"	m	class:QPhotorec
fourcc	./src/file_mrw.c	/^  uint32_t fourcc;$/;"	m	struct:hdr	file:
fp5_header	./src/file_fp5.c	/^static const unsigned char fp5_header[0x10]= {$/;"	v	file:
fp7_header	./src/file_fp7.c	/^static const unsigned char fp7_header[0x14]= {$/;"	v	file:
frame	./src/file_jpg.c	/^  unsigned char *frame;$/;"	m	struct:jpeg_session_struct	file:
frame_size	./src/file_ra.c	/^  uint16_t frame_size;$/;"	m	struct:ra4_header	file:
free_blocks	./src/hfsp.h	/^        uint32_t         free_blocks;	\/\/ 30$/;"	m	struct:hfsp_vh
free_dos_buffer	./src/msdos.c	/^static void free_dos_buffer(void)$/;"	f	file:
free_file	./src/ntfs_udl.c	/^static void free_file(struct ufile *file)$/;"	f	file:
free_header_check	./src/filegen.c	/^void free_header_check(void)$/;"	f
free_list_allocation_end	./src/photorec.c	/^uint64_t free_list_allocation_end=0;$/;"	v
free_list_search_space	./src/photorec.c	/^void free_list_search_space(alloc_data_t *list_search_space)$/;"	f
free_offset	./src/file_reg.c	/^  uint32_t free_offset;	\/* -1 if there is no free space *\/$/;"	m	struct:rgdb_block	file:
free_pool	./src/suspend.c	/^METHODDEF(void) free_pool (j_common_ptr cinfo, int pool_id) {$/;"	f
free_search_space	./src/photorec.c	/^void free_search_space(alloc_data_t *list_search_space)$/;"	f
freecnt	./src/fat.h	/^  uint32_t freecnt;     	\/* free clusters 0xfffffffff if unknown *\/$/;"	m	struct:fat_fsinfo
freelist_pages	./src/file_sql.c	/^ uint32_t freelist_pages;$/;"	m	struct:db_header	file:
freeway_header	./src/file_freeway.c	/^static const unsigned char freeway_header[0x10]=  {$/;"	v	file:
fs_44	./src/ufs.h	/^		} fs_44;$/;"	m	union:ufs_super_block::__anon31	typeref:struct:ufs_super_block::__anon31::__anon34
fs_active	./src/ufs.h	/^	uint32_t   fs_active;\/* used by snapshots to track fs *\/$/;"	m	struct:fs_u11_u2_st
fs_bmask	./src/ufs.h	/^	uint32_t	fs_bmask;	\/* ``blkoff'' calc of blk offsets *\/$/;"	m	struct:ufs_super_block
fs_bshift	./src/ufs.h	/^	uint32_t	fs_bshift;	\/* ``lblkno'' calc of logical blkno *\/$/;"	m	struct:ufs_super_block
fs_bsize	./src/ufs.h	/^	uint32_t	fs_bsize;	\/* size of basic blocks in fs *\/$/;"	m	struct:ufs_super_block
fs_byte_order	./src/bfs.h	/^    uint32_t        fs_byte_order;         \/* 0x24 *\/$/;"	m	struct:disk_super_block
fs_cblkno	./src/ufs.h	/^	uint32_t	fs_cblkno;	\/* offset of cyl-block in filesys *\/$/;"	m	struct:ufs_super_block
fs_cgmask	./src/ufs.h	/^	uint32_t	fs_cgmask;	\/* used to calc mod fs_ntrak *\/$/;"	m	struct:ufs_super_block
fs_cgoffset	./src/ufs.h	/^	uint32_t	fs_cgoffset;	\/* cylinder group offset in cylinder *\/$/;"	m	struct:ufs_super_block
fs_cgrotor	./src/ufs.h	/^	uint32_t   fs_cgrotor;     \/* last cg searched *\/$/;"	m	struct:fs_u11_u2_st
fs_cgrotor	./src/ufs.h	/^  uint32_t	fs_cgrotor;	\/* last cg searched *\/$/;"	m	struct:fs_u11_u1_st
fs_cgsize	./src/ufs.h	/^	uint32_t	fs_cgsize;	\/* cylinder group size *\/$/;"	m	struct:ufs_super_block
fs_clean	./src/ufs.h	/^	int8_t	fs_clean;	\/* file system is clean flag *\/$/;"	m	struct:ufs_super_block
fs_contigdirs	./src/ufs.h	/^	uint32_t   fs_contigdirs;\/*# of contiguously allocated dirs *\/$/;"	m	struct:fs_u11_u2_st
fs_contigsumsize	./src/ufs.h	/^			uint32_t	fs_contigsumsize;\/* size of cluster summary array *\/$/;"	m	struct:ufs_super_block::__anon31::__anon34
fs_cpc	./src/ufs.h	/^  uint32_t	fs_cpc;		\/* cyl per cycle in postbl *\/$/;"	m	struct:fs_u11_u1_st
fs_cpg	./src/ufs.h	/^	uint32_t	fs_cpg;		\/* cylinders per group *\/$/;"	m	struct:ufs_super_block
fs_csaddr	./src/ufs.h	/^	uint32_t	fs_csaddr;	\/* blk addr of cyl grp summary area *\/$/;"	m	struct:ufs_super_block
fs_csaddr	./src/ufs.h	/^	uint64_t   fs_csaddr;	\/* blk addr of cyl grp summary area *\/$/;"	m	struct:fs_u11_u2_st
fs_csmask	./src/ufs.h	/^	uint32_t	fs_csmask;	\/* csum block offset *\/$/;"	m	struct:ufs_super_block
fs_csp	./src/ufs.h	/^	uint32_t   fs_csp;	\/* cg summary info buffer for fs_cs *\/$/;"	m	struct:fs_u11_u2_st
fs_csp	./src/ufs.h	/^  uint32_t	fs_csp[UFS_MAXCSBUFS];\/*list of fs_cs info buffers *\/$/;"	m	struct:fs_u11_u1_st
fs_csshift	./src/ufs.h	/^	uint32_t	fs_csshift;	\/* csum block number *\/$/;"	m	struct:ufs_super_block
fs_cssize	./src/ufs.h	/^	uint32_t	fs_cssize;	\/* size of cyl grp summary area *\/$/;"	m	struct:ufs_super_block
fs_cstotal	./src/ufs.h	/^	struct  ufs2_csum_total fs_cstotal;\/*cylinder summary information*\/$/;"	m	struct:fs_u11_u2_st	typeref:struct:fs_u11_u2_st::ufs2_csum_total
fs_cstotal	./src/ufs.h	/^	struct ufs_csum fs_cstotal;	\/* cylinder summary information *\/$/;"	m	struct:ufs_super_block	typeref:struct:ufs_super_block::ufs_csum
fs_dblkno	./src/ufs.h	/^	uint32_t	fs_dblkno;	\/* offset of first data after cg *\/$/;"	m	struct:ufs_super_block
fs_dsize	./src/ufs.h	/^	uint32_t	fs_dsize;	\/* number of data blocks in fs *\/$/;"	m	struct:ufs_super_block
fs_dsize	./src/ufs.h	/^	uint64_t    fs_dsize;	\/* number of data blocks in fs *\/$/;"	m	struct:fs_u11_u2_st
fs_flags	./src/ufs.h	/^	int8_t	fs_flags;	\/* currently unused flag *\/$/;"	m	struct:ufs_super_block
fs_fmask	./src/ufs.h	/^	uint32_t	fs_fmask;	\/* ``fragoff'' calc of frag offsets *\/$/;"	m	struct:ufs_super_block
fs_fmod	./src/ufs.h	/^	int8_t	fs_fmod;	\/* super block modified flag *\/$/;"	m	struct:ufs_super_block
fs_fpg	./src/ufs.h	/^	uint32_t	fs_fpg;		\/* blocks per group * fs_frag *\/$/;"	m	struct:ufs_super_block
fs_frag	./src/ufs.h	/^	uint32_t	fs_frag;	\/* number of frags in a block in fs *\/$/;"	m	struct:ufs_super_block
fs_fragshift	./src/ufs.h	/^	uint32_t	fs_fragshift;	\/* block to frag shift *\/$/;"	m	struct:ufs_super_block
fs_fsbtodb	./src/ufs.h	/^	uint32_t	fs_fsbtodb;	\/* fsbtodb and dbtofsb shift constant *\/$/;"	m	struct:ufs_super_block
fs_fshift	./src/ufs.h	/^	uint32_t	fs_fshift;	\/* ``numfrags'' calc number of frags *\/$/;"	m	struct:ufs_super_block
fs_fsize	./src/ufs.h	/^	uint32_t	fs_fsize;	\/* size of frag blocks in fs *\/$/;"	m	struct:ufs_super_block
fs_fsmnt	./src/ufs.h	/^	int8_t  fs_fsmnt[UFS2_MAXMNTLEN];	\/* name mounted on *\/$/;"	m	struct:fs_u11_u2_st
fs_fsmnt	./src/ufs.h	/^  int8_t	fs_fsmnt[UFS_MAXMNTLEN];\/* name mounted on *\/$/;"	m	struct:fs_u11_u1_st
fs_iblkno	./src/ufs.h	/^	uint32_t	fs_iblkno;	\/* offset of inode-blocks in filesys *\/$/;"	m	struct:ufs_super_block
fs_id	./src/ufs.h	/^	uint32_t	fs_id[2];	\/* file system id *\/$/;"	m	struct:ufs_super_block
fs_inodefmt	./src/ufs.h	/^			uint32_t	fs_inodefmt;	\/* format of on-disk inodes *\/$/;"	m	struct:ufs_super_block::__anon31::__anon34
fs_inopb	./src/ufs.h	/^	uint32_t	fs_inopb;	\/* value of INOPB *\/$/;"	m	struct:ufs_super_block
fs_interleave	./src/ufs.h	/^	uint32_t	fs_interleave;	\/* hardware sector interleave *\/$/;"	m	struct:ufs_super_block
fs_ipg	./src/ufs.h	/^	uint32_t	fs_ipg;		\/* inodes per cylinder group *\/$/;"	m	struct:ufs_super_block
fs_link	./src/ufs.h	/^	uint32_t	fs_link;	\/* UNUSED *\/$/;"	m	struct:ufs_super_block
fs_magic	./src/ufs.h	/^	uint32_t	fs_magic;		\/* magic number *\/$/;"	m	struct:ufs_super_block
fs_maxbpg	./src/ufs.h	/^	uint32_t	fs_maxbpg;	\/* max number of blks per cyl group *\/$/;"	m	struct:ufs_super_block
fs_maxbsize	./src/ufs.h	/^	uint32_t   fs_maxbsize;\/*maximum blocking factor permitted *\/$/;"	m	struct:fs_u11_u2_st
fs_maxcluster	./src/ufs.h	/^	uint32_t   fs_maxcluster;$/;"	m	struct:fs_u11_u2_st
fs_maxcluster	./src/ufs.h	/^  uint32_t	fs_maxcluster;$/;"	m	struct:fs_u11_u1_st
fs_maxcontig	./src/ufs.h	/^	uint32_t	fs_maxcontig;	\/* max number of contiguous blks *\/$/;"	m	struct:ufs_super_block
fs_maxfilesize	./src/ufs.h	/^			uint32_t	fs_maxfilesize[2];	\/* max representable file size *\/$/;"	m	struct:ufs_super_block::__anon31::__anon34
fs_maxsymlinklen	./src/ufs.h	/^			uint32_t	fs_maxsymlinklen;\/* max length of an internal symlink *\/$/;"	m	struct:ufs_super_block::__anon31::__anon34
fs_minfree	./src/ufs.h	/^	uint32_t	fs_minfree;	\/* minimum percentage of free blocks *\/$/;"	m	struct:ufs_super_block
fs_ncg	./src/ufs.h	/^	uint32_t	fs_ncg;		\/* number of cylinder groups *\/$/;"	m	struct:ufs_super_block
fs_ncyl	./src/ufs.h	/^	uint32_t	fs_ncyl;	\/* cylinders in file system *\/$/;"	m	struct:ufs_super_block
fs_nindir	./src/ufs.h	/^	uint32_t	fs_nindir;	\/* value of NINDIR *\/$/;"	m	struct:ufs_super_block
fs_npsect	./src/ufs.h	/^			uint32_t	fs_npsect;	\/* # sectors\/track including spares *\/$/;"	m	struct:ufs_super_block::__anon27::__anon28
fs_npsect	./src/ufs.h	/^			uint32_t	fs_npsect;	\/* # sectors\/track including spares *\/$/;"	m	struct:ufs_super_block::__anon31::__anon33
fs_nrpos	./src/ufs.h	/^	uint32_t	fs_nrpos;		\/* number of rotational positions *\/$/;"	m	struct:ufs_super_block
fs_nsect	./src/ufs.h	/^	uint32_t	fs_nsect;	\/* sectors per track *\/$/;"	m	struct:ufs_super_block
fs_nspf	./src/ufs.h	/^	uint32_t	fs_nspf;	\/* value of NSPF *\/$/;"	m	struct:ufs_super_block
fs_ntrak	./src/ufs.h	/^	uint32_t	fs_ntrak;	\/* tracks per cylinder *\/$/;"	m	struct:ufs_super_block
fs_ocsp	./src/ufs.h	/^	uint32_t   fs_ocsp[UFS2_NOCSPTRS]; \/*list of fs_cs info buffers *\/$/;"	m	struct:fs_u11_u2_st
fs_old_cpc	./src/ufs.h	/^	uint32_t   fs_old_cpc;	\/* cyl per cycle in postbl *\/$/;"	m	struct:fs_u11_u2_st
fs_opostbl	./src/ufs.h	/^  uint16_t	fs_opostbl[16][8]; \/* old rotation block list head *\/$/;"	m	struct:fs_u11_u1_st
fs_optim	./src/ufs.h	/^	uint32_t	fs_optim;	\/* optimization preference, see below *\/$/;"	m	struct:ufs_super_block
fs_pad	./src/ufs.h	/^	uint32_t  fs_pad;	\/* due to alignment of fs_swuid *\/$/;"	m	struct:fs_u11_u2_st
fs_pendingblocks	./src/ufs.h	/^	uint64_t    fs_pendingblocks;\/* blocks in process of being freed *\/$/;"	m	struct:fs_u11_u2_st
fs_pendinginodes	./src/ufs.h	/^	uint32_t    fs_pendinginodes;\/*inodes in process of being freed *\/$/;"	m	struct:fs_u11_u2_st
fs_postblformat	./src/ufs.h	/^	uint32_t	fs_postblformat;	\/* format of positional layout tables *\/$/;"	m	struct:ufs_super_block
fs_postbloff	./src/ufs.h	/^	uint32_t	fs_postbloff;		\/* (__s16) rotation block list head *\/$/;"	m	struct:ufs_super_block
fs_qbmask	./src/ufs.h	/^			uint32_t	fs_qbmask[2];	\/* ~usb_bmask *\/$/;"	m	struct:ufs_super_block::__anon31::__anon32
fs_qbmask	./src/ufs.h	/^			uint32_t	fs_qbmask[2];	\/* ~usb_bmask *\/$/;"	m	struct:ufs_super_block::__anon31::__anon33
fs_qbmask	./src/ufs.h	/^			uint32_t	fs_qbmask[2];	\/* ~usb_bmask *\/$/;"	m	struct:ufs_super_block::__anon31::__anon34
fs_qfmask	./src/ufs.h	/^			uint32_t	fs_qfmask[2];	\/* ~usb_fmask *\/$/;"	m	struct:ufs_super_block::__anon31::__anon32
fs_qfmask	./src/ufs.h	/^			uint32_t	fs_qfmask[2];	\/* ~usb_fmask *\/$/;"	m	struct:ufs_super_block::__anon31::__anon33
fs_qfmask	./src/ufs.h	/^			uint32_t	fs_qfmask[2];	\/* ~usb_fmask *\/$/;"	m	struct:ufs_super_block::__anon31::__anon34
fs_reclaim	./src/ufs.h	/^			uint32_t	fs_reclaim;$/;"	m	struct:ufs_super_block::__anon31::__anon32
fs_reclaim	./src/ufs.h	/^			uint32_t	fs_reclaim;$/;"	m	struct:ufs_super_block::__anon31::__anon33
fs_rlink	./src/ufs.h	/^	uint32_t	fs_rlink;	\/* UNUSED *\/$/;"	m	struct:ufs_super_block
fs_ronly	./src/ufs.h	/^	int8_t	fs_ronly;	\/* mounted read-only flag *\/$/;"	m	struct:ufs_super_block
fs_rotbloff	./src/ufs.h	/^	uint32_t	fs_rotbloff;		\/* (uint8_t) blocks for each rotation *\/$/;"	m	struct:ufs_super_block
fs_rotdelay	./src/ufs.h	/^	uint32_t	fs_rotdelay;	\/* num of ms for optimal next block *\/$/;"	m	struct:ufs_super_block
fs_rps	./src/ufs.h	/^	uint32_t	fs_rps;		\/* disk revolutions per second *\/$/;"	m	struct:ufs_super_block
fs_sblkno	./src/ufs.h	/^	uint32_t	fs_sblkno;	\/* addr of super-block in filesys *\/$/;"	m	struct:ufs_super_block
fs_sblockloc	./src/ufs.h	/^	uint64_t   fs_sblockloc; \/* byte offset of standard superblock *\/$/;"	m	struct:fs_u11_u2_st
fs_sbsize	./src/ufs.h	/^	uint32_t	fs_sbsize;	\/* actual size of super block *\/$/;"	m	struct:ufs_super_block
fs_size	./src/ufs.h	/^	uint32_t	fs_size;	\/* number of blocks in fs *\/$/;"	m	struct:ufs_super_block
fs_size	./src/ufs.h	/^	uint64_t    fs_size;		\/* number of blocks in fs *\/$/;"	m	struct:fs_u11_u2_st
fs_space	./src/ufs.h	/^	uint8_t	fs_space[1];		\/* list of blocks for each rotation *\/$/;"	m	struct:ufs_super_block
fs_sparecon	./src/ufs.h	/^			uint32_t	fs_sparecon[50];\/* reserved for future constants *\/$/;"	m	struct:ufs_super_block::__anon31::__anon34
fs_sparecon	./src/ufs.h	/^			uint32_t	fs_sparecon[53];\/* reserved for future constants *\/$/;"	m	struct:ufs_super_block::__anon31::__anon32
fs_sparecon	./src/ufs.h	/^			uint32_t	fs_sparecon[53];\/* reserved for future constants *\/$/;"	m	struct:ufs_super_block::__anon31::__anon33
fs_sparecon2	./src/ufs.h	/^			uint32_t	fs_sparecon2[1];$/;"	m	struct:ufs_super_block::__anon31::__anon32
fs_sparecon2	./src/ufs.h	/^			uint32_t	fs_sparecon2[1];$/;"	m	struct:ufs_super_block::__anon31::__anon33
fs_sparecon64	./src/ufs.h	/^	uint64_t   fs_sparecon64[17];\/*old rotation block list head *\/$/;"	m	struct:fs_u11_u2_st
fs_spc	./src/ufs.h	/^	uint32_t	fs_spc;		\/* sectors per cylinder *\/$/;"	m	struct:ufs_super_block
fs_state	./src/ufs.h	/^			uint32_t	fs_state;	\/* file system state time stamp *\/$/;"	m	struct:ufs_super_block::__anon27::__anon29
fs_state	./src/ufs.h	/^			uint32_t	fs_state;	\/* file system state time stamp *\/$/;"	m	struct:ufs_super_block::__anon31::__anon32
fs_state	./src/ufs.h	/^			uint32_t	fs_state;	\/* file system state time stamp *\/$/;"	m	struct:ufs_super_block::__anon31::__anon34
fs_sun	./src/ufs.h	/^		} fs_sun;$/;"	m	union:ufs_super_block::__anon27	typeref:struct:ufs_super_block::__anon27::__anon28
fs_sun	./src/ufs.h	/^		} fs_sun;$/;"	m	union:ufs_super_block::__anon31	typeref:struct:ufs_super_block::__anon31::__anon32
fs_sunx86	./src/ufs.h	/^		} fs_sunx86;$/;"	m	union:ufs_super_block::__anon27	typeref:struct:ufs_super_block::__anon27::__anon29
fs_sunx86	./src/ufs.h	/^		} fs_sunx86;$/;"	m	union:ufs_super_block::__anon31	typeref:struct:ufs_super_block::__anon31::__anon33
fs_swuid	./src/ufs.h	/^	uint64_t  fs_swuid;		\/* system-wide uid *\/$/;"	m	struct:fs_u11_u2_st
fs_time	./src/ufs.h	/^	struct  ufs_timeval    fs_time;		\/* last time written *\/$/;"	m	struct:fs_u11_u2_st	typeref:struct:fs_u11_u2_st::ufs_timeval
fs_time	./src/ufs.h	/^	uint32_t	fs_time;	\/* last time written -- time_t *\/$/;"	m	struct:ufs_super_block
fs_trackskew	./src/ufs.h	/^	uint32_t	fs_trackskew;	\/* sector 0 skew, per track *\/$/;"	m	struct:ufs_super_block
fs_u1	./src/ufs.h	/^		struct fs_u11_u1_st fs_u1;$/;"	m	union:ufs_super_block::__anon30	typeref:struct:ufs_super_block::__anon30::fs_u11_u1_st
fs_u1	./src/ufs.h	/^	} fs_u1;$/;"	m	struct:ufs_super_block	typeref:union:ufs_super_block::__anon27
fs_u11	./src/ufs.h	/^	}  fs_u11;$/;"	m	struct:ufs_super_block	typeref:union:ufs_super_block::__anon30
fs_u11_u1_st	./src/ufs.h	/^struct fs_u11_u1_st {$/;"	s
fs_u11_u2_st	./src/ufs.h	/^struct fs_u11_u2_st {$/;"	s
fs_u2	./src/ufs.h	/^		struct fs_u11_u2_st fs_u2;$/;"	m	union:ufs_super_block::__anon30	typeref:struct:ufs_super_block::__anon30::fs_u11_u2_st
fs_u2	./src/ufs.h	/^	} fs_u2;$/;"	m	struct:ufs_super_block	typeref:union:ufs_super_block::__anon31
fs_volname	./src/ufs.h	/^	uint8_t   fs_volname[UFS2_MAXVOLLEN]; \/* volume name *\/$/;"	m	struct:fs_u11_u2_st
fsid	./src/btrfs.h	/^	uint8_t fsid[BTRFS_FSID_SIZE];    \/* FS specific uuid *\/$/;"	m	struct:btrfs_super_block
fsid	./src/btrfs.h	/^	uint8_t fsid[BTRFS_UUID_SIZE];$/;"	m	struct:btrfs_dev_item
fsid	./src/cramfs.h	/^	struct cramfs_info fsid;	\/* unique filesystem info *\/$/;"	m	struct:cramfs_super	typeref:struct:cramfs_super::cramfs_info
fsname	./src/common.h	/^  char          fsname[80];$/;"	m	struct:partition_struct
ftypelet	./src/dir.c	/^static char ftypelet (unsigned int bits)$/;"	f	file:
future	./src/cramfs.h	/^	uint32_t future;		\/* reserved for future use *\/$/;"	m	struct:cramfs_super
fw_rev	./src/common.h	/^  char *fw_rev;$/;"	m	struct:param_disk_struct
gWIMGuid	./src/file_wim.c	/^  unsigned char		gWIMGuid[16];$/;"	m	struct:_WIMHEADER_V1_PACKED	file:
gain	./src/file_spe.c	/^  uint16_t  gain;              \/*  198  gain                               *\/$/;"	m	struct:header_spe	file:
gam_header	./src/file_gam.c	/^static const unsigned char gam_header[6]=  {$/;"	v	file:
gct_header	./src/file_gct.c	/^static const unsigned char gct_header[9]=  {$/;"	v	file:
gd_offset	./src/file_vmdk.c	/^  int64_t gd_offset;$/;"	m	struct:__anon39	file:
gen_hdr_size	./src/file_dpx.c	/^  uint32_t   	gen_hdr_size;     \/* generic header length in bytes *\/$/;"	m	struct:header_dpx	file:
gen_image	./src/phrecn.c	/^static void gen_image(const char *filename, disk_t *disk, const alloc_data_t *list_search_space)$/;"	f	file:
gen_local_filename	./src/dir.c	/^char *gen_local_filename(const char *filename)$/;"	f
gen_sorted_partition_list	./src/fnctdsk.c	/^list_part_t *gen_sorted_partition_list(const list_part_t *list_part)$/;"	f
generation	./src/btrfs.h	/^	uint64_t generation;$/;"	m	struct:btrfs_dev_item
generation	./src/btrfs.h	/^	uint64_t generation;$/;"	m	struct:btrfs_super_block
generic_clean	./src/hdaccess.c	/^void generic_clean(disk_t *disk)$/;"	f
geo_phys	./src/msdos.h	/^  CHSgeometry_t geo_phys;	\/* CHS low level *\/$/;"	m	struct:info_disk_struct
geom	./src/common.h	/^  CHSgeometry_t	geom;	\/* logical CHS *\/$/;"	m	struct:param_disk_struct
geometric	./src/file_spe.c	/^  uint16_t  geometric;         \/*  600  geometric operations rotate 0x01   *\/$/;"	m	struct:header_spe	file:
get32u	./src/file_doc.c	/^static uint32_t get32u(const void *buffer, const unsigned int offset)$/;"	f	file:
get64u	./src/file_doc.c	/^static uint64_t get64u(const void *buffer, const unsigned int offset)$/;"	f	file:
get_be32	./src/file_psd.c	/^static uint32_t get_be32(const void *buffer, const unsigned int offset)$/;"	f	file:
get_be64	./src/file_psb.c	/^static uint64_t get_be64(const void *buffer, const unsigned int offset)$/;"	f	file:
get_compilation_date	./src/misc.c	/^const char *get_compilation_date(void)$/;"	f
get_compiler	./src/misc.c	/^const char *get_compiler(void)$/;"	f
get_crc32	./src/crc.c	/^unsigned int get_crc32(const void*buf, const unsigned int len, const uint32_t seed)$/;"	f
get_data	./src/ntfs_udl.c	/^static int get_data(struct ufile *file, ntfs_volume *vol)$/;"	f	file:
get_date_from_tiff_header	./src/file_tiff.c	/^time_t get_date_from_tiff_header(const TIFFHeader *tiff, const unsigned int tiff_size)$/;"	f
get_default_location	./src/askloc.c	/^char *get_default_location(void)$/;"	f
get_dir	./src/dir.h	/^  int(*get_dir)(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const unsigned long int first_inode, file_info_t*list);$/;"	m	struct:dir_data
get_dir_entries	./src/fat_common.c	/^unsigned int get_dir_entries(const struct fat_boot_sector *fat_header)$/;"	f
get_dos_drive_list	./src/askloc.c	/^void get_dos_drive_list(struct td_list_head *list)$/;"	f
get_ext_data_i386	./src/parti386.c	/^static list_part_t *get_ext_data_i386(disk_t *disk_car, list_part_t *list_part, const int verbose, const int saveheader)$/;"	f	file:
get_filenames	./src/ntfs_udl.c	/^static int get_filenames(struct ufile *file, ntfs_volume* vol)$/;"	f	file:
get_geometry_from_i386mbr	./src/parti386.c	/^static int get_geometry_from_i386mbr(const unsigned char *buffer, const int verbose, CHSgeometry_t *geometry)$/;"	f	file:
get_geometry_from_list_part	./src/fnctdsk.c	/^unsigned int get_geometry_from_list_part(const disk_t *disk_car, const list_part_t *list_part, const int verbose)$/;"	f
get_geometry_from_list_part_aux	./src/fnctdsk.c	/^static unsigned int get_geometry_from_list_part_aux(const disk_t *disk_car, const list_part_t *list_part, const int verbose)$/;"	f	file:
get_geometry_from_mbr	./src/common.h	/^  int (*get_geometry_from_mbr)(const unsigned char *buffer, const int verbose, CHSgeometry_t *geometry);$/;"	m	struct:arch_fnct_struct
get_geometry_from_nonembr	./src/partnone.c	/^static int get_geometry_from_nonembr(const unsigned char *buffer, const int verbose, CHSgeometry_t *geometry)$/;"	f	file:
get_geometry_from_sunmbr	./src/partsun.c	/^static int get_geometry_from_sunmbr(const unsigned char *buffer, const int verbose, CHSgeometry_t *geometry)$/;"	f	file:
get_gpt_typename	./src/partgpt.c	/^static const char *get_gpt_typename(const efi_guid_t part_type_gpt)$/;"	f	file:
get_location_boundary	./src/godmode.c	/^static unsigned int get_location_boundary(const disk_t *disk)$/;"	f	file:
get_min_location	./src/godmode.c	/^static uint64_t get_min_location(const disk_t *disk)$/;"	f	file:
get_next_cluster	./src/fat.c	/^unsigned int get_next_cluster(disk_t *disk_car,const partition_t *partition, const upart_type_t upart_type,const int offset, const unsigned int cluster)$/;"	f
get_next_header	./src/pnext.h	/^void get_next_header(alloc_data_t *list_search_space, alloc_data_t **current_search_space, uint64_t *offset)$/;"	f
get_next_sector	./src/pnext.h	/^void get_next_sector(alloc_data_t *list_search_space, alloc_data_t **current_search_space, uint64_t *offset, const unsigned int blocksize)$/;"	f
get_nr_sects	./src/parti386.c	/^static uint64_t get_nr_sects(const struct partition_dos *p)$/;"	f	file:
get_offset_next_file	./src/phbf.c	/^static uint64_t get_offset_next_file(const struct td_list_head *search_walker, const alloc_data_t *list_search_space)$/;"	f	file:
get_os	./src/misc.c	/^const char *get_os(void)$/;"	f
get_parent_name	./src/ntfs_udl.c	/^static void get_parent_name(struct filename* name, ntfs_volume* vol)$/;"	f	file:
get_part_type	./src/common.h	/^  unsigned int (*get_part_type)(const partition_t *partition);$/;"	m	struct:arch_fnct_struct
get_part_type_humax	./src/parthumax.c	/^static unsigned int get_part_type_humax(const partition_t *partition)$/;"	f	file:
get_part_type_i386	./src/parti386.c	/^static unsigned int get_part_type_i386(const partition_t *partition)$/;"	f	file:
get_part_type_mac	./src/partmac.c	/^static unsigned int get_part_type_mac(const partition_t *partition)$/;"	f	file:
get_part_type_none	./src/partnone.c	/^static unsigned int get_part_type_none(const partition_t *partition)$/;"	f	file:
get_part_type_sun	./src/partsun.c	/^static unsigned int get_part_type_sun(const partition_t *partition)$/;"	f	file:
get_part_type_xbox	./src/partxbox.c	/^static unsigned int get_part_type_xbox(const partition_t *partition)$/;"	f	file:
get_partition_status	./src/intrf.c	/^int get_partition_status(const partition_t *partition)$/;"	f
get_partition_typename	./src/common.h	/^  const char *(*get_partition_typename)(const partition_t *partition);$/;"	m	struct:arch_fnct_struct
get_partition_typename_gpt	./src/partgpt.c	/^static const char *get_partition_typename_gpt(const partition_t *partition)$/;"	f	file:
get_partition_typename_humax	./src/parthumax.c	/^static const char *get_partition_typename_humax(const partition_t *partition)$/;"	f	file:
get_partition_typename_i386	./src/parti386.c	/^static const char *get_partition_typename_i386(const partition_t *partition)$/;"	f	file:
get_partition_typename_i386_aux	./src/parti386.c	/^static const char *get_partition_typename_i386_aux(const unsigned int part_type_i386)$/;"	f	file:
get_partition_typename_mac	./src/partmac.c	/^static const char *get_partition_typename_mac(const partition_t *partition)$/;"	f	file:
get_partition_typename_mac_aux	./src/partmac.c	/^static const char *get_partition_typename_mac_aux(const unsigned int part_type_mac)$/;"	f	file:
get_partition_typename_none	./src/partnone.c	/^static const char *get_partition_typename_none(const partition_t *partition)$/;"	f	file:
get_partition_typename_none_aux	./src/partnone.c	/^static const char *get_partition_typename_none_aux(const unsigned int part_type_none)$/;"	f	file:
get_partition_typename_sun	./src/partsun.c	/^static const char *get_partition_typename_sun(const partition_t *partition)$/;"	f	file:
get_partition_typename_sun_aux	./src/partsun.c	/^static const char *get_partition_typename_sun_aux(const unsigned int part_type_sun)$/;"	f	file:
get_partition_typename_xbox	./src/partxbox.c	/^static const char *get_partition_typename_xbox(const partition_t *partition)$/;"	f	file:
get_partition_typename_xbox_aux	./src/partxbox.c	/^static const char *get_partition_typename_xbox_aux(const unsigned int part_type_xbox)$/;"	f	file:
get_prev_file_header	./src/photorec.c	/^int get_prev_file_header(alloc_data_t *list_search_space, alloc_data_t **current_search_space, uint64_t *offset)$/;"	f
get_prev_header	./src/pnext.h	/^static inline void get_prev_header(alloc_data_t *list_search_space, alloc_data_t **current_search_space, uint64_t *offset, const unsigned int blocksize)$/;"	f
get_prev_location	./src/photorec.c	/^void get_prev_location(alloc_data_t *list_search_space, alloc_data_t **current_search_space, uint64_t *offset, const uint64_t prev_location)$/;"	f
get_prev_sector	./src/pnext.h	/^static inline void get_prev_sector(alloc_data_t *list_search_space, alloc_data_t **current_search_space, uint64_t *offset, const unsigned int blocksize)$/;"	f
get_start_sect	./src/parti386.c	/^static uint64_t get_start_sect(const struct partition_dos *p)$/;"	f	file:
get_string	./src/intrfn.c	/^int get_string(WINDOW *window, char *str, const int len, const char *def)$/;"	f
get_subdirectory	./src/fat_adv.c	/^static unsigned long int get_subdirectory(disk_t *disk_car,const uint64_t hd_offset,const unsigned long int i)$/;"	f	file:
gfs2_inum	./src/gfs2.h	/^struct gfs2_inum {$/;"	s
gfs2_meta_header	./src/gfs2.h	/^struct gfs2_meta_header {$/;"	s
gfs2_sb	./src/gfs2.h	/^struct gfs2_sb {$/;"	s
gho_header	./src/file_gho.c	/^static const unsigned char gho_header[3]= { 0xfe, 0xef, 0x01 };$/;"	v	file:
gho_header_next	./src/file_gho.c	/^static const unsigned char gho_header_next[8]= { 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };$/;"	v	file:
gid	./src/cramfs.h	/^	uint32_t size:CRAMFS_SIZE_WIDTH, gid:CRAMFS_GID_WIDTH;$/;"	m	struct:cramfs_inode
gid	./src/file_a.c	/^  char gid[6];$/;"	m	struct:file_header	file:
gm6_header	./src/file_gm6.c	/^static const unsigned char gm6_header[8]=  {$/;"	v	file:
gmd_header	./src/file_gm6.c	/^static const unsigned char gmd_header[8]=  {$/;"	v	file:
gp5_header	./src/file_gp5.c	/^static const unsigned char gp5_header[23]=  {$/;"	v	file:
gpt_change_part_type	./src/chgtypen.c	/^static void gpt_change_part_type(const disk_t *disk_car, partition_t *partition)$/;"	f	file:
gpt_ent	./src/partgpt.h	/^struct gpt_ent$/;"	s
gpt_hdr	./src/partgpt.h	/^struct gpt_hdr$/;"	s
gpt_sys_types	./src/partgpt.c	/^const struct systypes_gtp gpt_sys_types[] = {$/;"	v	typeref:struct:systypes_gtp
grain_offset	./src/file_vmdk.c	/^  int64_t grain_offset;$/;"	m	struct:__anon39	file:
granularity	./src/file_vmdk.c	/^  int64_t granularity;$/;"	m	struct:__anon39	file:
granularity	./src/file_vmdk.c	/^  uint32_t granularity;$/;"	m	struct:__anon38	file:
group	./src/hfsp.h	/^        uint32_t         group;$/;"	m	struct:__anon52
group_size	./src/ext2_sbn.c	/^static const  uint64_t group_size[4]={$/;"	v	file:
groupx	./src/file_spe.c	/^    uint16_t groupx;            \/* amount x is binned\/grouped in hw.        *\/$/;"	m	struct:header_spe::ROIinfo	file:
groupy	./src/file_spe.c	/^    uint16_t groupy;            \/* amount y is binned\/grouped in hw.        *\/$/;"	m	struct:header_spe::ROIinfo	file:
gstate_creserved	./src/md.h	/^	uint32_t gstate_creserved[MD_SB_GENERIC_CONSTANT_WORDS - 16];$/;"	m	struct:mdp_superblock_s
gstate_sreserved	./src/md.h	/^	uint32_t gstate_sreserved[MD_SB_GENERIC_STATE_WORDS - 9];$/;"	m	struct:mdp_superblock_s
guid	./src/file_lnk.c	/^  char     guid[16]; 		\/* 4h GUID of shortcut files *\/$/;"	m	struct:lnk_header_s	file:
guid_cmp	./src/guid_cmp.h	/^static inline int guid_cmp (const efi_guid_t left, const efi_guid_t right)$/;"	f
guid_cpy	./src/guid_cpy.h	/^static inline void guid_cpy (efi_guid_t *dst, const efi_guid_t *src)$/;"	f
gvalid_words	./src/md.h	/^	uint32_t gvalid_words;	\/*  4 Number of used words in this section    *\/$/;"	m	struct:mdp_superblock_s
gz_header_magic	./src/file_gz.c	/^static const unsigned char gz_header_magic[3]= {0x1F, 0x8B, 0x08};$/;"	v	file:
gzip_header	./src/file_gz.c	/^struct gzip_header$/;"	s	file:
handle	./src/ewf.c	/^  libewf_handle_t *handle;$/;"	m	struct:info_fewf_struct	file:
handle	./src/file_jpg.c	/^  FILE *handle;$/;"	m	struct:jpeg_session_struct	file:
handle	./src/filegen.h	/^  FILE *handle;$/;"	m	struct:file_recovery_struct
handle	./src/hdaccess.c	/^  int handle;$/;"	m	struct:info_file_struct	file:
handle	./src/win32.c	/^  HANDLE handle;$/;"	m	struct:info_file_win32_struct	file:
handle_clone	./src/hdaccess.c	/^  int handle_clone;$/;"	m	struct:info_file_struct	file:
has_descriptor	./src/file_zip.c	/^  uint16_t has_descriptor:1;        \/** Compressed data followed by descriptor? *\/$/;"	m	struct:zip_file_entry	file:
hashSpec	./src/luks.h	/^  uint8_t	hashSpec[LUKS_HASHSPEC_L];$/;"	m	struct:luks_phdr
hd_glob_parse	./src/hdaccess.c	/^static list_disk_t *hd_glob_parse(const char *device_pattern, list_disk_t *list_disk, const int verbose, const int testdisk_mode)$/;"	f	file:
hd_identify	./src/msdos.c	/^disk_t *hd_identify(const int verbose, const unsigned int disk, const int testdisk_mode)$/;"	f
hd_identify_enh_bios	./src/msdos.c	/^static int hd_identify_enh_bios(disk_t *disk_car,const int verbose)$/;"	f	file:
hd_parse	./src/hdaccess.c	/^list_disk_t *hd_parse(list_disk_t *list_disk, const int verbose, const int testdisk_mode)$/;"	f
hd_pread	./src/msdos.c	/^static int hd_pread(disk_t *disk_car, void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
hd_pwrite	./src/msdos.c	/^static int hd_pwrite(disk_t *disk_car, const void *buf, const unsigned int count, const uint64_t offset)$/;"	f	file:
hd_report_error	./src/msdos.c	/^static int hd_report_error(disk_t *disk_car, const uint64_t hd_offset, const unsigned int count, const int rc)$/;"	f	file:
hd_sec_sz_s	./src/wbfs.h	/^  uint8_t  hd_sec_sz_s;       	\/\/ sector size in this partition$/;"	m	struct:wbfs_head
hd_update_all_geometry	./src/hdaccess.c	/^void hd_update_all_geometry(const list_disk_t * list_disk, const int verbose)$/;"	f
hd_update_geometry	./src/hdaccess.c	/^void hd_update_geometry(disk_t *disk, const int verbose)$/;"	f
hdmv_header	./src/file_m2ts.c	/^static const unsigned char hdmv_header[4] = { 'H','D','M','V'};$/;"	v	file:
hdpr_header	./src/file_m2ts.c	/^static const unsigned char hdpr_header[4] = { 'H','D','P','R'};$/;"	v	file:
hdr	./src/file_mrw.c	/^struct hdr {$/;"	s	file:
hdr_checksum	./src/file_cab.c	/^  uint32_t hdr_checksum;$/;"	m	struct:cab_header	file:
hdr_crc_self	./src/partgpt.h	/^  uint32_t	hdr_crc_self;                   \/* 0x10 *\/$/;"	m	struct:gpt_hdr
hdr_crc_table	./src/partgpt.h	/^  uint32_t	hdr_crc_table;                  \/* 0x58 *\/$/;"	m	struct:gpt_hdr
hdr_entries	./src/partgpt.h	/^  uint32_t	hdr_entries;                    \/* 0x50 *\/$/;"	m	struct:gpt_hdr
hdr_entsz	./src/partgpt.h	/^  uint32_t	hdr_entsz;                      \/* 0x54 *\/$/;"	m	struct:gpt_hdr
hdr_guid	./src/partgpt.h	/^  efi_guid_t hdr_guid;                          \/* 0x38 disk GUID *\/$/;"	m	struct:gpt_hdr
hdr_lba_alt	./src/partgpt.h	/^  uint64_t	hdr_lba_alt;                    \/* 0x20 *\/$/;"	m	struct:gpt_hdr
hdr_lba_end	./src/partgpt.h	/^  uint64_t	hdr_lba_end;                    \/* 0x30 *\/$/;"	m	struct:gpt_hdr
hdr_lba_self	./src/partgpt.h	/^  uint64_t	hdr_lba_self;                   \/* 0x18 *\/$/;"	m	struct:gpt_hdr
hdr_lba_start	./src/partgpt.h	/^  uint64_t	hdr_lba_start;                  \/* 0x28 *\/$/;"	m	struct:gpt_hdr
hdr_lba_table	./src/partgpt.h	/^  uint64_t	hdr_lba_table;                  \/* 0x48 *\/$/;"	m	struct:gpt_hdr
hdr_revision	./src/partgpt.h	/^  uint32_t	hdr_revision;                   \/* 0x08 *\/$/;"	m	struct:gpt_hdr
hdr_sig	./src/partgpt.h	/^  char		hdr_sig[8];                     \/* 0x00 *\/$/;"	m	struct:gpt_hdr
hdr_size	./src/partgpt.h	/^  uint32_t	hdr_size;                       \/* 0x0c *\/$/;"	m	struct:gpt_hdr
head	./src/common.h	/^  unsigned int head;$/;"	m	struct:CHS_struct
head	./src/parti386.c	/^    unsigned char head;             \/* starting head *\/$/;"	m	struct:partition_dos	file:
header	./src/file_psp.c	/^  char header[4];$/;"	m	struct:psp_chunk	file:
header	./src/ntfs.h	/^  ntfs_attribheader header;$/;"	m	struct:_ntfs_attribnonresident
header	./src/ntfs.h	/^  ntfs_attribheader header;$/;"	m	struct:_ntfs_attribresident
header_1cd	./src/file_1cd.c	/^struct header_1cd$/;"	s	file:
header_7z	./src/file_7z.c	/^struct header_7z {$/;"	s	file:
header_ace	./src/file_ace.c	/^struct header_ace {$/;"	s	file:
header_au_s	./src/file_au.c	/^struct header_au_s$/;"	s	file:
header_check	./src/filegen.h	/^  int (*header_check)(const unsigned char *buffer, const unsigned int buffer_size,$/;"	m	struct:__anon67
header_check_1cd	./src/file_1cd.c	/^static int header_check_1cd(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_3dm	./src/file_3dm.c	/^static int header_check_3dm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_7z	./src/file_7z.c	/^static int header_check_7z(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery,  file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_DB	./src/file_DB.c	/^static int header_check_DB(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_EXTENSION	./src/file_template.c	/^static int header_check_EXTENSION(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_a	./src/file_a.c	/^static int header_check_a(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only,  const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_abcdp	./src/file_abcdp.c	/^static int header_check_abcdp(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_abr	./src/file_abr.c	/^static int header_check_abr(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_acb	./src/file_acb.c	/^static int header_check_acb(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ace	./src/file_ace.c	/^static int header_check_ace(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_addressbook	./src/file_ab.c	/^static int header_check_addressbook(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ado	./src/file_ado.c	/^static int header_check_ado(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ahn	./src/file_ahn.c	/^static int header_check_ahn(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_aif	./src/file_aif.c	/^static int header_check_aif(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_all	./src/file_all.c	/^static int header_check_all(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_als	./src/file_als.c	/^static int header_check_als(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_amd	./src/file_amd.c	/^static int header_check_amd(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_amr	./src/file_amr.c	/^static int header_check_amr(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_amt	./src/file_amd.c	/^static int header_check_amt(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_apa	./src/file_apa.c	/^static int header_check_apa(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ape	./src/file_ape.c	/^static int header_check_ape(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_apple	./src/file_apple.c	/^static int header_check_apple(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ari	./src/file_ari.c	/^static int header_check_ari(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_arj	./src/file_arj.c	/^static int header_check_arj(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_asf	./src/file_asf.c	/^static int header_check_asf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_asl	./src/file_asl.c	/^static int header_check_asl(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_asm	./src/file_asm.c	/^static int header_check_asm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_atd	./src/file_atd.c	/^static int header_check_atd(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_au	./src/file_au.c	/^static int header_check_au(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_aux	./src/file_ddf.c	/^static int header_check_aux(const unsigned char *buffer, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_axx	./src/file_axx.c	/^static int header_check_axx(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_bac	./src/file_bac.c	/^static int header_check_bac(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_berkeley_le	./src/file_berkeley.c	/^static int header_check_berkeley_le(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_bim	./src/file_bim.c	/^static int header_check_bim(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_binvox	./src/file_binvox.c	/^static int header_check_binvox(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_bkf	./src/file_bkf.c	/^static int header_check_bkf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_blend	./src/file_bld.c	/^static int header_check_blend(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_bmp	./src/file_bmp.c	/^static int header_check_bmp(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_bz2	./src/file_bz2.c	/^static int header_check_bz2(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_cab	./src/file_cab.c	/^static int header_check_cab(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_caf	./src/file_caf.c	/^static int header_check_caf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_cam	./src/file_cam.c	/^static int header_check_cam(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_catdrawing	./src/file_catdrawing.c	/^static int header_check_catdrawing(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_cdt	./src/file_cdt.c	/^static int header_check_cdt(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_chm	./src/file_chm.c	/^static int header_check_chm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_class	./src/file_class.c	/^static int header_check_class(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_cm	./src/file_cm.c	/^static int header_check_cm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_compress	./src/file_compress.c	/^static int header_check_compress(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_crw	./src/file_crw.c	/^static int header_check_crw(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_csh	./src/file_csh.c	/^static int header_check_csh(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ctg	./src/file_ctg.c	/^static int header_check_ctg(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_cwk	./src/file_cwk.c	/^static int header_check_cwk(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_d2s	./src/file_d2s.c	/^static int header_check_d2s(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dad	./src/file_dad.c	/^static int header_check_dad(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dar	./src/file_dar.c	/^static int header_check_dar(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dat	./src/file_dat.c	/^static int header_check_dat(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_datIE	./src/file_dat.c	/^static int header_check_datIE(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dat_history10	./src/file_dat.c	/^static int header_check_dat_history10(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dat_history4	./src/file_dat.c	/^static int header_check_dat_history4(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_db	./src/file_gho.c	/^static int header_check_db(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_db	./src/file_iso.c	/^static int header_check_db(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_db	./src/file_mdb.c	/^static int header_check_db(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dbf	./src/file_dbf.c	/^static int header_check_dbf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dbn	./src/file_dbn.c	/^static int header_check_dbn(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dbx	./src/file_pst.c	/^static int header_check_dbx(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dc	./src/file_txt.c	/^static int header_check_dc(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dcm	./src/file_dcm.c	/^static int header_check_dcm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ddf3	./src/file_ddf.c	/^static int header_check_ddf3(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ddf4	./src/file_ddf.c	/^static int header_check_ddf4(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ddf5	./src/file_ddf.c	/^static int header_check_ddf5(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dex	./src/file_dex.c	/^static int header_check_dex(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dim	./src/file_dim.c	/^static int header_check_dim(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dir	./src/file_dir.c	/^static int header_check_dir(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_djv	./src/file_djv.c	/^static int header_check_djv(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dmp	./src/file_dmp.c	/^static int header_check_dmp(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_doc	./src/file_doc.c	/^static int header_check_doc(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dpx	./src/file_dpx.c	/^static int header_check_dpx(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_drw	./src/file_drw.c	/^static int header_check_drw(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ds2	./src/file_ds2.c	/^static int header_check_ds2(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dsc	./src/file_dsc.c	/^static int header_check_dsc(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dss	./src/file_dss.c	/^static int header_check_dss(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dta	./src/file_dta.c	/^static int header_check_dta(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dump	./src/file_dump.c	/^static int header_check_dump(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dv	./src/file_dv.c	/^static int header_check_dv(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dwg	./src/file_dwg.c	/^static int header_check_dwg(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_dxf	./src/file_dxf.c	/^static int header_check_dxf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_e01	./src/file_e01.c	/^static int header_check_e01(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ecryptfs	./src/file_ecryptfs.c	/^static int header_check_ecryptfs(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_edb	./src/file_edb.c	/^static int header_check_edb(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_elf	./src/file_elf.c	/^static int header_check_elf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_emf	./src/file_emf.c	/^static int header_check_emf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ers	./src/file_txt.c	/^static int header_check_ers(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_evt	./src/file_evt.c	/^static int header_check_evt(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_exe	./src/file_exe.c	/^static int header_check_exe(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_exs	./src/file_exs.c	/^static int header_check_exs(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ext2_dir	./src/file_ext.c	/^static int header_check_ext2_dir(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ext2_fs	./src/file_ext2.c	/^static int header_check_ext2_fs(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ext2_sb	./src/file_ext.c	/^static int header_check_ext2_sb(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fasttxt	./src/file_txt.c	/^static int header_check_fasttxt(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fat	./src/file_fat.c	/^static int header_check_fat(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fbf	./src/file_fbf.c	/^static int header_check_fbf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fbk	./src/file_fbk.c	/^static int header_check_fbk(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fcp	./src/file_fcp.c	/^static int header_check_fcp(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fcs	./src/file_fcs.c	/^static int header_check_fcs(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fdb	./src/file_fdb.c	/^static int header_check_fdb(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fds	./src/file_fds.c	/^static int header_check_fds(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fh10	./src/file_fh10.c	/^static int header_check_fh10(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fh5	./src/file_fh5.c	/^static int header_check_fh5(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_filevault	./src/file_filevault.c	/^static int header_check_filevault(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fits	./src/file_fits.c	/^static int header_check_fits(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_flac	./src/file_flac.c	/^static int header_check_flac(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_flp	./src/file_flp.c	/^static int header_check_flp(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_flv	./src/file_flv.c	/^static int header_check_flv(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fob	./src/file_fob.c	/^static int header_check_fob(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fp5	./src/file_fp5.c	/^static int header_check_fp5(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fp7	./src/file_fp7.c	/^static int header_check_fp7(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_freeway	./src/file_freeway.c	/^static int header_check_freeway(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_frm	./src/file_frm.c	/^static int header_check_frm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fs	./src/file_fs.c	/^static int header_check_fs(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_fwd	./src/file_fwd.c	/^static int header_check_fwd(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_gam	./src/file_gam.c	/^static int header_check_gam(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_gct	./src/file_gct.c	/^static int header_check_gct(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_gif	./src/file_gif.c	/^static int header_check_gif(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_gm6	./src/file_gm6.c	/^static int header_check_gm6(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_gp5	./src/file_gp5.c	/^static int header_check_gp5(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_gpg	./src/file_gpg.c	/^static int header_check_gpg(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_gz	./src/file_gz.c	/^static int header_check_gz(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_hdf	./src/file_hdf.c	/^static int header_check_hdf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_hds	./src/file_hds.c	/^static int header_check_hds(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_hfsp	./src/file_hfsp.c	/^static int header_check_hfsp(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_hr9	./src/file_hr9.c	/^static int header_check_hr9(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_html	./src/file_txt.c	/^static int header_check_html(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_http	./src/file_http.c	/^static int header_check_http(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_icc	./src/file_icc.c	/^static int header_check_icc(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ico	./src/file_ico.c	/^static int header_check_ico(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ics	./src/file_txt.c	/^static int header_check_ics(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_id3	./src/file_mp3.c	/^static int header_check_id3(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ifo	./src/file_ifo.c	/^static int header_check_ifo(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_imb	./src/file_imb.c	/^static int header_check_imb(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_indd	./src/file_indd.c	/^static int header_check_indd(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_info	./src/file_info.c	/^static int header_check_info(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_it	./src/file_it.c	/^static int header_check_it(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_itunes	./src/file_itu.c	/^static int header_check_itunes(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_jng	./src/file_png.c	/^static int header_check_jng(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_jpg	./src/file_jpg.c	/^static int header_check_jpg(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_kdb	./src/file_kdb.c	/^static int header_check_kdb(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_kdbx	./src/file_kdbx.c	/^static int header_check_kdbx(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ldf	./src/file_ldf.c	/^static int header_check_ldf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_le16_txt	./src/file_txt.c	/^static int header_check_le16_txt(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_lit	./src/file_lit.c	/^static int header_check_lit(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_lnk	./src/file_lnk.c	/^static int header_check_lnk(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_logic	./src/file_logic.c	/^static int header_check_logic(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_lso	./src/file_lso.c	/^static int header_check_lso(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_luks	./src/file_luks.c	/^static int header_check_luks(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_lxo	./src/file_lxo.c	/^static int header_check_lxo(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_lzh	./src/file_lzh.c	/^static int header_check_lzh(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_lzo	./src/file_lzo.c	/^static int header_check_lzo(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_m2t	./src/file_m2ts.c	/^static int header_check_m2t(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_m2ts	./src/file_m2ts.c	/^static int header_check_m2ts(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mat	./src/file_mat.c	/^static int header_check_mat(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_max	./src/file_max.c	/^static int header_check_max(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mb	./src/file_mb.c	/^static int header_check_mb(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mbox	./src/file_txt.c	/^static int header_check_mbox(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mcd	./src/file_mcd.c	/^static int header_check_mcd(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mdf	./src/file_mdf.c	/^static int header_check_mdf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mfa	./src/file_mfa.c	/^static int header_check_mfa(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mfg	./src/file_mfg.c	/^static int header_check_mfg(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mft	./src/file_mft.c	/^static int header_check_mft(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mid	./src/file_mid.c	/^static int header_check_mid(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mig	./src/file_mig.c	/^static int header_check_mig(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mk5	./src/file_mk5.c	/^static int header_check_mk5(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mkv	./src/file_mkv.c	/^static int header_check_mkv(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mlv	./src/file_mlv.c	/^static int header_check_mlv(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mng	./src/file_png.c	/^static int header_check_mng(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mobi	./src/file_mobi.c	/^static int header_check_mobi(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mov	./src/file_mov.c	/^static int header_check_mov(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mp	./src/file_mb.c	/^static int header_check_mp(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mp3	./src/file_mp3.c	/^static int header_check_mp3(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mpg4_ElemVideo	./src/file_mpg.c	/^static int header_check_mpg4_ElemVideo(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mpg_Pack	./src/file_mpg.c	/^static int header_check_mpg_Pack(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mpg_Sequence	./src/file_mpg.c	/^static int header_check_mpg_Sequence(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mpg_System	./src/file_mpg.c	/^static int header_check_mpg_System(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mrw	./src/file_mrw.c	/^static int header_check_mrw(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mus	./src/file_mus.c	/^static int header_check_mus(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mxf	./src/file_mxf.c	/^static int header_check_mxf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_myo	./src/file_myo.c	/^static int header_check_myo(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_mysql	./src/file_mysql.c	/^static int header_check_mysql(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_nds	./src/file_nds.c	/^static int header_check_nds(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_nes	./src/file_nes.c	/^static int header_check_nes(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_njx	./src/file_njx.c	/^static int header_check_njx(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_nk2	./src/file_nk2.c	/^static int header_check_nk2(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_nsf	./src/file_nsf.c	/^static int header_check_nsf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_oci	./src/file_oci.c	/^static int header_check_oci(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ogg	./src/file_ogg.c	/^static int header_check_ogg(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_one	./src/file_one.c	/^static int header_check_one(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_orf_IIRO	./src/file_orf.c	/^static int header_check_orf_IIRO(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_orf_IIRS	./src/file_orf.c	/^static int header_check_orf_IIRS(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_other_wmf	./src/file_wmf.c	/^static int header_check_other_wmf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_paf	./src/file_paf.c	/^static int header_check_paf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_pap	./src/file_pap.c	/^static int header_check_pap(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_par2	./src/file_par2.c	/^static int header_check_par2(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_pbm	./src/file_pnm.c	/^static int header_check_pbm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_pcap	./src/file_pcap.c	/^static int header_check_pcap(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_pct	./src/file_pct.c	/^static int header_check_pct(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_pcx	./src/file_pcx.c	/^static int header_check_pcx(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_pdf	./src/file_pdf.c	/^static int header_check_pdf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_pds	./src/file_pds.c	/^static int header_check_pds(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_perlm	./src/file_txt.c	/^static int header_check_perlm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_pfx	./src/file_pfx.c	/^static int header_check_pfx(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_pgm	./src/file_pnm.c	/^static int header_check_pgm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_plt	./src/file_plt.c	/^static int header_check_plt(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_png	./src/file_png.c	/^static int header_check_png(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ppm	./src/file_pnm.c	/^static int header_check_ppm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_prc	./src/file_prc.c	/^static int header_check_prc(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_prt	./src/file_prt.c	/^static int header_check_prt(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ps	./src/file_ps.c	/^static int header_check_ps(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_psb	./src/file_psb.c	/^static int header_check_psb(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_psd	./src/file_psd.c	/^static int header_check_psd(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_psf	./src/file_psf.c	/^static int header_check_psf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_psp	./src/file_psp.c	/^static int header_check_psp(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_pst	./src/file_pst.c	/^static int header_check_pst(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ptb	./src/file_ptb.c	/^static int header_check_ptb(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ptf	./src/file_ptf.c	/^static int header_check_ptf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_pyc	./src/file_pyc.c	/^static int header_check_pyc(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_pzf	./src/file_pzf.c	/^static int header_check_pzf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_pzh	./src/file_pzh.c	/^static int header_check_pzh(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_qbb	./src/file_qbb.c	/^static int header_check_qbb(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_qbw	./src/file_qbb.c	/^static int header_check_qbw(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_qbw2	./src/file_qbb.c	/^static int header_check_qbw2(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_qcow1	./src/file_cow.c	/^static int header_check_qcow1(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_qcow2	./src/file_cow.c	/^static int header_check_qcow2(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_qdf	./src/file_qdf.c	/^static int header_check_qdf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_qkt	./src/file_qkt.c	/^static int header_check_qkt(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_qxd	./src/file_qxd.c	/^static int header_check_qxd(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_qxp	./src/file_qxd.c	/^static int header_check_qxp(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_r3d	./src/file_r3d.c	/^static int header_check_r3d(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_r3d_v2	./src/file_r3d.c	/^static int header_check_r3d_v2(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ra	./src/file_ra.c	/^static int header_check_ra(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_raf	./src/file_raf.c	/^static int header_check_raf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_rar	./src/file_rar.c	/^static int header_check_rar(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_raw	./src/file_raw.c	/^static int header_check_raw(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_rdc	./src/file_rdc.c	/^static int header_check_rdc(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_reg_9x	./src/file_reg.c	/^static int header_check_reg_9x(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_reg_nt	./src/file_reg.c	/^static int header_check_reg_nt(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_res	./src/file_res.c	/^static int header_check_res(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_rfp	./src/file_rfp.c	/^static int header_check_rfp(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_riff	./src/file_riff.c	/^static int header_check_riff(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_rifx	./src/file_riff.c	/^static int header_check_rifx(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_rlv	./src/file_rlv.c	/^static int header_check_rlv(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_rm	./src/file_rm.c	/^static int header_check_rm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_rns	./src/file_rns.c	/^static int header_check_rns(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_rpm	./src/file_rpm.c	/^static int header_check_rpm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_rtf	./src/file_txt.c	/^static int header_check_rtf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_rw2	./src/file_rw2.c	/^static int header_check_rw2(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_rx2	./src/file_rx2.c	/^static int header_check_rx2(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_save	./src/file_save.c	/^static int header_check_save(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ses	./src/file_ses.c	/^static int header_check_ses(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_shn	./src/file_shn.c	/^static int header_check_shn(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_sib	./src/file_sib.c	/^static int header_check_sib(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_sig	./src/file_sig.c	/^static int header_check_sig(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_sit	./src/file_sit.c	/^static int header_check_sit(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_skd	./src/file_skd.c	/^static int header_check_skd(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_skp	./src/file_skp.c	/^static int header_check_skp(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_smil	./src/file_txt.c	/^static int header_check_smil(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_sp3	./src/file_sp3.c	/^static int header_check_sp3(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_spe	./src/file_spe.c	/^static int header_check_spe(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_spf	./src/file_spf.c	/^static int header_check_spf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_spss	./src/file_spss.c	/^static int header_check_spss(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_sqlite	./src/file_sql.c	/^static int header_check_sqlite(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_sqm	./src/file_sqm.c	/^static int header_check_sqm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_stl	./src/file_stl.c	/^static int header_check_stl(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_stl	./src/file_txt.c	/^static int header_check_stl(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_stuffit	./src/file_stu.c	/^static int header_check_stuffit(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_swf	./src/file_swf.c	/^static int header_check_swf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_swfc	./src/file_swf.c	/^static int header_check_swfc(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_tar	./src/file_tar.c	/^int header_check_tar(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f
header_check_tax	./src/file_tax.c	/^static int header_check_tax(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_tib	./src/file_tib.c	/^static int header_check_tib(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_tib2	./src/file_tib.c	/^static int header_check_tib2(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_tiff_be	./src/file_tiff.c	/^static uint64_t header_check_tiff_be(file_recovery_t *fr, const uint32_t tiff_diroff, const unsigned int depth, const unsigned int count, const char *tag_make)$/;"	f	file:
header_check_tiff_be_new	./src/file_tiff.c	/^static int header_check_tiff_be_new(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_tiff_le	./src/file_tiff.c	/^static uint64_t header_check_tiff_le(file_recovery_t *fr, const uint32_t tiff_diroff, const unsigned int depth, const unsigned int count, const char *tag_make)$/;"	f	file:
header_check_tiff_le_new	./src/file_tiff.c	/^static int header_check_tiff_le_new(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_tivo	./src/file_tivo.c	/^static int header_check_tivo(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_torrent	./src/file_torrent.c	/^static int header_check_torrent(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_tph	./src/file_tph.c	/^static int header_check_tph(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_tpl	./src/file_tpl.c	/^static int header_check_tpl(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ttd	./src/file_txt.c	/^static int header_check_ttd(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_ttf	./src/file_ttf.c	/^static int header_check_ttf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_txt	./src/file_txt.c	/^static int header_check_txt(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_tz	./src/file_tz.c	/^static int header_check_tz(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_v2i	./src/file_v2i.c	/^static int header_check_v2i(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_vault	./src/file_vault.c	/^static int header_check_vault(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_vdi	./src/file_vdi.c	/^static int header_check_vdi(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_veg	./src/file_veg.c	/^static int header_check_veg(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_vfb	./src/file_vfb.c	/^static int header_check_vfb(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_vmdk3	./src/file_vmdk.c	/^static int header_check_vmdk3(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_vmdk4	./src/file_vmdk.c	/^static int header_check_vmdk4(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_vmg	./src/file_vmg.c	/^static int header_check_vmg(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_wab	./src/file_pst.c	/^static int header_check_wab(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_wallet	./src/file_wallet.c	/^static int header_check_wallet(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_wdp	./src/file_wdp.c	/^static int header_check_wdp(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_wim	./src/file_wim.c	/^static int header_check_wim(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_win	./src/file_win.c	/^static int header_check_win(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_wk4	./src/file_wks.c	/^static int header_check_wk4(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_wks	./src/file_wks.c	/^static int header_check_wks(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_wmf	./src/file_wmf.c	/^static int header_check_wmf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_wnk	./src/file_wnk.c	/^static int header_check_wnk(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_woff	./src/file_woff.c	/^static int header_check_woff(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_wpb	./src/file_wpb.c	/^static int header_check_wpb(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_wpd	./src/file_wpd.c	/^static int header_check_wpd(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_wtv	./src/file_wtv.c	/^static int header_check_wtv(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_wv	./src/file_wv.c	/^static int header_check_wv(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_x3f	./src/file_x3f.c	/^static int header_check_x3f(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_xcf	./src/file_xcf.c	/^static int header_check_xcf(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_xfi	./src/file_xfi.c	/^static int header_check_xfi(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_xm	./src/file_xm.c	/^static int header_check_xm(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_xml	./src/file_txt.c	/^static int header_check_xml(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_xmp	./src/file_txt.c	/^static int header_check_xmp(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_xpt	./src/file_xpt.c	/^static int header_check_xpt(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_xsv	./src/file_xsv.c	/^static int header_check_xsv(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_xv	./src/file_xv.c	/^static int header_check_xv(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_xz	./src/file_xz.c	/^static int header_check_xz(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_z2d	./src/file_z2d.c	/^static int header_check_z2d(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_check_zip	./src/file_zip.c	/^static int header_check_zip(const unsigned char *buffer, const unsigned int buffer_size, const unsigned int safe_header_only, const file_recovery_t *file_recovery, file_recovery_t *file_recovery_new)$/;"	f	file:
header_crc	./src/file_lzh.c	/^  uint8_t  header_crc;$/;"	m	struct:lzh_level0	file:
header_crc	./src/file_lzh.c	/^  uint8_t  header_crc;$/;"	m	struct:lzh_level1	file:
header_dpx	./src/file_dpx.c	/^struct header_dpx$/;"	s	file:
header_ico	./src/file_ico.c	/^static const unsigned char header_ico[6]= 	{0x00 , 0x00, 0x01, 0x00, 0x01, 0x00};$/;"	v	file:
header_id	./src/file_arj.c	/^  uint16_t	header_id;$/;"	m	struct:arj_main_header	file:
header_nbr	./src/file_rm.c	/^  uint32_t header_nbr;$/;"	m	struct:rm_header	file:
header_paragraphs	./src/pe.h	/^    uint16_t header_paragraphs;$/;"	m	struct:dos_image_file_hdr
header_raf	./src/file_raf.c	/^struct header_raf$/;"	s	file:
header_size	./src/file_ari.c	/^  uint32_t header_size;$/;"	m	struct:arri_header	file:
header_size	./src/file_dex.c	/^  uint32_t	header_size;$/;"	m	struct:dex_header	file:
header_size	./src/file_lzh.c	/^  uint16_t header_size;$/;"	m	struct:lzh_level2	file:
header_size	./src/file_lzh.c	/^  uint8_t  header_size;$/;"	m	struct:lzh_level0	file:
header_size	./src/file_lzh.c	/^  uint8_t  header_size;$/;"	m	struct:lzh_level1	file:
header_size	./src/file_ra.c	/^  uint16_t header_size;	\/* not including first 8 bytes *\/$/;"	m	struct:ra3_header	file:
header_size	./src/file_ra.c	/^  uint16_t header_size;	\/* not including the first 20 bytes ? *\/$/;"	m	struct:ra4_header	file:
header_size	./src/file_vdi.c	/^    uint32_t header_size;$/;"	m	struct:__anon57	file:
header_size	./src/file_wmf.c	/^  uint16_t header_size;$/;"	m	struct:wmf_header	file:
header_spe	./src/file_spe.c	/^struct header_spe$/;"	s	file:
header_ttf	./src/file_ttf.c	/^static const unsigned char header_ttf[5]= 	{0x00 , 0x01, 0x00, 0x00, 0x00};$/;"	v	file:
heads	./src/fat.h	/^	uint16_t	heads;		\/* 0x1A number of heads *\/$/;"	m	struct:fat_boot_sector
heads	./src/file_hds.c	/^    uint32_t heads;$/;"	m	struct:parallels_header	file:
heads	./src/file_vdi.c	/^    uint32_t heads;             \/* disk geometry, unused here *\/$/;"	m	struct:__anon57	file:
heads	./src/file_vmdk.c	/^  uint32_t heads;$/;"	m	struct:__anon38	file:
heads	./src/ntfs.h	/^	uint16_t	heads;		\/* 0x1A number of heads *\/$/;"	m	struct:ntfs_boot_sector
heads_per_cylinder	./src/common.h	/^  unsigned int heads_per_cylinder;$/;"	m	struct:__anon40
height	./src/file_ari.c	/^  uint32_t height;$/;"	m	struct:arri_header	file:
height	./src/file_cwk.c	/^  uint16_t	height;$/;"	m	struct:cwk_header	file:
height	./src/file_psb.c	/^  uint32_t height;	\/* max of 300,000 *\/$/;"	m	struct:psb_file_header	file:
height	./src/file_psd.c	/^  uint32_t height;	\/* max of 30,000 *\/$/;"	m	struct:psd_file_header	file:
heigth	./src/file_ico.c	/^  uint8_t	heigth;$/;"	m	struct:ico_directory	file:
heigth	./src/file_xcf.c	/^  uint32_t	heigth;$/;"	m	struct:xcf_header	file:
hex	./src/file_pdf.c	/^static int hex(int c)$/;"	f	file:
hfs_dump	./src/thfs.c	/^static void hfs_dump(disk_t *disk_car, const partition_t *partition, const unsigned char *buffer_bs, const unsigned char *buffer_backup_bs, char **current_cmd)$/;"	f	file:
hfs_dump_ncurses	./src/thfs.c	/^static void hfs_dump_ncurses(disk_t *disk_car, const partition_t *partition, const unsigned char *buffer_bs, const unsigned char *buffer_backup_bs)$/;"	f	file:
hfs_extent	./src/hfs.h	/^struct hfs_extent {$/;"	s
hfs_extent_rec	./src/hfs.h	/^typedef struct hfs_extent hfs_extent_rec[3];$/;"	t	typeref:struct:hfs_extent
hfs_mdb	./src/hfs.h	/^struct hfs_mdb {$/;"	s
hfs_mdb_t	./src/hfs.h	/^typedef struct hfs_mdb hfs_mdb_t;$/;"	t	typeref:struct:hfs_mdb
hfsp_extent	./src/hfsp.h	/^} hfsp_extent;$/;"	t	typeref:struct:__anon53
hfsp_extent_rec	./src/hfsp.h	/^typedef hfsp_extent hfsp_extent_rec[8];$/;"	t
hfsp_fork_raw	./src/hfsp.h	/^} hfsp_fork_raw;$/;"	t	typeref:struct:__anon54
hfsp_perm	./src/hfsp.h	/^} hfsp_perm;$/;"	t	typeref:struct:__anon52
hfsp_vh	./src/hfsp.h	/^typedef struct hfsp_vh {$/;"	s
hfsp_vh	./src/hfsp.h	/^} hfsp_vh;$/;"	t	typeref:struct:hfsp_vh
hidden	./src/fat.h	/^	uint32_t	hidden;		\/* 0x1C hidden sectors (unused) *\/$/;"	m	struct:fat_boot_sector
hidden	./src/ntfs.h	/^	uint32_t	hidden;		\/* 0x1C hidden sectors (unused) *\/$/;"	m	struct:ntfs_boot_sector
hint_insert	./src/godmode.c	/^static void hint_insert(uint64_t *tab, const uint64_t offset, unsigned int *tab_nbr)$/;"	f	file:
hive_bins_size	./src/file_reg.c	/^  uint32_t hive_bins_size;$/;"	m	struct:regf_file_header	file:
host_os	./src/file_arj.c	/^  uint8_t	host_os;$/;"	m	struct:arj_main_header	file:
hot_key	./src/file_lnk.c	/^  uint32_t hot_key; 		\/* 40h *\/$/;"	m	struct:lnk_header_s	file:
hr9_header	./src/file_hr9.c	/^static const unsigned char hr9_header[17]= {$/;"	v	file:
humaxlabel	./src/parthumax.c	/^struct humaxlabel {$/;"	s	file:
i386_entry2partition	./src/parti386.c	/^static int i386_entry2partition(disk_t *disk_car, const uint64_t offset, partition_t *partition, const struct partition_dos *p, const status_type_t status,const unsigned int order,const int verbose, const int saveheader)$/;"	f	file:
i386_sys_types	./src/parti386.c	/^static const struct systypes i386_sys_types[] = {$/;"	v	typeref:struct:systypes	file:
iType	./src/file_emf.c	/^  uint32_t iType;$/;"	m	struct:__anon19	file:
ico_directory	./src/file_ico.c	/^struct ico_directory$/;"	s	file:
ico_header	./src/file_ico.c	/^struct ico_header$/;"	s	file:
icon_number	./src/file_lnk.c	/^  uint32_t icon_number; 	\/* 38h *\/$/;"	m	struct:lnk_header_s	file:
id	./src/fat.h	/^	uint8_t    id;			\/* 00 sequence number for slot *\/$/;"	m	struct:msdos_dir_slot
id	./src/file_evt.c	/^  uint32_t id;$/;"	m	struct:evt_chunk	file:
id	./src/file_fh5.c	/^  unsigned char   id[8];$/;"	m	struct:fh5_header_s	file:
id	./src/file_fs.c	/^  uint64_t id;$/;"	m	struct:transaction_header	file:
id	./src/file_gz.c	/^  uint16_t id;$/;"	m	struct:gzip_header	file:
id	./src/file_psp.c	/^  uint16_t id;$/;"	m	struct:psp_chunk	file:
id	./src/file_x3f.c	/^  uint32_t	id;$/;"	m	struct:x3f_header	file:
id	./src/iso9660.h	/^	char id[5];$/;"	m	struct:iso_primary_descriptor
id	./src/lvm.h	/^	uint8_t id[2];		\/* Identifier *\/$/;"	m	struct:__anon13
id	./src/lvm.h	/^  uint8_t id[8];          \/* 0x00 LABELONE *\/$/;"	m	struct:lvm2_label_header
id	./src/sun.h	/^    uint16_t id;$/;"	m	struct:struct_sun_partition_i386::sun_info_i386
id	./src/sun.h	/^    unsigned char id;$/;"	m	struct:__anon8::sun_info
idAttribute	./src/ntfs.h	/^  uint16_t idAttribute;         \/* Attribute Id (a) *\/$/;"	m	struct:_ntfs_attribheader
idTipoDePesquisa	./src/file_sp3.h	/^  uint16_t	idTipoDePesquisa;		\/* 2 bytes   ( 504 -  505) *\/$/;"	m	struct:SP3FileInfo
ident	./src/file_fds.c	/^  char ident[4];$/;"	m	struct:fds_header	file:
ident	./src/file_nes.c	/^	char ident[4];$/;"	m	struct:nes_header	file:
ifd	./src/file_tiff.h	/^  TIFFDirEntry ifd;$/;"	m	struct:ifd_header
ifd_header	./src/file_tiff.h	/^struct ifd_header {$/;"	s
ifo_hdr	./src/file_ifo.c	/^struct ifo_hdr$/;"	s	file:
ifo_header_vmg	./src/file_ifo.c	/^static const unsigned char ifo_header_vmg[12]=  { 'D', 'V', 'D', 'V', 'I', 'D', 'E', 'O', '-', 'V', 'M', 'G'};$/;"	v	file:
ifo_header_vts	./src/file_ifo.c	/^static const unsigned char ifo_header_vts[12]=  { 'D', 'V', 'D', 'V', 'I', 'D', 'E', 'O', '-', 'V', 'T', 'S'};$/;"	v	file:
ignored	./src/fat.h	/^	uint8_t	ignored[3];	\/* 0x00 Boot strap short or near jump *\/$/;"	m	struct:fat_boot_sector
ignored	./src/ntfs.h	/^	uint8_t	ignored[3];	\/* 0x00 Boot strap short or near jump *\/$/;"	m	struct:ntfs_boot_sector
ih_flags	./src/ntfs.h	/^\/* 12*\/ uint8_t ih_flags;    	\/* Bit field of INDEX_HEADER_FLAGS.  *\/$/;"	m	struct:__anon22
ilfact	./src/sun.h	/^  uint16_t ilfact;     \/* Interleave factor *\/$/;"	m	struct:__anon8
image_flags	./src/file_vdi.c	/^    uint32_t image_flags;$/;"	m	struct:__anon57	file:
image_type	./src/file_vdi.c	/^    uint32_t image_type;$/;"	m	struct:__anon57	file:
imb_header	./src/file_imb.c	/^static const unsigned char imb_header[15]= { 0x00, 0x00, 0x00, 'I','n','c','r','e','d','i','m','a','i','l',' '};$/;"	v	file:
img	./src/file_mrw.c	/^  } img;$/;"	m	struct:prd	typeref:struct:prd::__anon2	file:
impulse_header	./src/file_it.c	/^struct impulse_header$/;"	s	file:
inc	./src/next.c	/^  uint64_t inc;$/;"	m	struct:search_location	file:
inc_vacuum_mode	./src/file_sql.c	/^ uint32_t inc_vacuum_mode;$/;"	m	struct:db_header	file:
incompat_flags	./src/btrfs.h	/^	uint64_t incompat_flags;$/;"	m	struct:btrfs_super_block
ind_block	./src/psearch.h	/^static inline int ind_block(const unsigned char *buffer, const unsigned int blocksize)$/;"	f
ind_hdr_size	./src/file_dpx.c	/^  uint32_t   	ind_hdr_size;     \/* industry header length in bytes *\/$/;"	m	struct:header_dpx	file:
indd_header	./src/file_indd.c	/^static const unsigned char indd_header[24]={$/;"	v	file:
index	./src/chgtypen.c	/^  unsigned int index;$/;"	m	struct:part_name_struct	file:
index	./src/ntfs.h	/^\/* 16*\/	TD_INDEX_HEADER index;		\/* Index header describing the$/;"	m	struct:__anon26
indexHeaderOffset	./src/file_wpd.c	/^  uint16_t	indexHeaderOffset;	\/* 14 *\/$/;"	m	struct:wpd_hdr	file:
index_block_size	./src/ntfs.h	/^\/*  8*\/	uint32_t index_block_size;	\/* Size of index block in bytes (in$/;"	m	struct:__anon26
index_get_size	./src/ntfs_dir.c	/^static int index_get_size(ntfs_inode *inode)$/;"	f	file:
index_header_check	./src/filegen.c	/^static unsigned int index_header_check(void)$/;"	f	file:
index_header_check_aux	./src/filegen.c	/^static void index_header_check_aux(file_check_t *file_check_new)$/;"	f	file:
index_length	./src/ntfs.h	/^\/*  4*\/ uint32_t index_length;  \/* Data size in byte of the INDEX_ENTRY's,$/;"	m	struct:__anon22
index_no	./src/file_wv.c	/^    unsigned char index_no;     \/\/ track sub-index (0 if not used, like now)$/;"	m	struct:__anon47	file:
indices	./src/bfs.h	/^    inode_addr   indices;               \/* 0x7C *\/$/;"	m	struct:disk_super_block
indstop_t	./src/godmode.c	/^typedef enum { INDSTOP_CONTINUE=0, INDSTOP_STOP=1, INDSTOP_SKIP=2, INDSTOP_QUIT=3 } indstop_t;$/;"	t	typeref:enum:__anon72	file:
infile	./src/file_jpg.c	/^  FILE * infile;		\/* source stream *\/$/;"	m	struct:__anon60	file:
info	./src/common.h	/^  char          info[80];$/;"	m	struct:partition_struct
info	./src/file_flv.c	/^  uint8_t	info;$/;"	m	struct:flv_tag	file:
info	./src/sun.h	/^  unsigned char info[128];   \/* Informative text string *\/$/;"	m	struct:__anon8
info	./src/sun.h	/^  unsigned char info[52];   \/* Informative text string *\/$/;"	m	struct:struct_sun_partition_i386
info	./src/swap.h	/^  } info;$/;"	m	union:swap_header	typeref:struct:swap_header::__anon62
info_disk_struct	./src/msdos.h	/^struct info_disk_struct$/;"	s
info_fewf_struct	./src/ewf.c	/^struct info_fewf_struct$/;"	s	file:
info_file_struct	./src/hdaccess.c	/^struct info_file_struct$/;"	s	file:
info_file_win32_struct	./src/win32.c	/^struct info_file_win32_struct$/;"	s	file:
info_io_redir	./src/io_redir.c	/^struct info_io_redir$/;"	s	file:
info_list_search_space	./src/photorec.c	/^void info_list_search_space(const alloc_data_t *list_search_space, const alloc_data_t *current_search_space, const unsigned int sector_size, const int keep_corrupted_file, const int verbose)$/;"	f
info_mft_t	./src/ntfs_adv.c	/^typedef struct s_info_mft info_mft_t;$/;"	t	typeref:struct:s_info_mft	file:
info_offset_struct	./src/fat_adv.c	/^struct info_offset_struct$/;"	s	file:
info_offset_t	./src/fat_adv.c	/^typedef struct info_offset_struct info_offset_t;$/;"	t	typeref:struct:info_offset_struct	file:
info_sector	./src/fat.h	/^	uint16_t	info_sector;	\/* 0x30 filesystem info sector *\/$/;"	m	struct:fat_boot_sector
infos	./src/sun.h	/^  } infos[8];$/;"	m	struct:__anon8	typeref:struct:__anon8::sun_info
init_disk	./src/hdaccess.c	/^void init_disk(disk_t *disk)$/;"	f
init_file_stats	./src/filegen.c	/^file_stat_t * init_file_stats(file_enable_t *files_enable)$/;"	f
init_list_part	./src/photorec.c	/^list_part_t *init_list_part(disk_t *disk, const struct ph_options *options)$/;"	f
init_mode_t	./src/phcli.c	/^typedef enum { INIT_SPACE_WHOLE, INIT_SPACE_PREINIT, INIT_SPACE_EXT2_GROUP, INIT_SPACE_EXT2_INODE } init_mode_t;$/;"	t	typeref:enum:__anon51	file:
init_part_order	./src/common.h	/^  list_part_t *(*init_part_order)(const disk_t *disk, list_part_t *list_part);$/;"	m	struct:arch_fnct_struct
init_part_order_gpt	./src/partgpt.c	/^static list_part_t *init_part_order_gpt(const disk_t *disk_car, list_part_t *list_part)$/;"	f	file:
init_part_order_humax	./src/parthumax.c	/^static list_part_t *init_part_order_humax(const disk_t *disk_car, list_part_t *list_part)$/;"	f	file:
init_part_order_i386	./src/parti386.c	/^static list_part_t *init_part_order_i386(const disk_t *disk_car, list_part_t *list_part)$/;"	f	file:
init_part_order_mac	./src/partmac.c	/^static list_part_t *init_part_order_mac(const disk_t *disk_car, list_part_t *list_part)$/;"	f	file:
init_part_order_none	./src/partnone.c	/^static list_part_t *init_part_order_none(const disk_t *disk_car, list_part_t *list_part)$/;"	f	file:
init_part_order_sun	./src/partsun.c	/^static list_part_t *init_part_order_sun(const disk_t *disk_car, list_part_t *list_part)$/;"	f	file:
init_part_order_xbox	./src/partxbox.c	/^static list_part_t *init_part_order_xbox(const disk_t *disk_car, list_part_t *list_part)$/;"	f	file:
init_search_space	./src/photorec.c	/^void init_search_space(alloc_data_t *list_search_space, const disk_t *disk_car, const partition_t *partition)$/;"	f
init_structure	./src/common.h	/^  void (*init_structure)(const disk_t *disk,list_part_t *list_part, const int verbose);$/;"	m	struct:arch_fnct_struct
init_structure_gpt	./src/partgpt.c	/^static void init_structure_gpt(const disk_t *disk_car,list_part_t *list_part, const int verbose)$/;"	f	file:
init_structure_humax	./src/parthumax.c	/^static void init_structure_humax(const disk_t *disk_car,list_part_t *list_part, const int verbose)$/;"	f	file:
init_structure_i386	./src/parti386.c	/^static void init_structure_i386(const disk_t *disk_car,list_part_t *list_part, const int verbose)$/;"	f	file:
init_structure_mac	./src/partmac.c	/^static void init_structure_mac(const disk_t *disk_car,list_part_t *list_part, const int verbose)$/;"	f	file:
init_structure_none	./src/partnone.c	/^static void init_structure_none(const disk_t *disk_car,list_part_t *list_part, const int verbose)$/;"	f	file:
init_structure_sun	./src/partsun.c	/^static void init_structure_sun(const disk_t *disk_car,list_part_t *list_part, const int verbose)$/;"	f	file:
init_structure_xbox	./src/partxbox.c	/^static void init_structure_xbox(const disk_t *disk_car,list_part_t *list_part, const int verbose)$/;"	f	file:
inner_height	./src/file_cwk.c	/^  uint16_t	inner_height;$/;"	m	struct:cwk_header	file:
inner_width	./src/file_cwk.c	/^  uint16_t	inner_width;$/;"	m	struct:cwk_header	file:
inode	./src/ntfs_inc.h	/^	unsigned long int inode;$/;"	m	struct:ntfs_dir_struct
inode	./src/ntfs_udl.c	/^	long long	 inode;		\/* MFT record number *\/$/;"	m	struct:ufile	file:
inode_addr	./src/bfs.h	/^typedef block_run inode_addr;$/;"	t
inode_size	./src/bfs.h	/^    uint32_t        inode_size;            \/* 0x40 # of bytes per inode *\/$/;"	m	struct:disk_super_block
insert_new_disk	./src/fnctdsk.c	/^list_disk_t *insert_new_disk(list_disk_t *list_disk, disk_t *disk)$/;"	f
insert_new_disk_aux	./src/fnctdsk.c	/^list_disk_t *insert_new_disk_aux(list_disk_t *list_disk, disk_t *disk, disk_t **the_disk)$/;"	f
insert_new_disk_nodup	./src/hdaccess.c	/^list_disk_t *insert_new_disk_nodup(list_disk_t *list_disk, disk_t *disk_car, const char *device_name, const int verbose)$/;"	f
insert_new_partition	./src/fnctdsk.c	/^list_part_t *insert_new_partition(list_part_t *list_part, partition_t *part, const int force_insert, int *insert_error)$/;"	f
intLevel	./src/file_spe.c	/^  uint16_t  intLevel;          \/* 1500 interrupt level interface card      *\/$/;"	m	struct:header_spe	file:
interface_adv	./src/adv.c	/^void interface_adv(disk_t *disk_car, const int verbose,const int dump_ind, const unsigned int expert, char**current_cmd)$/;"	f
interface_analyse	./src/tanalyse.c	/^list_part_t *interface_analyse(disk_t *disk_car, const int verbose, const int saveheader, char**current_cmd)$/;"	f
interface_analyse_ncurses	./src/tanalyse.c	/^static list_part_t *interface_analyse_ncurses(disk_t *disk_car, const int verbose, const int saveheader, char**current_cmd)$/;"	f	file:
interface_cannot_create_file	./src/phrecn.c	/^static int interface_cannot_create_file(void)$/;"	f	file:
interface_check_disk_access	./src/diskacc.c	/^int interface_check_disk_access(disk_t *disk_car, char **current_cmd)$/;"	f
interface_check_disk_access_ncurses	./src/diskacc.c	/^static int interface_check_disk_access_ncurses(disk_t *disk_car)$/;"	f	file:
interface_check_disk_capacity	./src/diskcapa.c	/^int interface_check_disk_capacity(disk_t *disk_car)$/;"	f
interface_check_disk_capacity_ncurses	./src/diskcapa.c	/^static int interface_check_disk_capacity_ncurses(disk_t *disk_car)$/;"	f	file:
interface_check_hidden_ncurses	./src/hiddenn.c	/^int interface_check_hidden_ncurses(disk_t *disk, const int hpa_dco)$/;"	f
interface_editor	./src/edit.c	/^void interface_editor(disk_t *disk)$/;"	f
interface_editor_location	./src/edit.c	/^static void interface_editor_location(const disk_t *disk, uint64_t *lba)$/;"	f	file:
interface_editor_ncurses	./src/edit.c	/^static void interface_editor_ncurses(disk_t *disk)$/;"	f	file:
interface_file_select_ncurses	./src/phrecn.c	/^void interface_file_select_ncurses(file_enable_t *files_enable)$/;"	f
interface_list	./src/intrface.c	/^void interface_list(disk_t *disk, const int verbose, const int saveheader, const int backup)$/;"	f
interface_load	./src/tload.c	/^list_part_t *interface_load(disk_t *disk_car,list_part_t *list_part, const int verbose)$/;"	f
interface_load_ncurses	./src/tload.c	/^static struct td_list_head *interface_load_ncurses(disk_t *disk_car, backup_disk_t *backup_list)$/;"	f	file:
interface_options	./src/toptions.c	/^void interface_options(int *dump_ind, int *align, unsigned int *expert, char**current_cmd)$/;"	f
interface_options_ncurses	./src/toptions.c	/^static void interface_options_ncurses(int *dump_ind, int *align, unsigned int *expert)$/;"	f	file:
interface_options_photorec_cli	./src/poptions.c	/^void interface_options_photorec_cli(struct ph_options *options, char **current_cmd)$/;"	f
interface_options_photorec_log	./src/poptions.c	/^void interface_options_photorec_log(const struct ph_options *options)$/;"	f
interface_options_photorec_ncurses	./src/phrecn.c	/^void interface_options_photorec_ncurses(struct ph_options *options)$/;"	f
interface_part_bad_log	./src/godmode.c	/^static int interface_part_bad_log(disk_t *disk_car, list_part_t *list_part)$/;"	f	file:
interface_part_bad_ncurses	./src/godmode.c	/^static int interface_part_bad_ncurses(disk_t *disk_car, list_part_t *list_part)$/;"	f	file:
interface_recovery	./src/godmode.c	/^int interface_recovery(disk_t *disk_car, const list_part_t * list_part_org, const int verbose, const int dump_ind, const int align, const int ask_part_order, const unsigned int expert, char **current_cmd)$/;"	f
interface_superblock	./src/ext2_sb.c	/^int interface_superblock(disk_t *disk_car,list_part_t *list_part, char**current_cmd)$/;"	f
interface_type	./src/file_spe.c	/^  uint16_t  interface_type;    \/* 1486 computer interface (isa-taxi,       *\/$/;"	m	struct:header_spe	file:
interface_write	./src/tpartwr.c	/^int interface_write(disk_t *disk_car,list_part_t *list_part,const int can_search_deeper, const int can_ask_minmax_ext, int *no_confirm, char **current_cmd, unsigned int *menu)$/;"	f
interleaver_ID	./src/file_ra.c	/^  char     interleaver_ID[4];$/;"	m	struct:ra4_header	file:
interleaver_ID_length	./src/file_ra.c	/^  char     interleaver_ID_length; \/* always 4 *\/$/;"	m	struct:ra4_header	file:
intr_buffer_screen	./src/intrf.c	/^char intr_buffer_screen[MAX_LINES][BUFFER_LINE_LENGTH+1];$/;"	v
intr_nbr_line	./src/intrf.c	/^int intr_nbr_line=0;$/;"	v
intrf_no_disk_ncurses	./src/nodisk.c	/^int intrf_no_disk_ncurses(const char *prog_name)$/;"	f
ioAdd1	./src/file_spe.c	/^  uint32_t ioAdd1;            \/* 1488 I\/O address of inteface card.       *\/$/;"	m	struct:header_spe	file:
ioAdd2	./src/file_spe.c	/^  uint32_t ioAdd2;            \/* 1492 if more than one address for card.  *\/$/;"	m	struct:header_spe	file:
ioAdd3	./src/file_spe.c	/^  uint32_t ioAdd3;            \/* 1496                                     *\/$/;"	m	struct:header_spe	file:
io_align	./src/btrfs.h	/^	uint32_t io_align;$/;"	m	struct:btrfs_dev_item
io_redir_add_redir	./src/io_redir.c	/^int io_redir_add_redir(disk_t *disk_car, const uint64_t org_offset, const unsigned int size, const uint64_t new_offset, const void *mem)$/;"	f
io_redir_clean	./src/io_redir.c	/^static void io_redir_clean(disk_t *disk_car)$/;"	f	file:
io_redir_del_redir	./src/io_redir.c	/^int io_redir_del_redir(disk_t *disk_car, uint64_t org_offset)$/;"	f
io_redir_pread	./src/io_redir.c	/^static int io_redir_pread(disk_t *disk_car, void *buffer, const unsigned int count, const uint64_t offset)$/;"	f	file:
io_width	./src/btrfs.h	/^	uint32_t io_width;$/;"	m	struct:btrfs_dev_item
ip	./src/pe.h	/^    uint16_t ip;$/;"	m	struct:dos_image_file_hdr
is_EOC	./src/exfat_dir.c	/^static int is_EOC(const unsigned int cluster)$/;"	f	file:
is_EOC	./src/fat_dir.c	/^static int is_EOC(const unsigned int cluster, const upart_type_t upart_type)$/;"	f	file:
is_encrypted	./src/file_zip.c	/^  uint16_t is_encrypted:1;          \/** File is encrypted? *\/$/;"	m	struct:zip_file_entry	file:
is_exfat	./src/adv.c	/^static int is_exfat(const partition_t *partition)$/;"	f	file:
is_extended	./src/parti386.c	/^static int is_extended(const unsigned int part_type)$/;"	f	file:
is_fat	./src/fat.c	/^int is_fat(const partition_t *partition)$/;"	f
is_fat12	./src/fat.c	/^static int is_fat12(const partition_t *partition)$/;"	f	file:
is_fat16	./src/fat.c	/^static int is_fat16(const partition_t *partition)$/;"	f	file:
is_fat32	./src/fat.c	/^static int is_fat32(const partition_t *partition)$/;"	f	file:
is_fat_directory	./src/fat_common.c	/^int is_fat_directory(const unsigned char *buffer)$/;"	f
is_hfs	./src/adv.c	/^static int is_hfs(const partition_t *partition)$/;"	f	file:
is_hfsp	./src/adv.c	/^static int is_hfsp(const partition_t *partition)$/;"	f	file:
is_hpa_or_dco	./src/hidden.c	/^int is_hpa_or_dco(const disk_t *disk)$/;"	f
is_ini	./src/file_txt.c	/^static int is_ini(const char *buffer)$/;"	f	file:
is_line_cut	./src/file_jpg.c	/^static unsigned int is_line_cut(const unsigned int output_scanline, const unsigned int output_width, const unsigned int output_components, const unsigned char *frame, const unsigned int y)$/;"	f	file:
is_linux	./src/adv.c	/^static int is_linux(const partition_t *partition)$/;"	f	file:
is_marker_valid	./src/file_jpg.c	/^static int is_marker_valid(const unsigned int marker)$/;"	f	file:
is_ntfs	./src/ntfs.c	/^int is_ntfs(const partition_t *partition)$/;"	f
is_part_fat	./src/fat.c	/^int is_part_fat(const partition_t *partition)$/;"	f
is_part_fat12	./src/fat.c	/^int is_part_fat12(const partition_t *partition)$/;"	f
is_part_fat16	./src/fat.c	/^int is_part_fat16(const partition_t *partition)$/;"	f
is_part_fat32	./src/fat.c	/^int is_part_fat32(const partition_t *partition)$/;"	f
is_part_hfs	./src/adv.c	/^static int is_part_hfs(const partition_t *partition)$/;"	f	file:
is_part_hfsp	./src/adv.c	/^static int is_part_hfsp(const partition_t *partition)$/;"	f	file:
is_part_known	./src/common.h	/^  int (*is_part_known)(const partition_t *partition);$/;"	m	struct:arch_fnct_struct
is_part_known_gpt	./src/partgpt.c	/^static int is_part_known_gpt(const partition_t *partition)$/;"	f	file:
is_part_known_i386	./src/parti386.c	/^static int is_part_known_i386(const partition_t *partition)$/;"	f	file:
is_part_known_mac	./src/partmac.c	/^static int is_part_known_mac(const partition_t *partition)$/;"	f	file:
is_part_known_none	./src/partnone.c	/^static int is_part_known_none(const partition_t *partition)$/;"	f	file:
is_part_known_sun	./src/partsun.c	/^static int is_part_known_sun(const partition_t *partition)$/;"	f	file:
is_part_known_xbox	./src/partxbox.c	/^static int is_part_known_xbox(const partition_t *partition)$/;"	f	file:
is_part_linux	./src/adv.c	/^int is_part_linux(const partition_t *partition)$/;"	f
is_part_ntfs	./src/ntfs.c	/^int is_part_ntfs(const partition_t *partition)$/;"	f
is_part_overlapping	./src/fnctdsk.c	/^int is_part_overlapping(const list_part_t *list_part)$/;"	f
is_patched	./src/file_zip.c	/^  uint16_t is_patched:1;            \/** File is compressed with patched data? *\/$/;"	m	struct:zip_file_entry	file:
is_valid_S2K	./src/file_gpg.c	/^static int is_valid_S2K(const unsigned int algo)$/;"	f	file:
is_valid_mpi	./src/file_gpg.c	/^static int is_valid_mpi(const uint16_t *size)$/;"	f	file:
is_valid_pubkey_algo	./src/file_gpg.c	/^static  int is_valid_pubkey_algo(const int algo)$/;"	f	file:
is_valid_sym_algo	./src/file_gpg.c	/^static int is_valid_sym_algo(const int algo)$/;"	f	file:
is_valid_type	./src/file_mlv.c	/^static int is_valid_type(const mlv_hdr_t *hdr)$/;"	f	file:
iso_header	./src/file_iso.c	/^static const unsigned char iso_header[6]= { 0x01, 'C', 'D', '0', '0', '1'};$/;"	v	file:
iso_primary_descriptor	./src/iso9660.h	/^struct iso_primary_descriptor$/;"	s
itemHeader	./src/file_nk2.c	/^} itemHeader;$/;"	t	typeref:struct:__anon6	file:
items_count	./src/file_nk2.c	/^  uint32_t items_count;$/;"	m	struct:__anon5	file:
jfs_superblock	./src/jfs_superblock.h	/^struct jfs_superblock {$/;"	s
jinit_memory_mgr	./src/suspend.c	/^GLOBAL(void) jinit_memory_mgr (j_common_ptr cinfo)$/;"	f
jmp_boot	./src/exfat.h	/^        unsigned char   jmp_boot[3];            \/* boot strap short or near jump *\/$/;"	m	struct:exfat_super_block
jpeg_init_session	./src/file_jpg.c	/^static void jpeg_init_session(struct jpeg_session_struct *jpeg_session)$/;"	f	file:
jpeg_session_delete	./src/file_jpg.c	/^static void jpeg_session_delete(struct jpeg_session_struct *jpeg_session)$/;"	f	file:
jpeg_session_resume	./src/file_jpg.c	/^static inline int jpeg_session_resume(struct jpeg_session_struct *jpeg_session)$/;"	f	file:
jpeg_session_start	./src/file_jpg.c	/^static void jpeg_session_start(struct jpeg_session_struct *jpeg_session)$/;"	f	file:
jpeg_session_struct	./src/file_jpg.c	/^struct jpeg_session_struct$/;"	s	file:
jpeg_session_suspend	./src/file_jpg.c	/^static inline void jpeg_session_suspend(struct jpeg_session_struct *jpeg_session)$/;"	f	file:
jpeg_testdisk_src	./src/file_jpg.c	/^static void jpeg_testdisk_src (j_decompress_ptr cinfo, FILE * infile, uint64_t offset, const unsigned int blocksize)$/;"	f	file:
jpg_check_dht	./src/file_jpg.c	/^static int jpg_check_dht(const unsigned char *buffer, const unsigned int buffer_size, const unsigned i, const unsigned int size)$/;"	f	file:
jpg_check_picture	./src/file_jpg.c	/^static void jpg_check_picture(file_recovery_t *file_recovery)$/;"	f	file:
jpg_check_structure	./src/file_jpg.c	/^static uint64_t jpg_check_structure(file_recovery_t *file_recovery, const unsigned int extract_thumb)$/;"	f	file:
jpg_check_thumb	./src/file_jpg.c	/^static uint64_t jpg_check_thumb(FILE *infile, const uint64_t offset, const unsigned int blocksize, const uint64_t checkpoint_offset, const unsigned int flags)$/;"	f	file:
jpg_fill_input_buffer	./src/file_jpg.c	/^static int jpg_fill_input_buffer (j_decompress_ptr cinfo)$/;"	f	file:
jpg_find_border	./src/file_jpg.c	/^static unsigned int jpg_find_border(const unsigned int output_scanline, const unsigned int output_width, const unsigned int output_components, const unsigned char *frame)$/;"	f	file:
jpg_find_error	./src/file_jpg.c	/^static uint64_t jpg_find_error(FILE *handle, const unsigned int output_scanline, const unsigned int output_width, const unsigned int output_components, const unsigned char *frame, const unsigned int *offsets, const uint64_t offset, const unsigned int blocksize, const uint64_t checkpoint_offset)$/;"	f	file:
jpg_get_size	./src/file_jpg.c	/^static void jpg_get_size(const unsigned char *buffer, const unsigned int buffer_size, unsigned int *height, unsigned int *width)$/;"	f	file:
jpg_init_source	./src/file_jpg.c	/^static void jpg_init_source (j_decompress_ptr cinfo)$/;"	f	file:
jpg_offset	./src/file_raf.c	/^  uint32_t jpg_offset;$/;"	m	struct:header_raf	file:
jpg_search_marker	./src/file_jpg.c	/^static void jpg_search_marker(file_recovery_t *file_recovery)$/;"	f	file:
jpg_size	./src/file_raf.c	/^  uint32_t jpg_size;$/;"	m	struct:header_raf	file:
jpg_skip_input_data	./src/file_jpg.c	/^static void jpg_skip_input_data (j_decompress_ptr cinfo, long num_bytes)$/;"	f	file:
jpg_term_source	./src/file_jpg.c	/^static void jpg_term_source (j_decompress_ptr cinfo)$/;"	f	file:
jpg_xy_to_offset	./src/file_jpg.c	/^static uint64_t jpg_xy_to_offset(FILE *infile, const unsigned int x, const unsigned y,$/;"	f	file:
jvirt_barray_control	./src/suspend.c	/^struct jvirt_barray_control {$/;"	s	file:
jvirt_sarray_control	./src/suspend.c	/^struct jvirt_sarray_control {$/;"	s	file:
kINDDContigObjHeaderGUID	./src/file_indd.c	/^static const unsigned char kINDDContigObjHeaderGUID [16] =$/;"	v	file:
kdb_header	./src/file_kdb.c	/^static const unsigned char kdb_header[8]= {0x03, 0xd9, 0xa2, 0x9a, 0x65, 0xfb, 0x4b, 0xb5};$/;"	v	file:
keep_corrupted_file	./src/photorec.h	/^  int keep_corrupted_file;$/;"	m	struct:ph_options
key	./src/file_dpx.c	/^  uint32_t   	key;              \/* encryption ( FFFFFFFF = unencrypted ) *\/$/;"	m	struct:header_dpx	file:
key	./src/intrf.h	/^    const int key; \/* Keyboard shortcut; if zero, then there is no more items in the menu item table *\/$/;"	m	struct:MenuItem
keyBytes	./src/luks.h	/^  uint32_t	keyBytes;$/;"	m	struct:luks_phdr
keyMaterialOffset	./src/luks.h	/^  uint32_t	keyMaterialOffset;$/;"	m	struct:luks_keyslot
key_CR	./src/intrf.h	54;"	d
key_ESC	./src/intrf.h	55;"	d
key_REDRAWKEY	./src/intrf.h	57;"	d
keyslot	./src/luks.h	/^  luks_keyslot_t keyslot[LUKS_NUMKEYS];$/;"	m	struct:luks_phdr
kin_trig_mode	./src/file_spe.c	/^  int16_t           kin_trig_mode;     \/*  724  Kinetics Trigger Mode              *\/$/;"	m	struct:header_spe	file:
l1_size	./src/file_cow.c	/^    uint32_t l1_size; \/* XXX: save number of clusters instead ? *\/$/;"	m	struct:QCowHeader	file:
l1_table_offset	./src/file_cow.c	/^    uint64_t l1_table_offset;$/;"	m	struct:QCowHeader	file:
l1_table_offset	./src/file_cow.c	/^    uint64_t l1_table_offset;$/;"	m	struct:__anon48	file:
l1dir_offset	./src/file_vmdk.c	/^  uint32_t l1dir_offset;$/;"	m	struct:__anon38	file:
l1dir_size	./src/file_vmdk.c	/^  uint32_t l1dir_size;$/;"	m	struct:__anon38	file:
l2_bits	./src/file_cow.c	/^    uint8_t l2_bits;$/;"	m	struct:__anon48	file:
label	./src/btrfs.h	/^	char label[BTRFS_LABEL_SIZE];$/;"	m	struct:btrfs_super_block
label	./src/rfs.h	/^  char label[16];         \/* filesystem label *\/$/;"	m	struct:reiser4_master_sb
largest_root_btree	./src/file_sql.c	/^ uint32_t largest_root_btree;$/;"	m	struct:db_header	file:
lastBackupDate	./src/file_prc.c	/^  uint32_t      lastBackupDate;		\/* 0x2a *\/$/;"	m	struct:DatabaseHdrType_s	file:
lastVCN	./src/ntfs.h	/^  uint64_t lastVCN;             \/* Last VCN *\/$/;"	m	struct:_ntfs_attribnonresident
last_access_time	./src/ntfs.h	/^\/* 20*\/	int64_t last_access_time;		\/* Last time this mft record was$/;"	m	struct:__anon23
last_data_change_time	./src/ntfs.h	/^\/* 10*\/	int64_t last_data_change_time;	\/* Time the data attribute was last$/;"	m	struct:__anon23
last_io_error_nbr	./src/hdcache.c	/^  unsigned int  last_io_error_nbr;$/;"	m	struct:cache_struct	file:
last_mft_change_time	./src/ntfs.h	/^\/* 18*\/	int64_t last_mft_change_time;	\/* Time this mft record was last$/;"	m	struct:__anon23
last_mod_date	./src/file_zip.c	/^  uint16_t last_mod_date;           \/** Last moditication file date *\/$/;"	m	struct:zip_file_entry	file:
last_mod_time	./src/file_zip.c	/^  uint16_t last_mod_time;           \/** Last moditication file time *\/$/;"	m	struct:zip_file_entry	file:
last_mount_vers	./src/hfsp.h	/^        uint32_t         last_mount_vers; \/\/ 08$/;"	m	struct:hfsp_vh
last_page	./src/swap.h	/^	unsigned int last_page;$/;"	m	struct:swap_header::__anon62
last_rowsperchunk	./src/suspend.c	/^  JDIMENSION last_rowsperchunk;	\/* from most recent alloc_sarray\/barray *\/$/;"	m	struct:my_memory_mgr	file:
lastvalue	./src/file_spe.c	/^  int16_t           lastvalue;         \/* 4098 Always the LAST value in the header *\/$/;"	m	struct:header_spe	file:
lavgexp	./src/file_spe.c	/^  int32_t          lavgexp;           \/*  668  int32_t num of accumulations          *\/$/;"	m	struct:header_spe	file:
layout	./src/md.h	/^	uint32_t	layout;		\/* only for raid5 and raid10 currently *\/$/;"	m	struct:mdp_superblock_1
layout	./src/md.h	/^	uint32_t layout;		\/*  0 the array's physical layout	      *\/$/;"	m	struct:mdp_superblock_s
lcase	./src/fat.h	/^	uint8_t    lcase;		\/* 0C Case for base and extension *\/$/;"	m	struct:msdos_dir_entry
ldf_header	./src/file_ldf.c	/^static const unsigned char ldf_header[4]= { 0x01, 0x0f, 0x00, 0x00 };$/;"	v	file:
le16	./src/common.h	443;"	d
le16	./src/common.h	462;"	d
le24	./src/common.h	446;"	d
le24	./src/common.h	466;"	d
le32	./src/common.h	447;"	d
le32	./src/common.h	469;"	d
le64	./src/common.h	452;"	d
le64	./src/common.h	474;"	d
le_num	./src/lvm.h	/^	uint16_t le_num;$/;"	m	struct:__anon11
leadsig	./src/fat.h	/^  uint32_t leadsig;		\/* 0x41615252 *\/$/;"	m	struct:fat_fsinfo
leaf_payload_frac	./src/file_sql.c	/^ uint8_t  leaf_payload_frac;$/;"	m	struct:db_header	file:
leafsize	./src/btrfs.h	/^	uint32_t leafsize;$/;"	m	struct:btrfs_super_block
left	./src/file_emf.c	/^  int32_t left;$/;"	m	struct:__anon20	file:
len	./src/bfs.h	/^    uint16_t  len;       \/* in blocks *\/$/;"	m	struct:block_run
len	./src/file_exe.c	/^  uint16_t len;$/;"	m	struct:PE_index	file:
len	./src/file_flp.c	/^  uint32_t len;		\/* = 6 *\/$/;"	m	struct:flp_header	file:
len	./src/file_fs.c	/^  uint64_t len;$/;"	m	struct:transaction_header	file:
len	./src/file_mid.c	/^  uint32_t len;		\/* = 6 *\/$/;"	m	struct:midi_header	file:
len	./src/file_txt.c	/^  const unsigned int len;$/;"	m	struct:__anon46	file:
len	./src/jfs_superblock.h	/^	unsigned len:24;$/;"	m	struct:__anon41
len2	./src/file_flp.c	/^  uint32_t len2;$/;"	m	struct:flp_header	file:
len_descr	./src/file_fs.c	/^  uint16_t len_descr;$/;"	m	struct:transaction_header	file:
len_ext	./src/file_fs.c	/^  uint16_t len_ext;$/;"	m	struct:transaction_header	file:
len_username	./src/file_fs.c	/^  uint16_t len_username;$/;"	m	struct:transaction_header	file:
length	./src/file_hdf.c	/^  uint32_t	length;$/;"	m	struct:dd_struct	file:
length	./src/file_png.c	/^  uint32_t length;$/;"	m	struct:png_chunk	file:
length	./src/file_ttf.c	/^  uint32_t 	length; 	\/* Length of this table. *\/$/;"	m	struct:ttf_table_directory	file:
length	./src/file_woff.c	/^  uint32_t	length;$/;"	m	struct:WOFFHeader	file:
length	./src/filegen.h	/^  unsigned int length;$/;"	m	struct:__anon67
level	./src/file_lzh.c	/^  uint8_t  level;$/;"	m	struct:lzh_level0	file:
level	./src/file_lzh.c	/^  uint8_t  level;$/;"	m	struct:lzh_level1	file:
level	./src/file_lzh.c	/^  uint8_t  level;$/;"	m	struct:lzh_level2	file:
level	./src/md.h	/^	uint32_t	level;		\/* -4 (multipath), -1 (linear), 0,1,4,5 *\/$/;"	m	struct:mdp_superblock_1
level	./src/md.h	/^	uint32_t level;		\/*  7 Raid personality			      *\/$/;"	m	struct:mdp_superblock_s
level	./src/ole.h	/^	int32_t		level;$/;"	m	struct:DIRECTORY
lexpos	./src/file_spe.c	/^  int32_t          lexpos;            \/*  660  int32_t exposure in milliseconds      *\/$/;"	m	struct:header_spe	file:
link_count	./src/ntfs.h	/^  uint16_t	link_count;$/;"	m	struct:ntfs_mft_record
link_off	./src/file_dex.c	/^  uint32_t	link_off;$/;"	m	struct:dex_header	file:
link_size	./src/file_dex.c	/^  uint32_t	link_size;$/;"	m	struct:dex_header	file:
list	./src/dir.h	/^  struct td_list_head list;$/;"	m	struct:__anon50	typeref:struct:__anon50::td_list_head
list	./src/filegen.h	/^  struct td_list_head list;$/;"	m	struct:__anon66	typeref:struct:__anon66::td_list_head
list	./src/filegen.h	/^  struct td_list_head list;$/;"	m	struct:__anon67	typeref:struct:__anon67::td_list_head
list	./src/filegen.h	/^  struct td_list_head list;$/;"	m	struct:__anon68	typeref:struct:__anon68::td_list_head
list	./src/list.h	/^  struct td_list_head list;$/;"	m	struct:alloc_list_s	typeref:struct:alloc_list_s::td_list_head
list	./src/ntfs_udl.c	/^	struct td_list_head list;		\/* Previous\/Next links *\/$/;"	m	struct:data	typeref:struct:data::td_list_head	file:
list	./src/ntfs_udl.c	/^	struct td_list_head list;		\/* Previous\/Next links *\/$/;"	m	struct:filename	typeref:struct:filename::td_list_head	file:
list	./src/savehdr.h	/^  struct td_list_head list;$/;"	m	struct:__anon18	typeref:struct:__anon18::td_list_head
list_dir_proc2	./src/ext2_dir.c	/^static int list_dir_proc2(ext2_ino_t dir,$/;"	f	file:
list_disk	./src/qphotorec.h	/^		list_disk_t		*list_disk;$/;"	m	class:QPhotorec
list_disk_struct	./src/common.h	/^struct list_disk_struct$/;"	s
list_disk_t	./src/common.h	/^typedef struct list_disk_struct list_disk_t;$/;"	t	typeref:struct:list_disk_struct
list_file_enable	./src/file_list.c	/^file_enable_t list_file_enable[]=$/;"	v
list_file_format	./src/photorec.h	/^  file_enable_t *list_file_format;$/;"	m	struct:ph_options
list_part	./src/qphotorec.h	/^		list_part_t 		*list_part;$/;"	m	class:QPhotorec
list_part	./src/savehdr.h	/^  list_part_t *list_part;$/;"	m	struct:__anon18
list_part_struct	./src/common.h	/^struct list_part_struct$/;"	s
list_part_t	./src/common.h	/^typedef struct list_part_struct list_part_t;$/;"	t	typeref:struct:list_part_struct
list_redir	./src/io_redir.c	/^  list_redir_t *list_redir;$/;"	m	struct:info_io_redir	file:
list_redir_t	./src/io_redir.c	/^typedef struct struclist_redir_t list_redir_t;$/;"	t	typeref:struct:struclist_redir_t	file:
lit_header	./src/file_lit.c	/^static const unsigned char lit_header[12]=  {$/;"	v	file:
lmask	./src/dir.c	/^  unsigned int lmask;$/;"	m	struct:__anon10	file:
lnk_header	./src/file_lnk.c	/^static const unsigned char lnk_header[20]= {$/;"	v	file:
lnk_header_s	./src/file_lnk.c	/^struct lnk_header_s {$/;"	s	file:
lnk_reserved	./src/file_lnk.c	/^static const unsigned char lnk_reserved[10]= {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};$/;"	v	file:
lnoscan	./src/file_spe.c	/^  int32_t          lnoscan;           \/*  664  int32_t num of scans                  *\/$/;"	m	struct:header_spe	file:
local_dir	./src/dir.h	/^  char *local_dir;$/;"	m	struct:dir_data
location	./src/filegen.h	/^  alloc_list_t location;$/;"	m	struct:file_recovery_struct
log_CHS_from_LBA	./src/intrf.c	/^void log_CHS_from_LBA(const disk_t *disk_car, const unsigned long int pos_LBA)$/;"	f
log_all_partitions	./src/log_part.c	/^void log_all_partitions(const disk_t *disk, const list_part_t *list_part)$/;"	f
log_blocks	./src/bfs.h	/^    block_run    log_blocks;             \/* 0x58 a block_run of the log blocks *\/$/;"	m	struct:disk_super_block
log_close	./src/log.c	/^int log_close(void)$/;"	f
log_critical	./src/log.h	62;"	d
log_debug	./src/log.h	53;"	d
log_disk_list	./src/fnctdsk.c	/^void log_disk_list(list_disk_t *list_disk)$/;"	f
log_dos_entry	./src/parti386.c	/^static void log_dos_entry(const struct partition_dos *entree)$/;"	f	file:
log_end	./src/bfs.h	/^    uint64_t        log_end;                \/* 0x68 block # of the end of the log *\/$/;"	m	struct:disk_super_block
log_error	./src/log.h	60;"	d
log_fat2_info	./src/fat.c	/^int log_fat2_info(const struct fat_boot_sector*fh1, const struct fat_boot_sector*fh2, const upart_type_t upart_type, const unsigned int sector_size)$/;"	f
log_fat_info	./src/fat.c	/^static int log_fat_info(const struct fat_boot_sector*fh1, const upart_type_t upart_type, const unsigned int sector_size)$/;"	f	file:
log_flush	./src/log.c	/^int log_flush(void)$/;"	f
log_handle	./src/log.c	/^static FILE *log_handle=NULL;$/;"	v	file:
log_handler	./src/log.c	/^static int log_handler(const char *_format, va_list ap)$/;"	f	file:
log_info	./src/log.h	56;"	d
log_levels	./src/log.c	/^static unsigned int log_levels=LOG_LEVEL_TRACE|LOG_LEVEL_QUIET|LOG_LEVEL_INFO|LOG_LEVEL_VERBOSE|LOG_LEVEL_PROGRESS|LOG_LEVEL_WARNING|LOG_LEVEL_ERROR|LOG_LEVEL_PERROR|LOG_LEVEL_CRITICAL;$/;"	v	file:
log_list_file	./src/dir.c	/^int log_list_file(const disk_t *disk, const partition_t *partition, const dir_data_t *dir_data, const file_info_t*list)$/;"	f
log_ntfs2_info	./src/ntfs_adv.c	/^int log_ntfs2_info(const struct ntfs_boot_sector *nh1, const struct ntfs_boot_sector *nh2)$/;"	f
log_ntfs_info	./src/ntfs.c	/^int log_ntfs_info(const struct ntfs_boot_sector *ntfs_header)$/;"	f
log_open	./src/log.c	/^FILE *log_open(const char*default_filename, const int mode, int *errsv)$/;"	f
log_open_default	./src/log.c	/^FILE *log_open_default(const char*default_filename, const int mode, int *errsv)$/;"	f
log_partition	./src/log_part.c	/^void log_partition(const disk_t *disk, const partition_t *partition)$/;"	f
log_perror	./src/log.h	61;"	d
log_progress	./src/log.h	58;"	d
log_quiet	./src/log.h	55;"	d
log_redirect	./src/log.c	/^int log_redirect(unsigned int level, const char *format, ...)$/;"	f
log_riff_chunk	./src/file_riff.c	/^static void log_riff_chunk(const uint64_t offset, const unsigned int depth, const riff_list_header *list_header)$/;"	f	file:
log_riff_list	./src/file_riff.c	/^static void log_riff_list(const uint64_t offset, const unsigned int depth, const riff_list_header *list_header)$/;"	f	file:
log_root	./src/btrfs.h	/^	uint64_t log_root;$/;"	m	struct:btrfs_super_block
log_root_level	./src/btrfs.h	/^	uint8_t log_root_level;$/;"	m	struct:btrfs_super_block
log_root_transid	./src/btrfs.h	/^	uint64_t log_root_transid;$/;"	m	struct:btrfs_super_block
log_set_levels	./src/log.c	/^int log_set_levels(const unsigned int levels)$/;"	f
log_start	./src/bfs.h	/^    uint64_t        log_start;              \/* 0x60 block # of the beginning *\/$/;"	m	struct:disk_super_block
log_trace	./src/log.h	54;"	d
log_verbose	./src/log.h	57;"	d
log_warning	./src/log.h	59;"	d
logic_header	./src/file_logic.c	/^static const unsigned char logic_header[12]= {$/;"	v	file:
logical_block_size	./src/iso9660.h	/^	char logical_block_size[4];$/;"	m	struct:iso_primary_descriptor
lowmem	./src/photorec.h	/^  unsigned int lowmem;$/;"	m	struct:ph_options
ls_BUP	./src/file_ifo.c	/^  uint32_t ls_BUP[4];$/;"	m	struct:ifo_hdr	file:
ls_IFO	./src/file_ifo.c	/^  uint32_t ls_IFO;$/;"	m	struct:ifo_hdr	file:
lsn	./src/ntfs.h	/^  uint64_t	lsn;$/;"	m	struct:ntfs_mft_record
lso_header	./src/file_lso.c	/^static const unsigned char lso_header[14]=  {$/;"	v	file:
luks_header	./src/file_luks.c	/^static const unsigned char luks_header[6]=  {$/;"	v	file:
luks_keyslot	./src/luks.h	/^struct luks_keyslot {$/;"	s
luks_keyslot_t	./src/luks.h	/^typedef struct luks_keyslot luks_keyslot_t;$/;"	t	typeref:struct:luks_keyslot
luks_phdr	./src/luks.h	/^struct luks_phdr {$/;"	s
lv_cur	./src/lvm.h	/^	uint32_t lv_cur;$/;"	m	struct:__anon13
lv_num	./src/lvm.h	/^	uint16_t lv_num;$/;"	m	struct:__anon11
lv_on_disk	./src/lvm.h	/^	lvm_disk_data_t lv_on_disk;$/;"	m	struct:__anon13
lvm2_disk_locn	./src/lvm.h	/^struct lvm2_disk_locn {$/;"	s
lvm2_label_header	./src/lvm.h	/^struct lvm2_label_header {$/;"	s
lvm2_pv_header	./src/lvm.h	/^struct lvm2_pv_header {$/;"	s
lvm_disk_data_t	./src/lvm.h	/^} lvm_disk_data_t;$/;"	t	typeref:struct:__anon12
lxo_header	./src/file_lxo.c	/^struct lxo_header$/;"	s	file:
lzh_level0	./src/file_lzh.c	/^struct lzh_level0$/;"	s	file:
lzh_level1	./src/file_lzh.c	/^struct lzh_level1$/;"	s	file:
lzh_level2	./src/file_lzh.c	/^struct lzh_level2$/;"	s	file:
lzo_header	./src/file_lzo.c	/^static const unsigned char lzo_header[9]=  {$/;"	v	file:
m_bHighResolution	./src/file_ddf.c	/^  uint32_t m_bHighResolution;$/;"	m	struct:MasterHeader	file:
m_bReverse	./src/file_ddf.c	/^  uint32_t m_bReverse; \/\/ TRUE if lens down orientation$/;"	m	struct:MasterHeader	file:
m_bTimeLapse	./src/file_ddf.c	/^  uint32_t m_bTimeLapse; \/\/ flag for time lapse data recording$/;"	m	struct:MasterHeader	file:
m_cDate	./src/file_ddf.c	/^  char     m_cDate[32]; \/\/ date string$/;"	m	struct:MasterHeader	file:
m_cHeaderID	./src/file_ddf.c	/^  char     m_cHeaderID[256]; \/\/ annotation string$/;"	m	struct:MasterHeader	file:
m_cRsvdData	./src/file_ddf.c	/^  char	   m_cRsvdData[120]; \/\/ (120) pad to 512 bytes$/;"	m	struct:MasterHeader	file:
m_fSampleRate	./src/file_ddf.c	/^  float    m_fSampleRate; \/\/ dependent on Window Length$/;"	m	struct:MasterHeader	file:
m_iRadioSeconds	./src/file_ddf.c	/^  int32_t  m_iRadioSeconds; \/\/ 0 = N frames interval, 1 = N seconds interval$/;"	m	struct:MasterHeader	file:
m_iUserID1	./src/file_ddf.c	/^  int32_t  m_iUserID1; \/\/ Four user ID values displayed in header pane$/;"	m	struct:MasterHeader	file:
m_iUserID2	./src/file_ddf.c	/^  int32_t  m_iUserID2; \/\/ These values are inserted by user external via$/;"	m	struct:MasterHeader	file:
m_iUserID3	./src/file_ddf.c	/^  int32_t  m_iUserID3; \/\/ the Edit->Header ID command$/;"	m	struct:MasterHeader	file:
m_iUserID4	./src/file_ddf.c	/^  int32_t  m_iUserID4;$/;"	m	struct:MasterHeader	file:
m_n3DFlags	./src/file_ddf.c	/^  uint32_t m_n3DFlags; \/\/ reserved...currently unused$/;"	m	struct:MasterHeader	file:
m_nAuxFlags	./src/file_ddf.c	/^  uint32_t m_nAuxFlags; \/\/ types of aux information present (see Table 2)$/;"	m	struct:MasterHeader	file:
m_nEndFrame	./src/file_ddf.c	/^  uint32_t m_nEndFrame; \/\/ for snippet or truncated file, from source file$/;"	m	struct:MasterHeader	file:
m_nFlags	./src/file_ddf.c	/^  uint32_t m_nFlags; \/\/ save displayed processing flags (see Table 1)$/;"	m	struct:MasterHeader	file:
m_nFrameInterval	./src/file_ddf.c	/^  uint32_t m_nFrameInterval; \/\/ interval between saved frames (N frames)$/;"	m	struct:MasterHeader	file:
m_nFrameRate	./src/file_ddf.c	/^  uint32_t m_nFrameRate; \/\/ requested frame rate...actual rate may differ$/;"	m	struct:MasterHeader	file:
m_nFrameTotal	./src/file_ddf.c	/^  uint32_t m_nFrameTotal;$/;"	m	struct:MasterHeader	file:
m_nNumRawBeams	./src/file_ddf.c	/^  uint32_t m_nNumRawBeams; \/\/ Std HF = 96, Std LF and LR HF\/LF = 48, may be 64 or 128 if v5$/;"	m	struct:MasterHeader	file:
m_nReceiverGain	./src/file_ddf.c	/^  uint32_t m_nReceiverGain; \/\/ relative value, 0-40 dB$/;"	m	struct:MasterHeader	file:
m_nRecordInterval	./src/file_ddf.c	/^  uint32_t m_nRecordInterval; \/\/ interval between saved frames (N seconds)$/;"	m	struct:MasterHeader	file:
m_nSN	./src/file_ddf.c	/^  uint32_t m_nSN; \/\/ serial number of sonar$/;"	m	struct:MasterHeader	file:
m_nSamplesPerChannel	./src/file_ddf.c	/^  uint32_t m_nSamplesPerChannel; \/\/ always 512$/;"	m	struct:MasterHeader	file:
m_nSspd	./src/file_ddf.c	/^  uint32_t m_nSspd; \/\/ sound velocity in water from DidsonV6.ini$/;"	m	struct:MasterHeader	file:
m_nStartFrame	./src/file_ddf.c	/^  uint32_t m_nStartFrame; \/\/ for snippet or truncated file, from source file$/;"	m	struct:MasterHeader	file:
m_nVersion	./src/file_ddf.c	/^  uint32_t m_nVersion; \/\/ VERSION_DDF_03 = 0x03464444$/;"	m	struct:MasterHeader	file:
m_nWindowLength	./src/file_ddf.c	/^  uint32_t m_nWindowLength; \/\/ code: value in master header is initial value$/;"	m	struct:MasterHeader	file:
m_nWindowStart	./src/file_ddf.c	/^  uint32_t m_nWindowStart; \/\/ code: value in master header is initial value$/;"	m	struct:MasterHeader	file:
mac_Block0	./src/partmac.h	/^typedef struct Block0 mac_Block0;$/;"	t	typeref:struct:Block0
mac_DDMap	./src/partmac.h	/^typedef struct DDMap mac_DDMap;$/;"	t	typeref:struct:DDMap
mac_DPME	./src/partmac.h	/^typedef struct dpme mac_DPME;$/;"	t	typeref:struct:dpme
mac_sys_types	./src/partmac.c	/^static const struct systypes mac_sys_types[] = {$/;"	v	typeref:struct:systypes	file:
magic	./src/btrfs.h	/^	uint64_t magic;$/;"	m	struct:btrfs_super_block
magic	./src/cramfs.h	/^	uint32_t magic;			\/* 0x28cd3d45 - random number *\/$/;"	m	struct:cramfs_super
magic	./src/fatx.h	/^  char		magic[4];$/;"	m	struct:disk_fatx
magic	./src/file_1cd.c	/^  char magic[8];$/;"	m	struct:header_1cd	file:
magic	./src/file_a.c	/^  char magic[2];$/;"	m	struct:file_header	file:
magic	./src/file_ab.c	/^  char magic[4];$/;"	m	struct:ab_header	file:
magic	./src/file_ari.c	/^  uint32_t magic;$/;"	m	struct:arri_header	file:
magic	./src/file_au.c	/^  uint32_t magic;$/;"	m	struct:header_au_s	file:
magic	./src/file_bmp.c	/^  uint16_t magic;$/;"	m	struct:bmp_header	file:
magic	./src/file_cab.c	/^  uint32_t magic;$/;"	m	struct:cab_header	file:
magic	./src/file_cow.c	/^    uint32_t magic;$/;"	m	struct:QCowHeader	file:
magic	./src/file_cow.c	/^    uint32_t magic;$/;"	m	struct:__anon48	file:
magic	./src/file_d2s.c	/^  char magic[8];$/;"	m	struct:d2s_header	file:
magic	./src/file_dad.c	/^  uint32_t magic;$/;"	m	struct:dad_header	file:
magic	./src/file_dex.c	/^  unsigned char magic[8];$/;"	m	struct:dex_header	file:
magic	./src/file_djv.c	/^  uint32_t magic;$/;"	m	struct:djv_header	file:
magic	./src/file_fcs.c	/^  unsigned char magic[6];$/;"	m	struct:fcs_header	file:
magic	./src/file_flp.c	/^  char magic[4];$/;"	m	struct:flp_header	file:
magic	./src/file_hds.c	/^    char magic[16]; \/\/ "WithoutFreeSpace"$/;"	m	struct:parallels_header	file:
magic	./src/file_it.c	/^  uint32_t magic;$/;"	m	struct:impulse_header	file:
magic	./src/file_lnk.c	/^  uint32_t magic; 		\/* 0h Always 0000004Ch ‘L’ *\/$/;"	m	struct:lnk_header_s	file:
magic	./src/file_lxo.c	/^  char magic[4];$/;"	m	struct:lxo_header	file:
magic	./src/file_mb.c	/^  char magic[4];$/;"	m	struct:maya_header	file:
magic	./src/file_mid.c	/^  char magic[4];$/;"	m	struct:midi_header	file:
magic	./src/file_mig.c	/^  uint32_t magic;$/;"	m	struct:MIG_HDR	file:
magic	./src/file_nk2.c	/^  uint32_t magic;$/;"	m	struct:__anon5	file:
magic	./src/file_ra.c	/^  char magic[4];$/;"	m	struct:ra3_header	file:
magic	./src/file_ra.c	/^  char magic[4];$/;"	m	struct:ra4_header	file:
magic	./src/file_raf.c	/^  char magic[16];$/;"	m	struct:header_raf	file:
magic	./src/file_rpm.c	/^  unsigned char magic[4];$/;"	m	struct:rpmlead	file:
magic	./src/file_rx2.c	/^  uint32_t magic;$/;"	m	struct:rx2_header	file:
magic	./src/file_sql.c	/^ char magic[16];$/;"	m	struct:db_header	file:
magic	./src/file_swf.c	/^  char magic[3];$/;"	m	struct:swf_header	file:
magic	./src/file_vmdk.c	/^  uint32_t magic;$/;"	m	struct:__anon38	file:
magic	./src/file_vmdk.c	/^  uint32_t magic;$/;"	m	struct:__anon39	file:
magic	./src/file_wpd.c	/^  unsigned char magic[4];$/;"	m	struct:wpd_hdr	file:
magic	./src/file_xcf.c	/^  unsigned char magic[9];$/;"	m	struct:xcf_header	file:
magic	./src/file_xpt.c	/^  char                     magic[16];$/;"	m	struct:TypeLibHeader	file:
magic	./src/luks.h	/^  uint8_t	magic[LUKS_MAGIC_L];$/;"	m	struct:luks_phdr
magic	./src/netware.h	/^  char magic[12];$/;"	m	struct:disk_netware
magic	./src/ntfs.h	/^  uint32_t	magic;		\/* FILE *\/$/;"	m	struct:ntfs_mft_record
magic	./src/ole.h	/^	char		magic[8];				\/*0*\/$/;"	m	struct:OLE_HDR
magic	./src/parthumax.c	/^  uint16_t magic;$/;"	m	struct:humaxlabel	file:
magic	./src/partxbox.h	/^	char magic[4];$/;"	m	struct:xbox_partition
magic	./src/pe.h	/^    uint16_t magic;         \/\/ Magic number$/;"	m	struct:dos_image_file_hdr
magic	./src/rfs.h	/^  char magic[16];         \/* "ReIsEr4" *\/$/;"	m	struct:reiser4_master_sb
magic	./src/sun.h	/^  uint16_t magic;      \/* Magic number *\/$/;"	m	struct:__anon8
magic	./src/sun.h	/^  uint16_t magic;      \/* Magic number *\/$/;"	m	struct:struct_sun_partition_i386
magic	./src/swap.h	/^	char magic[10];$/;"	m	struct:swap_header::__anon61
magic	./src/swap.h	/^	char magic[10];$/;"	m	struct:swap_header::__anon63
magic	./src/swap.h	/^  } magic;$/;"	m	union:swap_header	typeref:struct:swap_header::__anon61
magic	./src/vmfs.h	/^  uint32_t magic;$/;"	m	struct:vmfs_volume
magic	./src/wbfs.h	/^  uint32_t magic;$/;"	m	struct:wbfs_head
magic1	./src/bfs.h	/^    uint32_t        magic1;                \/* 0x20 *\/$/;"	m	struct:disk_super_block
magic2	./src/bfs.h	/^    uint32_t        magic2;                \/* 0x44 *\/$/;"	m	struct:disk_super_block
magic2	./src/file_flp.c	/^  char magic2[4];$/;"	m	struct:flp_header	file:
magic2	./src/file_mb.c	/^  char magic2[8];$/;"	m	struct:maya_header	file:
magic2	./src/file_nk2.c	/^  uint32_t magic2;$/;"	m	struct:__anon5	file:
magic3	./src/bfs.h	/^    uint32_t        magic3;                \/* 0x70 *\/$/;"	m	struct:disk_super_block
magic3	./src/fat.h	/^  uint32_t magic3;		\/* 0xAA550000 *\/$/;"	m	struct:fat_fsinfo
magic3	./src/file_nk2.c	/^  uint32_t magic3;$/;"	m	struct:__anon5	file:
magic8k	./src/swap.h	/^  } magic8k;$/;"	m	union:swap_header	typeref:struct:swap_header::__anon63
magic_num	./src/file_dpx.c	/^  uint32_t   	magic_num;        \/* magic number 0x53445058 (SDPX) or 0x58504453 (XPDS) *\/$/;"	m	struct:header_dpx	file:
magic_number	./src/file_class.c	/^  uint32_t magic_number;$/;"	m	struct:class_header	file:
magic_number	./src/file_pyc.c	/^  uint32_t magic_number;$/;"	m	struct:pyc_header	file:
magic_start	./src/sun.h	/^  uint32_t magic_start;      \/* Magic number *\/$/;"	m	struct:struct_sun_partition_i386
main	./src/fidentify.c	/^int main(int argc, char **argv)$/;"	f
main	./src/phmain.c	/^int main( int argc, char **argv )$/;"	f
main	./src/testdisk.c	/^int main( int argc, char **argv )$/;"	f
major	./src/file_rpm.c	/^  unsigned char major, minor;$/;"	m	struct:rpmlead	file:
major	./src/md.h	/^	uint32_t major;		\/* 1 Device major number		      *\/$/;"	m	struct:mdp_device_descriptor_s
majorVersion	./src/file_woff.c	/^  uint16_t	majorVersion;$/;"	m	struct:WOFFHeader	file:
majorVersion	./src/file_wpd.c	/^  uint8_t	majorVersion;$/;"	m	struct:wpd_hdr	file:
major_version	./src/file_class.c	/^  uint16_t major_version;$/;"	m	struct:class_header	file:
major_version	./src/file_cwk.c	/^  unsigned char major_version;$/;"	m	struct:cwk_header	file:
major_version	./src/file_reg.c	/^  uint32_t major_version;$/;"	m	struct:regf_file_header	file:
major_version	./src/file_xpt.c	/^  uint8_t                  major_version;$/;"	m	struct:TypeLibHeader	file:
major_version	./src/md.h	/^	uint32_t	major_version;	\/* 1 *\/$/;"	m	struct:mdp_superblock_1
major_version	./src/md.h	/^	uint32_t major_version;	\/*  1 major version to which the set conforms *\/$/;"	m	struct:mdp_superblock_s
majorversion	./src/file_7z.c	/^  uint8_t majorversion;$/;"	m	struct:header_7z	file:
map_off	./src/file_dex.c	/^  uint32_t	map_off;$/;"	m	struct:dex_header	file:
margins	./src/file_cwk.c	/^  uint16_t	margins[6];$/;"	m	struct:cwk_header	file:
mark	./src/file_x3f.c	/^  uint32_t	mark;$/;"	m	struct:x3f_header	file:
marker	./src/fat.h	/^	uint16_t	marker;$/;"	m	struct:fat_boot_sector
marker	./src/file_cwk.c	/^  uint16_t	marker;$/;"	m	struct:cwk_header	file:
marker	./src/ntfs.h	/^	uint16_t	marker;				\/* 0x1FE *\/$/;"	m	struct:ntfs_boot_sector
marker1	./src/file_ecryptfs.c	/^  uint32_t marker1;$/;"	m	struct:ecrypfs_header	file:
marker2	./src/file_ecryptfs.c	/^  uint32_t marker2;$/;"	m	struct:ecrypfs_header	file:
mask	./src/dir.c	/^  mode_t mask;$/;"	m	struct:__anon10	file:
mat_header	./src/file_mat.c	/^static const unsigned char mat_header[7]= {'M', 'A', 'T', 'L', 'A', 'B', ' '};$/;"	v	file:
max_dev	./src/md.h	/^	uint32_t	max_dev;	\/* size of devs[] array to consider *\/$/;"	m	struct:mdp_superblock_1
max_emb_payload_frac	./src/file_sql.c	/^ uint8_t  max_emb_payload_frac;$/;"	m	struct:db_header	file:
max_extra_paragraphs	./src/pe.h	/^    uint16_t max_extra_paragraphs;$/;"	m	struct:dos_image_file_hdr
max_filesize	./src/filegen.h	/^  const uint64_t max_filesize;$/;"	m	struct:file_hint_struct
max_id	./src/file_reg.c	/^  uint16_t max_id;$/;"	m	struct:rgdb_block	file:
max_record	./src/file_wmf.c	/^  uint32_t max_record;$/;"	m	struct:wmf_header	file:
max_size	./src/ntfs_udl.c	/^	long long	 max_size;	\/* Largest size we find *\/$/;"	m	struct:ufile	file:
maxaccess	./src/suspend.c	/^  JDIMENSION maxaccess;		\/* max rows accessed by access_virt_barray *\/$/;"	m	struct:jvirt_barray_control	file:
maxaccess	./src/suspend.c	/^  JDIMENSION maxaccess;		\/* max rows accessed by access_virt_sarray *\/$/;"	m	struct:jvirt_sarray_control	file:
maya_header	./src/file_mb.c	/^struct maya_header$/;"	s	file:
mbc	./src/file_bkf.c	/^  uint16_t 	mbc;		\/* reserved for MBC *\/$/;"	m	struct:mtf_db_hdr	file:
mcd_header	./src/file_mcd.c	/^static const unsigned char mcd_header[11]= { 'V', 'e','c','t','o','r','W','o','r','k','s'};$/;"	v	file:
md_magic	./src/md.h	/^	uint32_t	md_magic;	\/* MD_SB_MAGIC: 0xa92b4efc - little endian *\/$/;"	m	struct:mdp_superblock_1
md_magic	./src/md.h	/^	uint32_t md_magic;		\/*  0 MD identifier 			      *\/$/;"	m	struct:mdp_superblock_s
md_minor	./src/md.h	/^	uint32_t md_minor;		\/* 11 preferred MD minor device number	      *\/$/;"	m	struct:mdp_superblock_s
mdate	./src/exfat.h	/^  uint16_t mdate;$/;"	m	struct:exfat_file_entry
mdb_header	./src/file_mdb.c	/^static const unsigned char mdb_header[]= { 0x00, 0x01, 0x00, 0x00, 'S', 't', 'a', 'n', 'd','a','r','d',' ','J','e','t',' ', 'D','B', 0x00};$/;"	v	file:
mdf_header	./src/file_mdf.c	/^static const unsigned char mdf_header[4]= { 0x01, 0x0f, 0x00, 0x00 };$/;"	v	file:
mdp_device_descriptor_s	./src/md.h	/^typedef struct mdp_device_descriptor_s {$/;"	s
mdp_disk_t	./src/md.h	/^} mdp_disk_t;$/;"	t	typeref:struct:mdp_device_descriptor_s
mdp_super_t	./src/md.h	/^} mdp_super_t;$/;"	t	typeref:struct:mdp_superblock_s
mdp_superblock_1	./src/md.h	/^struct mdp_superblock_1 {$/;"	s
mdp_superblock_s	./src/md.h	/^typedef struct mdp_superblock_s {$/;"	s
media	./src/fat.h	/^	uint8_t	media;		\/* 0x15 media code (unused) *\/$/;"	m	struct:fat_boot_sector
media	./src/ntfs.h	/^	uint8_t	media;		\/* 0x15 media code (unused) *\/$/;"	m	struct:ntfs_boot_sector
mem	./src/io_redir.c	/^  const void *mem;$/;"	m	struct:struclist_redir_t	file:
mem_buffer	./src/suspend.c	/^  JBLOCKARRAY mem_buffer;	\/* => the in-memory buffer *\/$/;"	m	struct:jvirt_barray_control	file:
mem_buffer	./src/suspend.c	/^  JSAMPARRAY mem_buffer;	\/* => the in-memory buffer *\/$/;"	m	struct:jvirt_sarray_control	file:
members	./src/file_wmf.c	/^  uint16_t members;$/;"	m	struct:wmf_header	file:
menu_choose_blocksize	./src/pblocksize.c	/^unsigned int menu_choose_blocksize(unsigned int blocksize, const unsigned int sector_size, uint64_t *offset)$/;"	f
menu_disk	./src/tdiskop.c	/^int menu_disk(disk_t *disk_car, const int verbose,int dump_ind, const int saveheader, char **current_cmd)$/;"	f
menu_disk_cli	./src/tdiskop.c	/^static int menu_disk_cli(disk_t *disk_car, const int verbose,int dump_ind, const int saveheader, char **current_cmd)$/;"	f	file:
menu_disk_ncurses	./src/tdiskop.c	/^static int menu_disk_ncurses(disk_t *disk, const int verbose,int dump_ind, const int saveheader, char **current_cmd)$/;"	f	file:
menu_photorec	./src/ppartseln.c	/^void menu_photorec(struct ph_param *params, struct ph_options *options, alloc_data_t*list_search_space)$/;"	f
menu_photorec_cli	./src/phcli.c	/^int menu_photorec_cli(list_part_t *list_part, struct ph_param *params, struct ph_options *options, alloc_data_t*list_search_space)$/;"	f
menu_to_command	./src/intrfn.c	/^int menu_to_command(const unsigned int yinfo, const unsigned int y_org, const unsigned int x_org, const struct MenuItem *menuItems, const unsigned int itemLength, const char *available, const int menuType, const unsigned int y_real, const unsigned int x_real)$/;"	f
menu_write_fat_boot_sector	./src/fat_adv.c	/^static void menu_write_fat_boot_sector(disk_t *disk_car, partition_t *partition, const int verbose, const upart_type_t upart_type, const unsigned char *orgboot, const unsigned char*newboot, const int error, char **current_cmd)$/;"	f	file:
menu_write_ntfs_boot_sector	./src/ntfs_adv.c	/^static void menu_write_ntfs_boot_sector(disk_t *disk_car, partition_t *partition, const unsigned char *orgboot, const unsigned char *newboot, const int error, char **current_cmd)$/;"	f	file:
menu_write_ntfs_boot_sector_cli	./src/ntfs_adv.c	/^static void menu_write_ntfs_boot_sector_cli(disk_t *disk_car, partition_t *partition, const unsigned char *orgboot, const unsigned char *newboot, const int error, char **current_cmd)$/;"	f	file:
menu_write_ntfs_boot_sector_ncurses	./src/ntfs_adv.c	/^static void menu_write_ntfs_boot_sector_ncurses(disk_t *disk_car, partition_t *partition, const unsigned char *orgboot, const unsigned char *newboot, const int error, char **current_cmd)$/;"	f	file:
merge	./src/list_sort.c	/^static struct td_list_head *merge($/;"	f	file:
merge_and_restore_back_links	./src/list_sort.c	/^static void merge_and_restore_back_links($/;"	f	file:
merge_partition_list	./src/tload.c	/^static list_part_t *merge_partition_list(list_part_t *list_part, list_part_t *backup_part)$/;"	f	file:
metaLength	./src/file_woff.c	/^  uint32_t	metaLength;$/;"	m	struct:WOFFHeader	file:
metaOffset	./src/file_woff.c	/^  uint32_t	metaOffset;$/;"	m	struct:WOFFHeader	file:
metaOrigLength	./src/file_woff.c	/^  uint32_t	metaOrigLength;$/;"	m	struct:WOFFHeader	file:
method_id	./src/file_lzh.c	/^  uint8_t  method_id[5];$/;"	m	struct:lzh_level0	file:
method_id	./src/file_lzh.c	/^  uint8_t  method_id[5];$/;"	m	struct:lzh_level1	file:
method_id	./src/file_lzh.c	/^  uint8_t  method_id[5];$/;"	m	struct:lzh_level2	file:
method_ids_off	./src/file_dex.c	/^  uint32_t	method_ids_off;$/;"	m	struct:dex_header	file:
method_ids_size	./src/file_dex.c	/^  uint32_t	method_ids_size;$/;"	m	struct:dex_header	file:
mfa_header	./src/file_mfa.c	/^static const unsigned char mfa_header[8]= { 'M', 'M', 'F', '2', 0x04, 0x00, 0x00, 0x00};$/;"	v	file:
mfg_header	./src/file_mfg.c	/^static const unsigned char mfg_header[16]= {$/;"	v	file:
mft	./src/ntfs_udl.c	/^	MFT_RECORD	*mft;		\/* Raw MFT record *\/$/;"	m	struct:ufile	file:
mft_lcn	./src/ntfs.h	/^	uint64_t	mft_lcn;	\/* 0x30 Cluster location of mft data.*\/$/;"	m	struct:ntfs_boot_sector
mft_lcn	./src/ntfs_adv.c	/^  uint64_t mft_lcn;$/;"	m	struct:s_info_mft	file:
mft_record_number	./src/ntfs.h	/^  uint32_t	mft_record_number;	\/* NTFS 3.1+ *\/$/;"	m	struct:ntfs_mft_record
mftmirr_lcn	./src/ntfs.h	/^	uint64_t	mftmirr_lcn;	\/* 0x38 Cluster location of copy of mft.*\/$/;"	m	struct:ntfs_boot_sector
mftmirr_lcn	./src/ntfs_adv.c	/^  uint64_t mftmirr_lcn;$/;"	m	struct:s_info_mft	file:
mh_format	./src/gfs2.h	/^	uint32_t mh_format;$/;"	m	struct:gfs2_meta_header
mh_jid	./src/gfs2.h	/^		uint32_t mh_jid;		\/* Was incarnation number in gfs1 *\/$/;"	m	union:gfs2_meta_header::__anon14
mh_magic	./src/gfs2.h	/^	uint32_t mh_magic;$/;"	m	struct:gfs2_meta_header
mh_type	./src/gfs2.h	/^	uint32_t mh_type;$/;"	m	struct:gfs2_meta_header
midi_header	./src/file_mid.c	/^struct midi_header$/;"	s	file:
mig_header	./src/file_mig.c	/^static const unsigned char mig_header[8]=  {$/;"	v	file:
min_emb_payload_frac	./src/file_sql.c	/^ uint8_t  min_emb_payload_frac;$/;"	m	struct:db_header	file:
min_extra_paragraphs	./src/pe.h	/^    uint16_t min_extra_paragraphs;$/;"	m	struct:dos_image_file_hdr
min_filesize	./src/filegen.h	/^  uint64_t min_filesize;$/;"	m	struct:file_recovery_struct
min_header_distance	./src/filegen.h	/^  const uint64_t min_header_distance;$/;"	m	struct:file_hint_struct
minblk	./src/file_spe.c	/^  uint16_t  minblk;            \/*  154  min. # of strips per skips         *\/$/;"	m	struct:header_spe	file:
miniSectorCutoff	./src/ole.h	/^	uint32_t	miniSectorCutoff;		\/*56*\/$/;"	m	struct:OLE_HDR
minor	./src/file_rpm.c	/^  unsigned char major, minor;$/;"	m	struct:rpmlead	file:
minor	./src/md.h	/^	uint32_t minor;		\/* 2 Device minor number		      *\/$/;"	m	struct:mdp_device_descriptor_s
minorVersion	./src/file_woff.c	/^  uint16_t	minorVersion;$/;"	m	struct:WOFFHeader	file:
minorVersion	./src/file_wpd.c	/^  uint8_t	minorVersion;$/;"	m	struct:wpd_hdr	file:
minor_version	./src/file_class.c	/^  uint16_t minor_version;$/;"	m	struct:class_header	file:
minor_version	./src/file_cwk.c	/^  unsigned char minor_version[3];$/;"	m	struct:cwk_header	file:
minor_version	./src/file_reg.c	/^  uint32_t minor_version;$/;"	m	struct:regf_file_header	file:
minor_version	./src/file_xpt.c	/^  uint8_t                  minor_version;$/;"	m	struct:TypeLibHeader	file:
minor_version	./src/md.h	/^	uint32_t minor_version;	\/*  2 minor version ...			      *\/$/;"	m	struct:mdp_superblock_s
minorversion	./src/file_7z.c	/^  uint8_t minorversion;$/;"	m	struct:header_7z	file:
mk5_header	./src/file_mk5.c	/^static const unsigned char mk5_header[4]= { 0x36, 0xff, 0xff, 0xff }; $/;"	v	file:
mk5_header2	./src/file_mk5.c	/^static const unsigned char mk5_header2[4]= { 0x00, 0x40, 0x1c, 0x46 };$/;"	v	file:
mkDigest	./src/luks.h	/^  uint8_t	mkDigest[LUKS_DIGESTSIZE];$/;"	m	struct:luks_phdr
mkDigestIterations	./src/luks.h	/^  uint32_t	mkDigestIterations;$/;"	m	struct:luks_phdr
mkDigestSalt	./src/luks.h	/^  uint8_t	mkDigestSalt[LUKS_SALTSIZE];$/;"	m	struct:luks_phdr
mkdir_local	./src/dir.c	/^char *mkdir_local(const char *localroot, const char *pathname)$/;"	f
mkdir_local_for_file	./src/dir.c	/^void mkdir_local_for_file(const char *filename)$/;"	f
mlv_file_hdr_t	./src/file_mlv.c	/^} __attribute__ ((__packed__)) mlv_file_hdr_t;$/;"	t	typeref:struct:__anon55	file:
mlv_hdr_t	./src/file_mlv.c	/^} __attribute__ ((__packed__)) mlv_hdr_t;$/;"	t	typeref:struct:__anon56	file:
mms	./src/exfat.h	/^  uint8_t  mms;$/;"	m	struct:exfat_file_entry
mode	./src/cramfs.h	/^	uint32_t mode:CRAMFS_MODE_WIDTH, uid:CRAMFS_UID_WIDTH;$/;"	m	struct:cramfs_inode
mode	./src/ewf.c	/^  int mode;$/;"	m	struct:info_fewf_struct	file:
mode	./src/file_a.c	/^  char mode[8];$/;"	m	struct:file_header	file:
mode	./src/file_spe.c	/^  int16_t         mode;              \/*    8  timing mode                        *\/$/;"	m	struct:header_spe	file:
mode	./src/hdaccess.c	/^  int mode;$/;"	m	struct:info_file_struct	file:
mode	./src/hfsp.h	/^        uint32_t         mode;$/;"	m	struct:__anon52
mode	./src/win32.c	/^  int mode;$/;"	m	struct:info_file_win32_struct	file:
mode_enh	./src/msdos.h	/^  int mode_enh;$/;"	m	struct:info_disk_struct
mode_ext2	./src/photorec.h	/^  unsigned int mode_ext2;$/;"	m	struct:ph_options
mode_string	./src/dir.c	/^void mode_string (const unsigned int mode, char *str)$/;"	f
mode_table	./src/dir.c	/^} mode_table[] = {$/;"	v	typeref:struct:__anon10	file:
mode_xlate	./src/dir.c	/^static mode_t mode_xlate(unsigned int lmode)$/;"	f	file:
model	./src/common.h	/^  char *model;$/;"	m	struct:param_disk_struct
model	./src/file_raf.c	/^  char model[32];	\/* ie. FinePix E900 *\/$/;"	m	struct:header_raf	file:
modificationDate	./src/file_prc.c	/^  uint32_t      modificationDate;	\/* 0x26 *\/$/;"	m	struct:DatabaseHdrType_s	file:
modificationNumber	./src/file_prc.c	/^  uint32_t      modificationNumber;	\/* 0x2e *\/$/;"	m	struct:DatabaseHdrType_s	file:
modification_date	./src/iso9660.h	/^	char modification_date[17];$/;"	m	struct:iso_primary_descriptor
modification_time	./src/file_reg.c	/^  uint64_t modification_time;$/;"	m	struct:regf_file_header	file:
modify_date	./src/hfsp.h	/^        uint32_t         modify_date; \/\/ 14 GMT (?)$/;"	m	struct:hfsp_vh
modtime	./src/file_pyc.c	/^  uint32_t modtime;$/;"	m	struct:pyc_header	file:
monstr	./src/dir.c	/^const char *monstr[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",$/;"	v
mrw_header	./src/file_mrw.c	/^static const unsigned char mrw_header[4]= { 0x00,'M','R','M'}; \/* Minolta Raw *\/$/;"	v	file:
msdos_dir_entry	./src/fat.h	/^struct msdos_dir_entry {$/;"	s
msdos_dir_slot	./src/fat.h	/^struct msdos_dir_slot {$/;"	s
msg_BAD_E_CYL	./src/lang.h	31;"	d
msg_BAD_E_HEAD	./src/lang.h	32;"	d
msg_BAD_E_SECT	./src/lang.h	33;"	d
msg_BAD_RS	./src/lang.h	35;"	d
msg_BAD_SCOUNT	./src/lang.h	36;"	d
msg_BAD_S_CYL	./src/lang.h	28;"	d
msg_BAD_S_HEAD	./src/lang.h	29;"	d
msg_BAD_S_SECT	./src/lang.h	30;"	d
msg_CHKFAT_BADFAT32VERSION	./src/lang.h	42;"	d
msg_CHKFAT_BAD_JUMP	./src/lang.h	37;"	d
msg_CHKFAT_ENTRY	./src/lang.h	39;"	d
msg_CHKFAT_SECTPFAT	./src/lang.h	41;"	d
msg_CHKFAT_SECT_CLUSTER	./src/lang.h	38;"	d
msg_CHKFAT_SIZE	./src/lang.h	40;"	d
msg_DUMP_HEXA	./src/lang.h	23;"	d
msg_END_BFR_START	./src/lang.h	34;"	d
msg_MBR_ORDER	./src/lang.h	56;"	d
msg_MBR_ORDER_BAD	./src/lang.h	58;"	d
msg_MBR_ORDER_GOOD	./src/lang.h	57;"	d
msg_NO_BOOTABLE	./src/lang.h	49;"	d
msg_NO_EXT_PART	./src/lang.h	59;"	d
msg_ONLY1MUSTBOOT	./src/lang.h	50;"	d
msg_ONLY_ONE_DOS	./src/lang.h	47;"	d
msg_ONLY_ONE_EXT	./src/lang.h	48;"	d
msg_PART_HEADER	./src/lang.h	43;"	d
msg_PART_HEADER_LONG	./src/lang.h	44;"	d
msg_PART_RD_ERR	./src/lang.h	45;"	d
msg_PART_WR_ERR	./src/lang.h	46;"	d
msg_READ_ERROR_AT	./src/lang.h	24;"	d
msg_SAME_SPACE	./src/lang.h	51;"	d
msg_STRUCT_BAD	./src/lang.h	54;"	d
msg_STRUCT_OK	./src/lang.h	55;"	d
msg_TBL_NMARK	./src/lang.h	27;"	d
msg_WRITE_CLEAN_TABLE	./src/lang.h	52;"	d
msg_WRITE_MBR_CODE	./src/lang.h	53;"	d
msg_part_type	./src/common.h	/^  const char *msg_part_type;$/;"	m	struct:arch_fnct_struct
mtf_db_hdr	./src/file_bkf.c	/^struct mtf_db_hdr$/;"	s	file:
mtime	./src/exfat.h	/^  uint16_t mtime;$/;"	m	struct:exfat_file_entry
mtime	./src/file_a.c	/^  char mtime[12];$/;"	m	struct:file_header	file:
mtime	./src/file_arj.c	/^  uint32_t	mtime;$/;"	m	struct:arj_main_header	file:
mtime	./src/file_cow.c	/^    uint32_t mtime;$/;"	m	struct:__anon48	file:
mtime	./src/file_gz.c	/^  uint32_t mtime;$/;"	m	struct:gzip_header	file:
mtime	./src/file_lnk.c	/^  uint64_t mtime; 		\/* 2Ch *\/$/;"	m	struct:lnk_header_s	file:
mtz	./src/exfat.h	/^  uint8_t  mtz;$/;"	m	struct:exfat_file_entry
mus_header	./src/file_mus.c	/^static const unsigned char mus_header[18]  = { 'E','N','I','G','M','A',' ','B','I','N','A','R','Y',' ','F','I','L','E' };$/;"	v	file:
mxf_header	./src/file_mxf.c	/^static const unsigned char mxf_header[11]= {$/;"	v	file:
my_close	./src/ext2_dir.c	/^static errcode_t my_close(io_channel channel)$/;"	f	file:
my_data	./src/ntfs_inc.h	/^	my_data_t *my_data;$/;"	m	struct:ntfs_dir_struct
my_data_struct	./src/common.h	/^struct my_data_struct$/;"	s
my_data_t	./src/common.h	/^typedef struct my_data_struct my_data_t;$/;"	t	typeref:struct:my_data_struct
my_emit_message	./src/file_jpg.c	/^static void my_emit_message (j_common_ptr cinfo, int msg_level)$/;"	f	file:
my_error_exit	./src/file_jpg.c	/^static void my_error_exit (j_common_ptr cinfo)$/;"	f	file:
my_error_mgr	./src/file_jpg.c	/^struct my_error_mgr {$/;"	s	file:
my_flush	./src/ext2_dir.c	/^static errcode_t my_flush(io_channel channel)$/;"	f	file:
my_mem_ptr	./src/suspend.c	/^typedef struct my_memory_mgr *my_mem_ptr;$/;"	t	typeref:struct:my_memory_mgr	file:
my_memory_mgr	./src/suspend.c	/^struct my_memory_mgr {$/;"	s	file:
my_open	./src/ext2_dir.c	/^static errcode_t my_open(const char *dev, int flags, io_channel *channel)$/;"	f	file:
my_output_message	./src/file_jpg.c	/^static void my_output_message (j_common_ptr cinfo)$/;"	f	file:
my_read_blk	./src/ext2_dir.c	/^static errcode_t my_read_blk(io_channel channel, unsigned long block, int count, void *buf)$/;"	f	file:
my_read_blk64	./src/ext2_dir.c	/^static errcode_t my_read_blk64(io_channel channel, unsigned long long block, int count, void *buf)$/;"	f	file:
my_set_blksize	./src/ext2_dir.c	/^static errcode_t my_set_blksize(io_channel channel, int blksize)$/;"	f	file:
my_source_mgr	./src/file_jpg.c	/^} my_source_mgr;$/;"	t	typeref:struct:__anon60	file:
my_struct_manager	./src/ext2_dir.c	/^static struct struct_io_manager my_struct_manager = {$/;"	v	typeref:struct:struct_io_manager	file:
my_time	./src/savehdr.h	/^  time_t my_time;$/;"	m	struct:__anon18
my_write_blk	./src/ext2_dir.c	/^static errcode_t my_write_blk(io_channel channel, unsigned long block, int count, const void *buf)$/;"	f	file:
my_write_blk64	./src/ext2_dir.c	/^static errcode_t my_write_blk64(io_channel channel, unsigned long long block, int count, const void *buf)$/;"	f	file:
mysql_header	./src/file_mysql.c	/^static const unsigned char mysql_header[4]= {0xfe, 0xfe, 0x07, 0x01};$/;"	v	file:
mysql_header_def	./src/file_mysql.c	/^static const unsigned char mysql_header_def[2]= {0xfe, 0x01};$/;"	v	file:
nAPEFrameDataBytes	./src/file_ape.c	/^  uint64_t nAPEFrameDataBytes;		\/\/ the number of bytes of APE frame data$/;"	m	struct:APE_DESCRIPTOR	file:
nBitsPerSample	./src/file_ape.c	/^  uint16_t nBitsPerSample;	\/\/ the bits per sample (typically 16)$/;"	m	struct:APE_HEADER	file:
nBlocksPerFrame	./src/file_ape.c	/^  uint32_t nBlocksPerFrame;	\/\/ the number of audio blocks in one frame$/;"	m	struct:APE_HEADER	file:
nBytes	./src/file_emf.c	/^  uint32_t nBytes;$/;"	m	struct:EMF_HDR	file:
nChannels	./src/file_ape.c	/^  uint16_t nChannels;		\/\/ the number of channels (1 or 2)$/;"	m	struct:APE_HEADER	file:
nChannels	./src/file_ape.c	/^  uint16_t nChannels;		\/\/ the number of channels (1 or 2)$/;"	m	struct:APE_HEADER_OLD	file:
nCompressionLevel	./src/file_ape.c	/^  uint16_t nCompressionLevel;	\/\/ the compression level (see defines I.E. COMPRESSION_LEVEL_FAST)$/;"	m	struct:APE_HEADER	file:
nCompressionLevel	./src/file_ape.c	/^  uint16_t nCompressionLevel;	\/\/ the compression level$/;"	m	struct:APE_HEADER_OLD	file:
nDescription	./src/file_emf.c	/^  uint32_t nDescription;$/;"	m	struct:EMF_HDR	file:
nDescriptorBytes	./src/file_ape.c	/^  uint32_t nDescriptorBytes;		\/\/ the number of descriptor bytes (allows later expansion of this header)$/;"	m	struct:APE_DESCRIPTOR	file:
nFinalFrameBlocks	./src/file_ape.c	/^  uint32_t nFinalFrameBlocks;	\/\/ the number of audio blocks in the final frame$/;"	m	struct:APE_HEADER	file:
nFinalFrameBlocks	./src/file_ape.c	/^  uint32_t nFinalFrameBlocks;	\/\/ the number of samples in the final frame$/;"	m	struct:APE_HEADER_OLD	file:
nFormatFlags	./src/file_ape.c	/^  uint16_t nFormatFlags;	\/\/ any format flags (for future use)$/;"	m	struct:APE_HEADER	file:
nFormatFlags	./src/file_ape.c	/^  uint16_t nFormatFlags;	\/\/ any format flags (for future use)$/;"	m	struct:APE_HEADER_OLD	file:
nHandles	./src/file_emf.c	/^  uint16_t nHandles;$/;"	m	struct:EMF_HDR	file:
nHeaderBytes	./src/file_ape.c	/^  uint32_t nHeaderBytes;		\/\/ the number of header APE_HEADER bytes$/;"	m	struct:APE_DESCRIPTOR	file:
nHeaderBytes	./src/file_ape.c	/^  uint32_t nHeaderBytes;	\/\/ the bytes after the MAC header that compose the WAV header$/;"	m	struct:APE_HEADER_OLD	file:
nHeaderDataBytes	./src/file_ape.c	/^  uint32_t nHeaderDataBytes;		\/\/ the number of header data bytes (from original file)$/;"	m	struct:APE_DESCRIPTOR	file:
nPalEntries	./src/file_emf.c	/^  uint32_t nPalEntries;$/;"	m	struct:EMF_HDR	file:
nRecords	./src/file_emf.c	/^  uint32_t nRecords;$/;"	m	struct:EMF_HDR	file:
nSampleRate	./src/file_ape.c	/^  uint32_t nSampleRate;		\/\/ the sample rate (typically 44100)$/;"	m	struct:APE_HEADER	file:
nSampleRate	./src/file_ape.c	/^  uint32_t nSampleRate;		\/\/ the sample rate (typically 44100)$/;"	m	struct:APE_HEADER_OLD	file:
nSeekTableBytes	./src/file_ape.c	/^  uint32_t nSeekTableBytes;		\/\/ the number of bytes of the seek table$/;"	m	struct:APE_DESCRIPTOR	file:
nSize	./src/file_emf.c	/^  uint32_t nSize;$/;"	m	struct:__anon19	file:
nTerminatingBytes	./src/file_ape.c	/^  uint32_t nTerminatingBytes;	\/\/ the bytes after that raw data (for extended info)$/;"	m	struct:APE_HEADER_OLD	file:
nTerminatingDataBytes	./src/file_ape.c	/^  uint32_t nTerminatingDataBytes;	\/\/ the terminating data of the file (not including tag data)$/;"	m	struct:APE_DESCRIPTOR	file:
nTotalFrames	./src/file_ape.c	/^  uint32_t nTotalFrames;	\/\/ the number of frames in the file$/;"	m	struct:APE_HEADER_OLD	file:
nTotalFrames	./src/file_ape.c	/^  uint32_t nTotalFrames;	\/\/ the total number of frames$/;"	m	struct:APE_HEADER	file:
nVersion	./src/file_ape.c	/^  uint16_t nVersion;			\/\/ version number * 1000 (3.81 = 3810)$/;"	m	struct:APE_DESCRIPTOR	file:
nVersion	./src/file_ape.c	/^  uint16_t nVersion;		\/\/ version number * 1000 (3.81 = 3810)$/;"	m	struct:APE_HEADER_OLD	file:
nVersion	./src/file_ape.c	/^  uint16_t nVersion;	\/* version number * 1000 (3.81 = 3810) *\/$/;"	m	struct:APE_COMMON_HEADER	file:
nVersion	./src/file_emf.c	/^  uint32_t nVersion;$/;"	m	struct:EMF_HDR	file:
n_hd_sec	./src/wbfs.h	/^  uint32_t n_hd_sec;		\/\/ total number of hd_sec in this partition$/;"	m	struct:wbfs_head
nacyl	./src/sun.h	/^  uint16_t nacyl;      \/* Alt. cylinder count *\/$/;"	m	struct:__anon8
name	./src/bfs.h	/^    char         name[B_OS_NAME_LENGTH];$/;"	m	struct:disk_super_block
name	./src/chgtypen.c	/^  const char *name;$/;"	m	struct:part_name_struct	file:
name	./src/common.h	/^  const char *name;$/;"	m	struct:systypes
name	./src/cramfs.h	/^	uint8_t name[16];		\/* user-defined name *\/$/;"	m	struct:cramfs_super
name	./src/dir.h	/^  char *name;$/;"	m	struct:__anon50
name	./src/fat.h	/^	int8_t	name[8],ext[3];		\/* 00 name and extension *\/$/;"	m	struct:msdos_dir_entry
name	./src/file_a.c	/^  char name[16];$/;"	m	struct:file_header	file:
name	./src/file_d2s.c	/^  char name[0];$/;"	m	struct:d2s_header	file:
name	./src/file_ifo.c	/^  char 	   name[12];$/;"	m	struct:ifo_hdr	file:
name	./src/file_prc.c	/^  unsigned char name[32];$/;"	m	struct:DatabaseHdrType_s	file:
name	./src/file_rpm.c	/^  char name[66];$/;"	m	struct:rpmlead	file:
name	./src/intrf.h	/^    const char *name; \/* Item name, should be eight characters with current implementation *\/$/;"	m	struct:MenuItem
name	./src/ntfs_udl.c	/^	char		*name;		\/* Filename in current locale *\/$/;"	m	struct:filename	file:
name	./src/ntfs_udl.c	/^	char		*name;		\/* Stream name in current locale *\/$/;"	m	struct:data	file:
name	./src/ntfs_udl.c	/^	struct td_list_head name;		\/* A list of filenames *\/$/;"	m	struct:ufile	typeref:struct:ufile::td_list_head	file:
name	./src/ole.h	/^	char		name[64];	\/\/ 0$/;"	m	struct:OLE_DIR
name	./src/ole.h	/^	char	name[64];$/;"	m	struct:DIRECTORY
name	./src/partgpt.h	/^  const char *name;$/;"	m	struct:systypes_gtp
name0_4	./src/fat.h	/^	uint8_t    name0_4[10];		\/* 01 first 5 characters in name *\/$/;"	m	struct:msdos_dir_slot
name11_12	./src/fat.h	/^	uint8_t    name11_12[4];	\/* 1C last 2 characters in name *\/$/;"	m	struct:msdos_dir_slot
name5_10	./src/fat.h	/^	uint8_t    name5_10[12];	\/* 0E 6 more characters in name *\/$/;"	m	struct:msdos_dir_slot
name_hash	./src/exfat.h	/^  uint16_t name_hash;$/;"	m	struct:exfat_stream_ext_entry
name_length	./src/exfat.h	/^  uint8_t  name_length;$/;"	m	struct:exfat_stream_ext_entry
name_space	./src/ntfs_udl.c	/^	FILE_NAME_TYPE_FLAGS name_space;$/;"	m	struct:filename	file:
namelen	./src/cramfs.h	/^	uint32_t namelen:CRAMFS_NAMELEN_WIDTH, offset:CRAMFS_OFFSET_WIDTH;$/;"	m	struct:cramfs_inode
namsiz	./src/ole.h	/^	uint16_t	namsiz;		\/\/ 64$/;"	m	struct:OLE_DIR
nanox	./src/file_spe.c	/^  float         nanox;             \/*   46                                     *\/$/;"	m	struct:header_spe	file:
native_max	./src/common.h	/^  uint64_t native_max;$/;"	m	struct:param_disk_struct
nb_files	./src/file_cab.c	/^  uint16_t nb_files;$/;"	m	struct:cab_header	file:
nb_folder	./src/file_cab.c	/^  uint16_t nb_folder;$/;"	m	struct:cab_header	file:
nb_sectors	./src/file_hds.c	/^    uint32_t nb_sectors;$/;"	m	struct:parallels_header	file:
nb_snapshots	./src/file_cow.c	/^    uint32_t nb_snapshots;$/;"	m	struct:QCowHeader	file:
nbr	./src/fat_adv.c	/^  unsigned int  nbr;$/;"	m	struct:info_offset_struct	file:
nbr	./src/fat_cluster.h	/^  unsigned int  nbr;$/;"	m	struct:cluster_offset_struct
nbr_fields	./src/file_tiff.h	/^  uint16_t nbr_fields;$/;"	m	struct:ifd_header
nbr_fnct_call	./src/hdcache.c	/^  unsigned int 	nbr_fnct_call;$/;"	m	struct:cache_struct	file:
nbr_fnct_sect	./src/hdcache.c	/^  uint64_t 	nbr_fnct_sect;$/;"	m	struct:cache_struct	file:
nbr_header_obj	./src/file_asf.c	/^  uint32_t	nbr_header_obj;$/;"	m	struct:asf_header_obj_s	file:
nbr_pread_call	./src/hdcache.c	/^  unsigned int 	nbr_pread_call;$/;"	m	struct:cache_struct	file:
nbr_pread_sect	./src/hdcache.c	/^  uint64_t 	nbr_pread_sect;$/;"	m	struct:cache_struct	file:
nbr_sectors	./src/netware.h	/^  int32_t nbr_sectors;$/;"	m	struct:disk_netware
ncurses_ntfs2_info	./src/ntfs_adv.c	/^static int ncurses_ntfs2_info(const struct ntfs_boot_sector *nh1, const struct ntfs_boot_sector *nh2)$/;"	f	file:
ncurses_ntfs_info	./src/ntfs_adv.c	/^static int ncurses_ntfs_info(const struct ntfs_boot_sector *ntfs_header)$/;"	f	file:
ncyl	./src/sun.h	/^  uint16_t ncyl;       \/* Data cylinder count *\/$/;"	m	struct:__anon8
nes_header	./src/file_nes.c	/^struct nes_header$/;"	s	file:
new_chunk	./src/md.h	/^	uint32_t	new_chunk;	\/* new chunk size (bytes)			*\/$/;"	m	struct:mdp_superblock_1
new_diskcache	./src/hdcache.c	/^disk_t *new_diskcache(disk_t *disk_car, const unsigned int testdisk_mode)$/;"	f
new_format_packet_length	./src/file_gpg.c	/^static unsigned int new_format_packet_length(const unsigned char *buf, unsigned int *length_type, int *partial_body_length)$/;"	f	file:
new_layout	./src/md.h	/^	uint32_t	new_layout;	\/* new layout					*\/$/;"	m	struct:mdp_superblock_1
new_level	./src/md.h	/^	uint32_t	new_level;	\/* new level we are reshaping to		*\/$/;"	m	struct:mdp_superblock_1
new_offset	./src/io_redir.c	/^  uint64_t new_offset;$/;"	m	struct:struclist_redir_t	file:
new_whole_disk	./src/photorec.c	/^partition_t *new_whole_disk(const disk_t *disk_car)$/;"	f
next	./src/common.h	/^  list_disk_t *next;$/;"	m	struct:list_disk_struct
next	./src/common.h	/^  list_part_t *next;$/;"	m	struct:list_part_struct
next	./src/file_hdf.c	/^  uint32_t	next;$/;"	m	struct:ddh_struct	file:
next	./src/file_sig.c	/^  signature_t *next;$/;"	m	struct:signature_s	file:
next	./src/io_redir.c	/^  list_redir_t *next;$/;"	m	struct:struclist_redir_t	file:
next	./src/list.h	/^	struct td_list_head *next, *prev;$/;"	m	struct:td_list_head	typeref:struct:td_list_head::td_list_head
next	./src/ole.h	/^	int32_t		next;$/;"	m	struct:DIRECTORY
next	./src/suspend.c	/^  jvirt_barray_ptr next;	\/* link to next virtual barray control block *\/$/;"	m	struct:jvirt_barray_control	file:
next	./src/suspend.c	/^  jvirt_sarray_ptr next;	\/* link to next virtual sarray control block *\/$/;"	m	struct:jvirt_sarray_control	file:
nextHeaderCRC	./src/file_7z.c	/^  uint64_t nextHeaderCRC;$/;"	m	struct:header_7z	file:
nextHeaderOffset	./src/file_7z.c	/^  uint64_t nextHeaderOffset;$/;"	m	struct:header_7z	file:
nextHeaderSize	./src/file_7z.c	/^  uint64_t nextHeaderSize;$/;"	m	struct:header_7z	file:
next_alloc	./src/hfsp.h	/^        uint32_t         next_alloc;$/;"	m	struct:hfsp_vh
next_attr_instance	./src/ntfs.h	/^  uint16_t	next_attr_instance;$/;"	m	struct:ntfs_mft_record
next_cnid	./src/hfsp.h	/^        uint32_t	       next_cnid;$/;"	m	struct:hfsp_vh
next_dirent	./src/ole.h	/^	uint32_t	next_dirent;	\/\/ 72$/;"	m	struct:OLE_DIR
next_file	./src/phbf.c	/^static struct td_list_head *next_file(struct td_list_head *search_walker, const alloc_data_t *list_search_space)$/;"	f	file:
next_header_size	./src/file_lzh.c	/^  uint16_t next_header_size;$/;"	m	struct:lzh_level2	file:
next_sb	./src/ext2_sbn.c	/^static uint64_t next_sb(const uint64_t hd_offset_old)$/;"	f	file:
nextfree	./src/fat.h	/^  uint32_t nextfree;		\/* next free cluster *\/$/;"	m	struct:fat_fsinfo
njx_header	./src/file_njx.c	/^static const unsigned char njx_header[4]= {0x04, 'N', 'j', 0x0f};$/;"	v	file:
nk2Header	./src/file_nk2.c	/^} nk2Header;$/;"	t	typeref:struct:__anon5	file:
nk2_header	./src/file_nk2.c	/^static const unsigned char nk2_header[8]=  { 0x0d, 0xf0, 0xad, 0xba, 0x0a, 0x00, 0x00, 0x00 };$/;"	v	file:
no_addr	./src/gfs2.h	/^	uint64_t no_addr;$/;"	m	struct:gfs2_inum
no_formal_ino	./src/gfs2.h	/^	uint64_t no_formal_ino;$/;"	m	struct:gfs2_inum
no_of_cluster2part_type	./src/fat_cluster.c	/^upart_type_t no_of_cluster2part_type(const unsigned long int no_of_cluster)$/;"	f
node	./src/common.h	/^  uint8_t  node[6];$/;"	m	struct:efi_guid_s
nodesize	./src/btrfs.h	/^	uint32_t nodesize;$/;"	m	struct:btrfs_super_block
none_sys_types	./src/partnone.c	/^static const struct systypes none_sys_types[] = {$/;"	v	typeref:struct:systypes	file:
noscan	./src/file_spe.c	/^  int16_t           noscan;            \/*   34  number of multiple scans           *\/$/;"	m	struct:header_spe	file:
not_implemented	./src/intrfn.c	/^void not_implemented(const char *msg)$/;"	f
not_persistent	./src/md.h	/^	uint32_t not_persistent;	\/* 12 does it have a persistent superblock    *\/$/;"	m	struct:mdp_superblock_s
not_recovered	./src/filegen.h	/^  unsigned int not_recovered;$/;"	m	struct:file_stat_struct
nothing	./src/fat.h	/^	uint8_t	nothing[420];	\/* 0x5A *\/$/;"	m	struct:fat_boot_sector
npart	./src/sun.h	/^  uint16_t npart;$/;"	m	struct:struct_sun_partition_i386
nr_badpages	./src/swap.h	/^	unsigned int nr_badpages;$/;"	m	struct:swap_header::__anon62
nr_disks	./src/md.h	/^	uint32_t nr_disks;		\/*  9 total disks in the raid set	      *\/$/;"	m	struct:mdp_superblock_s
nr_sectors	./src/exfat.h	/^	uint64_t  	nr_sectors;             \/* number of sectors of partition *\/$/;"	m	struct:exfat_super_block
nsect	./src/sun.h	/^  uint16_t nsect;      \/* Sectors per track *\/$/;"	m	struct:__anon8
ntfs_attribheader	./src/ntfs.h	/^ntfs_attribheader;$/;"	t	typeref:struct:_ntfs_attribheader
ntfs_attribnonresident	./src/ntfs.h	/^ntfs_attribnonresident;$/;"	t	typeref:struct:_ntfs_attribnonresident
ntfs_attribresident	./src/ntfs.h	/^ntfs_attribresident;$/;"	t	typeref:struct:_ntfs_attribresident
ntfs_boot_sector	./src/ntfs.h	/^struct ntfs_boot_sector {$/;"	s
ntfs_boot_sector	./src/tntfs.c	/^int ntfs_boot_sector(disk_t *disk_car, partition_t *partition, const int verbose, const unsigned int expert, char **current_cmd)$/;"	f
ntfs_copy	./src/ntfs_dir.c	/^static int ntfs_copy(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const file_info_t *file)$/;"	f	file:
ntfs_device_testdisk_io_close	./src/ntfs_io.c	/^static int ntfs_device_testdisk_io_close(struct ntfs_device *dev)$/;"	f	file:
ntfs_device_testdisk_io_ioctl	./src/ntfs_io.c	/^static int ntfs_device_testdisk_io_ioctl(struct ntfs_device *dev, int request,$/;"	f	file:
ntfs_device_testdisk_io_open	./src/ntfs_io.c	/^static int ntfs_device_testdisk_io_open(struct ntfs_device *dev, int flags)$/;"	f	file:
ntfs_device_testdisk_io_ops	./src/ntfs_io.c	/^struct ntfs_device_operations ntfs_device_testdisk_io_ops = {$/;"	v	typeref:struct:ntfs_device_operations
ntfs_device_testdisk_io_pread	./src/ntfs_io.c	/^static s64 ntfs_device_testdisk_io_pread(struct ntfs_device *dev, void *buf,$/;"	f	file:
ntfs_device_testdisk_io_pwrite	./src/ntfs_io.c	/^static s64 ntfs_device_testdisk_io_pwrite(struct ntfs_device *dev, const void *buf,$/;"	f	file:
ntfs_device_testdisk_io_read	./src/ntfs_io.c	/^static s64 ntfs_device_testdisk_io_read(struct ntfs_device *dev, void *buf,$/;"	f	file:
ntfs_device_testdisk_io_seek	./src/ntfs_io.c	/^static s64 ntfs_device_testdisk_io_seek(struct ntfs_device *dev, s64 offset,$/;"	f	file:
ntfs_device_testdisk_io_stat	./src/ntfs_io.c	/^static int ntfs_device_testdisk_io_stat(struct ntfs_device *dev, struct stat *buf)$/;"	f	file:
ntfs_device_testdisk_io_sync	./src/ntfs_io.c	/^static int ntfs_device_testdisk_io_sync(struct ntfs_device *dev)$/;"	f	file:
ntfs_device_testdisk_io_write	./src/ntfs_io.c	/^static s64 ntfs_device_testdisk_io_write(struct ntfs_device *dev, const void *buf,$/;"	f	file:
ntfs_dir	./src/ntfs_dir.c	/^static int ntfs_dir(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const unsigned long int cluster, file_info_t *dir_list)$/;"	f	file:
ntfs_dir_struct	./src/ntfs_inc.h	/^struct ntfs_dir_struct {$/;"	s
ntfs_dump	./src/ntfs_adv.c	/^static void ntfs_dump(disk_t *disk_car, const partition_t *partition, const unsigned char *orgboot, const unsigned char *newboot, char **current_cmd)$/;"	f	file:
ntfs_dump_ncurses	./src/ntfs_adv.c	/^static void ntfs_dump_ncurses(disk_t *disk_car, const partition_t *partition, const unsigned char *orgboot, const unsigned char *newboot)$/;"	f	file:
ntfs_filldir_t	./src/ntfs_dir.c	/^typedef int (*ntfs_filldir_t)(void *dirent, const ntfschar *name,$/;"	t	file:
ntfs_findattribute	./src/ntfs.c	/^const ntfs_attribheader* ntfs_findattribute(const ntfs_recordheader* record, uint32_t attrType, const char* end)$/;"	f
ntfs_get_first_rl_element	./src/ntfs.c	/^long int ntfs_get_first_rl_element(const ntfs_attribnonresident *attrnr, const char* end)$/;"	f
ntfs_get_volume_name	./src/ntfs.c	/^static void ntfs_get_volume_name(disk_t *disk_car, partition_t *partition, const struct ntfs_boot_sector*ntfs_header)$/;"	f	file:
ntfs_getattributedata	./src/ntfs.c	/^const char* ntfs_getattributedata(const ntfs_attribresident* attrib, const char* end)$/;"	f
ntfs_getattributeheaders	./src/ntfs.c	/^const ntfs_attribheader *ntfs_getattributeheaders(const ntfs_recordheader* record)$/;"	f
ntfs_mft_record	./src/ntfs.h	/^struct ntfs_mft_record {$/;"	s
ntfs_next_non_deleted	./src/ntfs_udl.c	/^static struct td_list_head *ntfs_next_non_deleted(struct td_list_head *current_file, const struct td_list_head *end)$/;"	f	file:
ntfs_nextattribute	./src/ntfs.c	/^const ntfs_attribheader* ntfs_nextattribute(const ntfs_attribheader* attrib, uint32_t attrType, const char* end)$/;"	f
ntfs_prev_non_deleted	./src/ntfs_udl.c	/^static struct td_list_head *ntfs_prev_non_deleted(struct td_list_head *current_file, const struct td_list_head *start)$/;"	f	file:
ntfs_recordheader	./src/ntfs.h	/^typedef struct ntfs_mft_record ntfs_recordheader;$/;"	t	typeref:struct:ntfs_mft_record
ntfs_remove_used_space	./src/ntfsp.c	/^unsigned int ntfs_remove_used_space(disk_t *disk_car,const partition_t *partition, alloc_data_t *list_search_space)$/;"	f
ntfs_searchattribute	./src/ntfs.c	/^static const ntfs_attribheader* ntfs_searchattribute(const ntfs_attribheader* attrib, uint32_t attrType, const char* end, int skip)$/;"	f	file:
ntfs_sector_size	./src/ntfs.c	/^unsigned int ntfs_sector_size(const struct ntfs_boot_sector *ntfs_header)$/;"	f
ntfs_td_list_entry	./src/ntfs_dir.c	/^static int ntfs_td_list_entry(  struct ntfs_dir_struct *ls, const ntfschar *name, $/;"	f	file:
ntfs_ucstoutf8	./src/ntfs_dir.c	/^static int ntfs_ucstoutf8(iconv_t cd, const ntfschar *ins, const int ins_len, char **outs, const int outs_len)$/;"	f	file:
ntfs_undelete_menu	./src/ntfs_udl.c	/^static void ntfs_undelete_menu(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, file_info_t *dir_list, char**current_cmd)$/;"	f	file:
ntfs_undelete_menu_ncurses	./src/ntfs_udl.c	/^static void ntfs_undelete_menu_ncurses(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, file_info_t *dir_list)$/;"	f	file:
ntfs_undelete_part	./src/ntfs_udl.c	/^int ntfs_undelete_part(disk_t *disk_car, const partition_t *partition, const int verbose, char **current_cmd)$/;"	f
ntrks	./src/sun.h	/^  uint16_t ntrks;      \/* Tracks per cylinder *\/$/;"	m	struct:__anon8
numTables	./src/file_ttf.c	/^  uint16_t	numTables;$/;"	m	struct:ttf_offset_table	file:
numTables	./src/file_woff.c	/^  uint16_t	numTables;$/;"	m	struct:WOFFHeader	file:
num_FAT_blocks	./src/ole.h	/^	uint32_t	num_FAT_blocks;			\/*44*\/$/;"	m	struct:OLE_HDR
num_ags	./src/bfs.h	/^    uint32_t        num_ags;               \/* 0x50 # of allocation groups *\/$/;"	m	struct:disk_super_block
num_blocks	./src/bfs.h	/^    uint64_t        num_blocks;            \/* 0x30 *\/$/;"	m	struct:disk_super_block
num_devices	./src/btrfs.h	/^	uint64_t num_devices;$/;"	m	struct:btrfs_super_block
num_extra_FAT_blocks	./src/ole.h	/^	uint32_t	num_extra_FAT_blocks;	\/*72*\/$/;"	m	struct:OLE_HDR
num_gtes_per_gte	./src/file_vmdk.c	/^  int32_t num_gtes_per_gte;$/;"	m	struct:__anon39	file:
num_interfaces	./src/file_xpt.c	/^  uint16_t                 num_interfaces;$/;"	m	struct:TypeLibHeader	file:
num_objects	./src/file_wmf.c	/^  uint16_t num_objects;$/;"	m	struct:wmf_header	file:
num_relocs	./src/pe.h	/^    uint16_t num_relocs;$/;"	m	struct:dos_image_file_hdr
num_rgdb	./src/file_reg.c	/^  uint16_t num_rgdb;$/;"	m	struct:creg_file_header	file:
num_sectors	./src/parthumax.c	/^  uint32_t num_sectors;$/;"	m	struct:partition_humax	file:
num_sectors	./src/sun.h	/^    uint32_t num_sectors;$/;"	m	struct:__anon8::sun_partition
num_sectors	./src/sun.h	/^    uint32_t num_sectors;$/;"	m	struct:struct_sun_partition_i386::sun_info_i386
number	./src/file_cab.c	/^  uint16_t number;$/;"	m	struct:cab_header	file:
number	./src/md.h	/^	uint32_t number;		\/* 0 Device number in the entire set	      *\/$/;"	m	struct:mdp_device_descriptor_s
number_of_fats	./src/exfat.h	/^	unsigned char   number_of_fats;$/;"	m	struct:exfat_super_block
numminblk	./src/file_spe.c	/^  uint16_t  numminblk;         \/*  156  # of min-blocks before geo skps    *\/$/;"	m	struct:header_spe	file:
numsides	./src/file_fds.c	/^  uint8_t numsides;$/;"	m	struct:fds_header	file:
oType	./src/file_axx.c	/^  uint8_t   oType;$/;"	m	struct:SHeader	file:
object_id	./src/file_asf.c	/^  unsigned char object_id[16];$/;"	m	struct:asf_file_prop_s	file:
object_id	./src/file_asf.c	/^  unsigned char object_id[16];$/;"	m	struct:asf_header_obj_s	file:
object_id	./src/file_asf.c	/^  unsigned char object_id[16];$/;"	m	struct:asf_stream_prop_s	file:
object_size	./src/file_asf.c	/^  uint64_t	object_size;$/;"	m	struct:asf_header_obj_s	file:
object_size	./src/file_asf.c	/^  uint64_t      object_size;$/;"	m	struct:asf_file_prop_s	file:
object_size	./src/file_asf.c	/^  uint64_t      object_size;$/;"	m	struct:asf_stream_prop_s	file:
oci_header	./src/file_oci.c	/^struct oci_header$/;"	s	file:
oem_id	./src/exfat.h	/^        unsigned char   oem_id[8];              \/* oem-id *\/$/;"	m	struct:exfat_super_block
off	./src/file_bkf.c	/^  uint16_t	off;		\/* offset to first event *\/$/;"	m	struct:mtf_db_hdr	file:
offAttribData	./src/ntfs.h	/^  uint16_t offAttribData;   	\/* Offset to the Attribute *\/$/;"	m	struct:_ntfs_attribresident
offDataRuns	./src/ntfs.h	/^  uint16_t offDataRuns;         \/* Offset to the Data Runs *\/$/;"	m	struct:_ntfs_attribnonresident
offDescription	./src/file_emf.c	/^  uint32_t offDescription;$/;"	m	struct:EMF_HDR	file:
offName	./src/ntfs.h	/^  uint16_t offName;             \/* Offset to the Attribute *\/$/;"	m	struct:_ntfs_attribheader
off_file	./src/file_cab.c	/^  uint32_t off_file;$/;"	m	struct:cab_header	file:
offset	./src/common.h	/^  uint64_t offset;      \/* offset to first sector, may be modified in the futur to handle broken raid *\/$/;"	m	struct:param_disk_struct
offset	./src/common.h	/^  uint64_t offset;$/;"	m	struct:my_data_struct
offset	./src/cramfs.h	/^	uint32_t namelen:CRAMFS_NAMELEN_WIDTH, offset:CRAMFS_OFFSET_WIDTH;$/;"	m	struct:cramfs_inode
offset	./src/ewf.c	/^  uint64_t offset;$/;"	m	struct:info_fewf_struct	file:
offset	./src/fat_adv.c	/^  unsigned long int offset;$/;"	m	struct:info_offset_struct	file:
offset	./src/fat_cluster.h	/^  unsigned long int offset;$/;"	m	struct:cluster_offset_struct
offset	./src/file_au.c	/^  uint32_t offset;$/;"	m	struct:header_au_s	file:
offset	./src/file_bmp.c	/^  uint32_t offset;$/;"	m	struct:bmp_header	file:
offset	./src/file_dpx.c	/^  uint32_t   	offset;           \/* offset to image data in bytes *\/$/;"	m	struct:header_dpx	file:
offset	./src/file_hdf.c	/^  uint32_t	offset;$/;"	m	struct:dd_struct	file:
offset	./src/file_jpg.c	/^  uint32_t offset;$/;"	m	struct:MP_Entry	file:
offset	./src/file_jpg.c	/^  uint64_t offset;$/;"	m	struct:jpeg_session_struct	file:
offset	./src/file_jpg.c	/^  unsigned long int offset;$/;"	m	struct:__anon60	file:
offset	./src/file_sig.c	/^  unsigned int offset;$/;"	m	struct:signature_s	file:
offset	./src/file_ttf.c	/^  uint32_t 	offset; 	\/* Offset from beginning of TrueType font file. *\/$/;"	m	struct:ttf_table_directory	file:
offset	./src/file_wim.c	/^  uint64_t offset;$/;"	m	struct:reshdr_disk_short	file:
offset	./src/file_zip.c	/^  uint64_t offset;		\/* Offset of local header record *\/$/;"	m	struct:zip64_extra_entry	file:
offset	./src/filegen.h	/^  unsigned int offset;$/;"	m	struct:__anon67
offset	./src/filegen.h	/^  unsigned int offset;$/;"	m	struct:__anon68
offset	./src/lvm.h	/^  uint64_t offset;        \/* Offset in bytes to start sector *\/$/;"	m	struct:lvm2_disk_locn
offset	./src/next.c	/^  uint64_t offset;$/;"	m	struct:search_location	file:
offset	./src/pe.h	/^  uint16_t offset;$/;"	m	struct:exe_reloc
offset	./src/photorec.h	/^  uint64_t offset;$/;"	m	struct:ph_param
offset2CHS	./src/fnctdsk.c	/^void offset2CHS(const disk_t *disk_car,const uint64_t offset, CHS_t*CHS)$/;"	f
offset2CHS_inline	./src/godmode.c	/^static inline void offset2CHS_inline(const disk_t *disk_car,const uint64_t offset, CHS_t*CHS)$/;"	f	file:
offset2cylinder	./src/fnctdsk.c	/^unsigned int offset2cylinder(const disk_t *disk_car, const uint64_t offset)$/;"	f
offset2head	./src/fnctdsk.c	/^unsigned int offset2head(const disk_t *disk_car, const uint64_t offset)$/;"	f
offset2sector	./src/fnctdsk.c	/^unsigned int offset2sector(const disk_t *disk_car, const uint64_t offset)$/;"	f
offset_bmap	./src/file_vdi.c	/^    uint32_t offset_bmap;$/;"	m	struct:__anon57	file:
offset_data	./src/file_vdi.c	/^    uint32_t offset_data;$/;"	m	struct:__anon57	file:
offset_error	./src/filegen.h	/^  uint64_t offset_error;$/;"	m	struct:file_recovery_struct
offset_ok	./src/file_jpg.c	/^  unsigned long int offset_ok;$/;"	m	struct:__anon60	file:
offset_ok	./src/filegen.h	/^  uint64_t offset_ok;$/;"	m	struct:file_recovery_struct
offset_xl	./src/lvm.h	/^  uint32_t offset_xl;     \/* 0x14 Offset from start of struct to contents *\/$/;"	m	struct:lvm2_label_header
ogg_header	./src/file_ogg.c	/^static const unsigned char ogg_header[5]= {'O','g','g','S', 0x00};$/;"	v	file:
old_format_packet_length	./src/file_gpg.c	/^static unsigned int old_format_packet_length(const unsigned char *buf, unsigned int *length_type, int *indeterminate_length)$/;"	f	file:
old_major_version	./src/file_cwk.c	/^  unsigned char old_major_version;$/;"	m	struct:cwk_header	file:
old_minor_version	./src/file_cwk.c	/^  unsigned char old_minor_version[3];$/;"	m	struct:cwk_header	file:
ole_get_file_extension	./src/file_doc.c	/^static const char *ole_get_file_extension(const unsigned char *buffer, const unsigned int buffer_size)$/;"	f	file:
only_one_bootable	./src/godmode.c	/^void only_one_bootable( list_part_t *list_part, list_part_t *part_boot)$/;"	f
open_file	./src/ntfs_udl.c	/^static int open_file(const char *pathname)$/;"	f	file:
open_signature_file	./src/file_sig.c	/^static FILE *open_signature_file(void)$/;"	f	file:
openpgp_packet_tag	./src/file_gpg.c	/^static unsigned int openpgp_packet_tag(const unsigned char *buf)$/;"	f	file:
ops	./src/rfs_dir.c	/^static struct dal_ops ops = {$/;"	v	typeref:struct:dal_ops	file:
opt_type_l_path_table	./src/iso9660.h	/^	char opt_type_l_path_table[4];$/;"	m	struct:iso_primary_descriptor
opt_type_m_path_table	./src/iso9660.h	/^	char opt_type_m_path_table[4];$/;"	m	struct:iso_primary_descriptor
options	./src/ntfs_udl.c	/^struct options {$/;"	s	file:
options	./src/qphotorec.h	/^		struct ph_options 	*options;$/;"	m	class:QPhotorec	typeref:struct:QPhotorec::ph_options
opts	./src/ntfs_udl.c	/^static struct options opts;$/;"	v	typeref:struct:options	file:
order	./src/common.h	/^  unsigned int  order;$/;"	m	struct:partition_struct
org_offset	./src/io_redir.c	/^  uint64_t org_offset;$/;"	m	struct:struclist_redir_t	file:
original_size	./src/file_wim.c	/^  uint64_t original_size;$/;"	m	struct:reshdr_disk_short	file:
os	./src/file_gz.c	/^  uint8_t  os;$/;"	m	struct:gzip_header	file:
osData	./src/file_bkf.c	/^  uint32_t	osData;		\/* OS-specific data *\/$/;"	m	struct:mtf_db_hdr	file:
osId	./src/file_bkf.c	/^  uint8_t	osId;		\/* OS ID *\/$/;"	m	struct:mtf_db_hdr	file:
osVer	./src/file_bkf.c	/^  uint8_t	osVer;		\/* OS version *\/$/;"	m	struct:mtf_db_hdr	file:
os_id	./src/file_lzh.c	/^  uint8_t  os_id;$/;"	m	struct:lzh_level2	file:
osnum	./src/file_rpm.c	/^  uint16_t osnum;$/;"	m	struct:rpmlead	file:
output_components	./src/file_jpg.c	/^  unsigned int output_components;$/;"	m	struct:jpeg_session_struct	file:
output_height	./src/file_jpg.c	/^  unsigned int output_height;$/;"	m	struct:jpeg_session_struct	file:
output_width	./src/file_jpg.c	/^  unsigned int output_width;$/;"	m	struct:jpeg_session_struct	file:
overlay_number	./src/pe.h	/^    uint16_t overlay_number;$/;"	m	struct:dos_image_file_hdr
owner	./src/hfsp.h	/^        uint32_t         owner;$/;"	m	struct:__anon52
p_cpg	./src/bsd.h	150;"	d
p_frag	./src/bsd.h	/^		uint8_t p_frag;	\/* filesystem fragments per block *\/$/;"	m	struct:disklabel::partition
p_fsize	./src/bsd.h	/^		uint32_t p_fsize;	\/* filesystem basic fragment size *\/$/;"	m	struct:disklabel::partition
p_fstype	./src/bsd.h	/^		uint8_t p_fstype;	\/* filesystem type, see below *\/$/;"	m	struct:disklabel::partition
p_offset	./src/bsd.h	/^		uint32_t p_offset;	\/* starting sector *\/$/;"	m	struct:disklabel::partition
p_sgs	./src/bsd.h	151;"	d
p_size	./src/bsd.h	/^		uint32_t p_size;	\/* number of sectors in partition *\/$/;"	m	struct:disklabel::partition
pack1	./src/file_ape.c	/^  uint16_t pack1;$/;"	m	struct:APE_DESCRIPTOR	file:
packed_ea_size	./src/ntfs.h	/^		\/* 3c*\/	uint16_t packed_ea_size;	\/* Size of the buffer needed to$/;"	m	struct:__anon23::__anon24::__anon25
pad	./src/bfs.h	/^    uint32_t        pad[8];               \/* 0x84 extra stuff for the future *\/$/;"	m	struct:disk_super_block
pad	./src/jfs_superblock.h	/^	int16_t pad;		\/* 2: padding necessary for alignment *\/$/;"	m	struct:jfs_superblock
pad0	./src/md.h	/^	uint32_t	pad0;		\/* always set to 0 when writing *\/$/;"	m	struct:mdp_superblock_1
pad1	./src/md.h	/^	uint8_t	pad1[128-124];	\/* set to 0 when written *\/$/;"	m	struct:mdp_superblock_1
pad2	./src/md.h	/^	uint8_t	pad2[64-57];	\/* set to 0 when writing *\/$/;"	m	struct:mdp_superblock_1
pad3	./src/md.h	/^	uint8_t	pad3[64-32];	\/* set to 0 when writing *\/$/;"	m	struct:mdp_superblock_1
padding	./src/file_hds.c	/^    char padding[24];$/;"	m	struct:parallels_header	file:
padding	./src/ntfs.h	/^  uint32_t padding;             \/* Padding *\/$/;"	m	struct:_ntfs_attribnonresident
padding	./src/ntfs.h	/^  uint8_t  padding;             \/* 0x00 Padding *\/$/;"	m	struct:_ntfs_attribresident
padding	./src/ntfs_udl.c	/^	char		 padding[4];	\/* Unused: padding to 64 bit. *\/$/;"	m	struct:data	file:
padding	./src/ntfs_udl.c	/^	char		 padding[4];	\/* Unused: padding to 64 bit. *\/$/;"	m	struct:ufile	file:
padding	./src/ntfs_udl.c	/^	char		 padding[7];	\/* Unused: padding to 64 bit. *\/$/;"	m	struct:filename	file:
padding	./src/ole.h	/^	int16_t			padding;	\/\/ 126 must be 0$/;"	m	struct:OLE_DIR
padding	./src/partgpt.h	/^  uint8_t 	padding[420];                   \/* 0x5c *\/$/;"	m	struct:gpt_hdr
padding	./src/swap.h	/^	unsigned int padding[125];$/;"	m	struct:swap_header::__anon62
padding3	./src/wbfs.h	/^  uint8_t  padding3[2];$/;"	m	struct:wbfs_head
paf_header	./src/file_paf.c	/^static const unsigned char paf_header[11]= {'5', '0', '0', '\\0', '5', '0', '0', '\\0', 'P','A','F'};$/;"	v	file:
pagesize	./src/file_sql.c	/^ uint16_t pagesize;$/;"	m	struct:db_header	file:
par2_header	./src/file_par2.c	/^static const unsigned char par2_header[8]=  {$/;"	v	file:
parallels_header	./src/file_hds.c	/^struct parallels_header {$/;"	s	file:
param	./src/dir.h	/^  unsigned int param;$/;"	m	struct:dir_data
param_disk_struct	./src/common.h	/^struct param_disk_struct$/;"	s
params	./src/qphotorec.h	/^		struct ph_param 	*params;$/;"	m	class:QPhotorec	typeref:struct:QPhotorec::ph_param
params_reset	./src/photorec.c	/^void params_reset(struct ph_param *params, const struct ph_options *options)$/;"	f
paranoid	./src/photorec.h	/^  int paranoid;$/;"	m	struct:ph_options
parent_directory	./src/ntfs.h	/^\/*  0*\/	uint64_t parent_directory;	\/* Directory this filename is$/;"	m	struct:__anon23
parent_mref	./src/ntfs_udl.c	/^	long long	 parent_mref;$/;"	m	struct:filename	file:
parent_name	./src/ntfs_udl.c	/^	char		*parent_name;$/;"	m	struct:filename	file:
parse_instruments	./src/file_xm.c	/^static int parse_instruments(file_recovery_t *fr, uint16_t instrs)$/;"	f	file:
parse_patterns	./src/file_xm.c	/^static int parse_patterns(file_recovery_t *fr, uint16_t patterns)$/;"	f	file:
parse_signature_file	./src/file_sig.c	/^static char *parse_signature_file(file_stat_t *file_stat, char *pos)$/;"	f	file:
parse_strip_be	./src/file_tiff.c	/^static uint64_t parse_strip_be(FILE *handle, const TIFFDirEntry *entry_strip_offsets, const TIFFDirEntry *entry_strip_bytecounts)$/;"	f	file:
parse_strip_le	./src/file_tiff.c	/^static uint64_t parse_strip_le(FILE *handle, const TIFFDirEntry *entry_strip_offsets, const TIFFDirEntry *entry_strip_bytecounts)$/;"	f	file:
part	./src/common.h	/^  partition_t *part;$/;"	m	struct:list_part_struct
part_free_list	./src/fnctdsk.c	/^void part_free_list(list_part_t *list_part)$/;"	f
part_free_list_only	./src/fnctdsk.c	/^void part_free_list_only(list_part_t *list_part)$/;"	f
part_name	./src/common.h	/^  const char *part_name;$/;"	m	struct:arch_fnct_struct
part_name_option	./src/common.h	/^  const char *part_name_option;$/;"	m	struct:arch_fnct_struct
part_name_struct	./src/chgtypen.c	/^struct part_name_struct$/;"	s	file:
part_offset	./src/common.h	/^  uint64_t      part_offset;$/;"	m	struct:partition_struct
part_offset_t	./src/godmode.h	/^typedef enum part_offset part_offset_t;$/;"	t	typeref:enum:part_offset
part_size	./src/common.h	/^  uint64_t      part_size;$/;"	m	struct:partition_struct
part_type	./src/common.h	/^  const unsigned int part_type;$/;"	m	struct:systypes
part_type	./src/partgpt.h	/^  const efi_guid_t part_type;$/;"	m	struct:systypes_gtp
part_type_gpt	./src/common.h	/^  efi_guid_t    part_type_gpt;$/;"	m	struct:partition_struct
part_type_humax	./src/common.h	/^  unsigned int  part_type_humax;$/;"	m	struct:partition_struct
part_type_i386	./src/common.h	/^  unsigned int  part_type_i386;$/;"	m	struct:partition_struct
part_type_mac	./src/common.h	/^  unsigned int  part_type_mac;$/;"	m	struct:partition_struct
part_type_sun	./src/common.h	/^  unsigned int  part_type_sun;$/;"	m	struct:partition_struct
part_type_xbox	./src/common.h	/^  unsigned int  part_type_xbox;$/;"	m	struct:partition_struct
part_uuid	./src/common.h	/^  efi_guid_t    part_uuid;$/;"	m	struct:partition_struct
parti386_can_be_ext	./src/parti386.c	/^int parti386_can_be_ext(const disk_t *disk_car, const partition_t *partition)$/;"	f
partition	./src/bsd.h	/^	struct	partition {		\/* the partition table *\/$/;"	s	struct:disklabel
partition	./src/common.h	/^  const partition_t *partition;$/;"	m	struct:my_data_struct
partition	./src/photorec.h	/^  partition_t *partition;$/;"	m	struct:ph_param
partition2_i386_entry	./src/parti386.c	/^static void partition2_i386_entry(const disk_t *disk_car, const uint64_t pos, const partition_t *partition, struct partition_dos *p)$/;"	f	file:
partition_dos	./src/parti386.c	/^struct partition_dos {$/;"	s	file:
partition_generate_gpt_entry	./src/partgptw.c	/^static void partition_generate_gpt_entry(struct gpt_ent* gpt_entry, const partition_t *partition, const disk_t *disk_car)$/;"	f	file:
partition_humax	./src/parthumax.c	/^struct partition_humax {$/;"	s	file:
partition_load	./src/savehdr.c	/^backup_disk_t *partition_load(const disk_t *disk_car, const int verbose)$/;"	f
partition_new	./src/fnctdsk.c	/^partition_t *partition_new(const arch_fnct_t *arch)$/;"	f
partition_reset	./src/fnctdsk.c	/^void  partition_reset(partition_t *partition, const arch_fnct_t *arch)$/;"	f
partition_save	./src/savehdr.c	/^int partition_save(disk_t *disk_car, list_part_t *list_part, const int verbose)$/;"	f
partition_struct	./src/common.h	/^struct partition_struct$/;"	s
partition_t	./src/common.h	/^typedef struct partition_struct partition_t;$/;"	t	typeref:struct:partition_struct
partitions	./src/parthumax.c	/^  struct partition_humax partitions[4];$/;"	m	struct:humaxlabel	typeref:struct:humaxlabel::partition_humax	file:
partitions	./src/sun.h	/^  } partitions[16];$/;"	m	struct:struct_sun_partition_i386	typeref:struct:struct_sun_partition_i386::sun_info_i386
partitions	./src/sun.h	/^  } partitions[8];$/;"	m	struct:__anon8	typeref:struct:__anon8::sun_partition
partname	./src/common.h	/^  char          partname[80];$/;"	m	struct:partition_struct
pass	./src/photorec.h	/^  unsigned int pass;$/;"	m	struct:ph_param
passwordIterations	./src/luks.h	/^  uint32_t	passwordIterations;$/;"	m	struct:luks_keyslot
passwordSalt	./src/luks.h	/^  uint8_t	passwordSalt[LUKS_SALTSIZE];$/;"	m	struct:luks_keyslot
patch_version	./src/md.h	/^	uint32_t patch_version;	\/*  3 patchlevel version ...		      *\/$/;"	m	struct:mdp_superblock_s
path_table_size	./src/iso9660.h	/^	char path_table_size[8];$/;"	m	struct:iso_primary_descriptor
pattern	./src/file_mrw.c	/^  uint16_t pattern; \/\/ 0x0001 RGGB, or 0x0004 GBRG$/;"	m	struct:prd	file:
payloadOffset	./src/luks.h	/^  uint32_t	payloadOffset;$/;"	m	struct:luks_phdr
pct_file_entry	./src/file_pct.c	/^struct pct_file_entry {$/;"	s	file:
pct_header	./src/file_pct.c	/^static const unsigned char pct_header[6]= { 0x00, 0x11, 0x02, 0xff, 0x0c, 0x00};$/;"	v	file:
pcx_file_entry	./src/file_pcx.c	/^struct pcx_file_entry {$/;"	s	file:
pcx_header	./src/file_pcx.c	/^static const unsigned char pcx_header[1]= {0x0a};$/;"	v	file:
pcylcount	./src/sun.h	/^  uint16_t pcylcount;  \/* Physical cylinder count *\/$/;"	m	struct:__anon8
pds_header	./src/file_pds.c	/^static const unsigned char pds_header[25]=  {$/;"	v	file:
pe_allocated	./src/lvm.h	/^	uint32_t pe_allocated;$/;"	m	struct:__anon13
pe_image_data_dir	./src/pe.h	/^struct pe_image_data_dir {$/;"	s
pe_image_file_hdr	./src/pe.h	/^struct pe_image_file_hdr {$/;"	s
pe_image_optional_hdr32	./src/pe.h	/^struct pe_image_optional_hdr32 {$/;"	s
pe_image_optional_hdr64	./src/pe.h	/^struct pe_image_optional_hdr64 {$/;"	s
pe_image_section_hdr	./src/pe.h	/^struct pe_image_section_hdr {$/;"	s
pe_on_disk	./src/lvm.h	/^	lvm_disk_data_t pe_on_disk;$/;"	m	struct:__anon13
pe_size	./src/lvm.h	/^	uint32_t pe_size;$/;"	m	struct:__anon13
pe_total	./src/lvm.h	/^	uint32_t pe_total;$/;"	m	struct:__anon13
percent	./src/ntfs_udl.c	/^	int		 percent;	\/* Amount potentially recoverable *\/$/;"	m	struct:data	file:
peripheral_info	./src/hdaccess.c	/^  uint8_t peripheral_info;$/;"	m	struct:_scsi_inquiry_data	file:
pfind_sectors_per_cluster	./src/fat_unformat.c	/^static int pfind_sectors_per_cluster(disk_t *disk, partition_t *partition, const int verbose, unsigned int *sectors_per_cluster, uint64_t *offset_org, alloc_data_t *list_search_space)$/;"	f	file:
pgp_header	./src/file_gpg.c	/^static const unsigned char pgp_header[5]= {0xa8, 0x03, 'P', 'G', 'P'};$/;"	v	file:
ph_options	./src/photorec.h	/^struct ph_options$/;"	s
ph_param	./src/photorec.h	/^struct ph_param$/;"	s
photorec	./src/phrecn.c	/^int photorec(struct ph_param *params, const struct ph_options *options, alloc_data_t *list_search_space)$/;"	f
photorec_aux	./src/psearchn.c	/^pstatus_t photorec_aux(struct ph_param *params, const struct ph_options *options, alloc_data_t *list_search_space)$/;"	f
photorec_bf	./src/phbf.c	/^pstatus_t photorec_bf(struct ph_param *params, const struct ph_options *options, alloc_data_t *list_search_space)$/;"	f
photorec_bf_aux	./src/phbf.c	/^static pstatus_t photorec_bf_aux(struct ph_param *params, file_recovery_t *file_recovery, alloc_data_t *list_search_space, const int phase)$/;"	f	file:
photorec_bf_frag	./src/phbf.c	/^static bf_status_t photorec_bf_frag(struct ph_param *params, file_recovery_t *file_recovery, alloc_data_t *list_search_space, alloc_data_t *start_search_space, const int phase, alloc_data_t **current_search_space, uint64_t *offset, unsigned char *buffer, unsigned char *block_buffer, const unsigned int frag)$/;"	f	file:
photorec_bf_frag_fast	./src/phbf.c	/^static bf_status_t photorec_bf_frag_fast(struct ph_param *params, file_recovery_t *file_recovery, alloc_data_t *list_search_space, alloc_data_t *start_search_space, const int phase, alloc_data_t **current_search_space, uint64_t *offset, unsigned char *buffer, unsigned char *block_buffer, const unsigned int frag)$/;"	f	file:
photorec_bf_pad	./src/phbf.c	/^static bf_status_t photorec_bf_pad(struct ph_param *params, file_recovery_t *file_recovery, alloc_data_t *list_search_space, const int phase, const uint64_t file_offset, alloc_data_t **current_search_space, uint64_t *offset, unsigned char *buffer, unsigned char *block_buffer)$/;"	f	file:
photorec_check_header	./src/psearchn.c	/^inline static pstatus_t photorec_check_header(file_recovery_t *file_recovery, struct ph_param *params, const struct ph_options *options, alloc_data_t *list_search_space, const unsigned char *buffer, int *file_recovered, alloc_data_t **current_search_space, uint64_t *offset)$/;"	f	file:
photorec_dir_fat	./src/psearchn.c	/^static void photorec_dir_fat(const unsigned char *buffer, const unsigned int read_size, const unsigned long long sector)$/;"	f	file:
photorec_disk_selection_cli	./src/pdisksel.c	/^disk_t *photorec_disk_selection_cli(const char *cmd_device, const list_disk_t *list_disk, alloc_data_t *list_search_space)$/;"	f
photorec_disk_selection_ncurses	./src/pdiskseln.c	/^static int photorec_disk_selection_ncurses(struct ph_param *params, struct ph_options *options, const list_disk_t *list_disk, alloc_data_t *list_search_space)$/;"	f	file:
photorec_find_blocksize	./src/phbs.c	/^pstatus_t photorec_find_blocksize(struct ph_param *params, const struct ph_options *options, alloc_data_t *list_search_space)$/;"	f
photorec_header_found	./src/psearchn.c	/^static pstatus_t photorec_header_found(file_recovery_t *file_recovery_new, file_recovery_t *file_recovery, struct ph_param *params, const struct ph_options *options, alloc_data_t *list_search_space, const unsigned char *buffer, int *file_recovered, alloc_data_t **current_search_space, uint64_t *offset)$/;"	f	file:
photorec_info	./src/phnc.c	/^void photorec_info(WINDOW *window, const file_stat_t *file_stats)$/;"	f
photorec_mkdir	./src/photorec.c	/^unsigned int photorec_mkdir(const char *recup_dir, const unsigned int initial_dir_num)$/;"	f
photorec_new_file	./src/psearchn.c	/^static pstatus_t photorec_new_file(file_recovery_t *file_recovery, struct ph_param *params, const uint64_t offset)$/;"	f	file:
photorec_progressbar	./src/phnc.c	/^pstatus_t photorec_progressbar(WINDOW *window, const unsigned int pass, const struct ph_param *params, const uint64_t offset, const time_t current_time)$/;"	f
photorec_status	./src/photorec.h	/^enum photorec_status { STATUS_FIND_OFFSET, STATUS_UNFORMAT, STATUS_EXT2_ON, STATUS_EXT2_ON_BF, STATUS_EXT2_OFF, STATUS_EXT2_OFF_BF, STATUS_EXT2_ON_SAVE_EVERYTHING, STATUS_EXT2_OFF_SAVE_EVERYTHING, STATUS_QUIT };$/;"	g
photorec_status_t	./src/photorec.h	/^typedef enum photorec_status photorec_status_t;$/;"	t	typeref:enum:photorec_status
physical_drive	./src/ntfs.h	/^	uint8_t	physical_drive;	\/* 0x24 physical drive number  *\/$/;"	m	struct:ntfs_boot_sector
pixelsize	./src/file_mrw.c	/^  uint8_t pixelsize; \/\/ bits used, always 12$/;"	m	struct:prd	file:
plt_header	./src/file_plt.c	/^static const unsigned char plt_header[44]=  {$/;"	v	file:
png_chunk	./src/file_png.c	/^struct png_chunk$/;"	s	file:
pool	./src/suspend.c	/^  char *pool;$/;"	m	struct:my_memory_mgr	file:
pool_size	./src/suspend.c	/^  long pool_size;$/;"	m	struct:my_memory_mgr	file:
pos_in_mem	./src/file_mp3.c	/^static unsigned int pos_in_mem(const unsigned char *haystack, const unsigned int haystack_size, const unsigned char *needle, const unsigned int needle_size)$/;"	f	file:
pos_in_mem	./src/file_zip.c	/^static unsigned int pos_in_mem(const unsigned char *haystack, const unsigned int haystack_size, const unsigned char *needle, const unsigned int needle_size)$/;"	f	file:
power_of_two	./src/rfs_dir.c	/^static int power_of_two(unsigned long value) {$/;"	f	file:
prc_header	./src/file_prc.c	/^static const unsigned char prc_header[16]= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,'a','p','p','l'};$/;"	v	file:
prd	./src/file_mrw.c	/^struct prd {$/;"	s	file:
pre_zero	./src/suspend.c	/^  boolean pre_zero;		\/* pre-zero mode requested? *\/$/;"	m	struct:jvirt_barray_control	file:
pre_zero	./src/suspend.c	/^  boolean pre_zero;		\/* pre-zero mode requested? *\/$/;"	m	struct:jvirt_sarray_control	file:
pread	./src/common.h	/^  int (*pread)(disk_t *disk, void *buf, const unsigned int count, const uint64_t offset);$/;"	m	struct:param_disk_struct
pref_name	./src/ntfs_udl.c	/^	char		*pref_name;	\/* Preferred filename *\/$/;"	m	struct:ufile	file:
pref_pname	./src/ntfs_udl.c	/^	char		*pref_pname;	\/*	     parent filename *\/$/;"	m	struct:ufile	file:
preparer_id	./src/iso9660.h	/^	char preparer_id[128];$/;"	m	struct:iso_primary_descriptor
prev	./src/common.h	/^  list_disk_t *prev;$/;"	m	struct:list_disk_struct
prev	./src/common.h	/^  list_part_t *prev;$/;"	m	struct:list_part_struct
prev	./src/io_redir.c	/^  list_redir_t *prev;$/;"	m	struct:struclist_redir_t	file:
prev	./src/list.h	/^	struct td_list_head *next, *prev;$/;"	m	struct:td_list_head	typeref:struct:td_list_head::
prev	./src/ole.h	/^	int32_t		prev;$/;"	m	struct:DIRECTORY
prev_dirent	./src/ole.h	/^	uint32_t	prev_dirent;	\/\/ 68$/;"	m	struct:OLE_DIR
prev_tag_size	./src/file_flv.c	/^  uint32_t	prev_tag_size;$/;"	m	struct:flv_tag	file:
prgsize	./src/file_nes.c	/^	uint8_t prgsize;$/;"	m	struct:nes_header	file:
primary_sequence_number	./src/file_reg.c	/^  uint32_t primary_sequence_number;$/;"	m	struct:regf_file_header	file:
privLength	./src/file_woff.c	/^  uint32_t	privLength;$/;"	m	struct:WOFFHeader	file:
privOffset	./src/file_woff.c	/^  uint32_t	privOffset;$/;"	m	struct:WOFFHeader	file:
private_dir_data	./src/dir.h	/^  void *private_dir_data;$/;"	m	struct:dir_data
productType	./src/file_wpd.c	/^  uint8_t	productType;$/;"	m	struct:wpd_hdr	file:
product_id	./src/hdaccess.c	/^  uint8_t product_id[16];$/;"	m	struct:_scsi_inquiry_data	file:
product_revision	./src/hdaccess.c	/^  uint8_t product_revision[4];$/;"	m	struct:_scsi_inquiry_data	file:
progress_bar	./src/qphotorec.h	/^		QProgressBar 		*progress_bar;$/;"	m	class:QPhotorec
progress_filefound	./src/qphotorec.h	/^		QLabel 			*progress_filefound;$/;"	m	class:QPhotorec
progress_info	./src/qphotorec.h	/^		QLabel 			*progress_info;$/;"	m	class:QPhotorec
project	./src/file_dpx.c	/^  char 		project[200];     \/* project name *\/$/;"	m	struct:header_dpx	file:
proto_ids_off	./src/file_dex.c	/^  uint32_t	proto_ids_off;$/;"	m	struct:dex_header	file:
proto_ids_size	./src/file_dex.c	/^  uint32_t	proto_ids_size;$/;"	m	struct:dex_header	file:
prt_header	./src/file_prt.c	/^static const unsigned char prt_header[12]= {$/;"	v	file:
ps_header	./src/file_ps.c	/^static const unsigned char ps_header[11]= { '%','!','P','S','-','A','d','o','b','e','-'};$/;"	v	file:
psb_file_header	./src/file_psb.c	/^struct psb_file_header$/;"	s	file:
psb_image_data_size_max	./src/file_psb.c	/^static uint64_t psb_image_data_size_max=0;$/;"	v	file:
psb_skip_color_mode	./src/file_psb.c	/^static data_check_t psb_skip_color_mode(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
psb_skip_image_data	./src/file_psb.c	/^static data_check_t psb_skip_image_data(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
psb_skip_image_resources	./src/file_psb.c	/^static data_check_t psb_skip_image_resources(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
psb_skip_layer_info	./src/file_psb.c	/^static data_check_t psb_skip_layer_info(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
psd_file_header	./src/file_psd.c	/^struct psd_file_header$/;"	s	file:
psd_image_data_size_max	./src/file_psd.c	/^static uint64_t psd_image_data_size_max=0;$/;"	v	file:
psd_skip_color_mode	./src/file_psd.c	/^static data_check_t psd_skip_color_mode(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
psd_skip_image_data	./src/file_psd.c	/^static data_check_t psd_skip_image_data(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
psd_skip_image_resources	./src/file_psd.c	/^static data_check_t psd_skip_image_resources(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
psd_skip_layer_info	./src/file_psd.c	/^static data_check_t psd_skip_layer_info(const unsigned char *buffer, const unsigned int buffer_size, file_recovery_t *file_recovery)$/;"	f	file:
psp_chunk	./src/file_psp.c	/^struct psp_chunk {$/;"	s	file:
pstate_reserved	./src/md.h	/^	uint32_t pstate_reserved[MD_SB_PERSONALITY_WORDS - 4];$/;"	m	struct:mdp_superblock_s
pstatus_t	./src/photorec.h	/^typedef enum { PSTATUS_OK=0, PSTATUS_STOP=1, PSTATUS_EACCES=2, PSTATUS_ENOSPC=3} pstatus_t;$/;"	t	typeref:enum:__anon59
pt_offset	./src/parti386.c	66;"	d	file:
pt_offset_const	./src/parti386.c	64;"	d	file:
ptb_header	./src/file_ptb.c	/^static const unsigned char ptb_header[4]= {'p', 't', 'a', 'b'};$/;"	v	file:
ptf_header	./src/file_ptf.c	/^static const unsigned char ptf_header[19]=  {$/;"	v	file:
pub	./src/file_jpg.c	/^  struct jpeg_error_mgr pub;	\/* "public" fields, must be the first field *\/$/;"	m	struct:my_error_mgr	typeref:struct:my_error_mgr::jpeg_error_mgr	file:
pub	./src/file_jpg.c	/^  struct jpeg_source_mgr pub;	\/* public fields *\/$/;"	m	struct:__anon60	typeref:struct:__anon60::jpeg_source_mgr	file:
pub	./src/suspend.c	/^  struct jpeg_memory_mgr pub;	\/* public fields *\/$/;"	m	struct:my_memory_mgr	typeref:struct:my_memory_mgr::jpeg_memory_mgr	file:
publisher_id	./src/iso9660.h	/^	char publisher_id[128];$/;"	m	struct:iso_primary_descriptor
pv_allocatable	./src/lvm.h	/^	uint32_t pv_allocatable;$/;"	m	struct:__anon13
pv_disk_t	./src/lvm.h	92;"	d
pv_disk_v2_t	./src/lvm.h	/^} pv_disk_v2_t;$/;"	t	typeref:struct:__anon13
pv_major	./src/lvm.h	/^	uint32_t pv_major;$/;"	m	struct:__anon13
pv_number	./src/lvm.h	/^	uint32_t pv_number;$/;"	m	struct:__anon13
pv_on_disk	./src/lvm.h	/^	lvm_disk_data_t pv_on_disk;$/;"	m	struct:__anon13
pv_size	./src/lvm.h	/^	uint32_t pv_size;		\/* HM *\/$/;"	m	struct:__anon13
pv_status	./src/lvm.h	/^	uint32_t pv_status;$/;"	m	struct:__anon13
pv_uuid	./src/lvm.h	/^	uint8_t pv_uuid[NAME_LEN];$/;"	m	struct:__anon13
pv_uuid	./src/lvm.h	/^  uint8_t pv_uuid[32];$/;"	m	struct:lvm2_pv_header
pv_uuidlist_on_disk	./src/lvm.h	/^	lvm_disk_data_t pv_uuidlist_on_disk;$/;"	m	struct:__anon13
pwrite	./src/common.h	/^  int (*pwrite)(disk_t *disk, const void *buf, const unsigned int count, const uint64_t offset);$/;"	m	struct:param_disk_struct
pxd_t	./src/jfs_superblock.h	/^} pxd_t;$/;"	t	typeref:struct:__anon41
pyc_15_magic	./src/file_pyc.c	/^static const unsigned char pyc_15_magic[4]= { 0x99, 0x4e, '\\r', '\\n'};$/;"	v	file:
pyc_20_magic	./src/file_pyc.c	/^static const unsigned char pyc_20_magic[4]= { 0x87, 0xc6, '\\r', '\\n'};$/;"	v	file:
pyc_21_magic	./src/file_pyc.c	/^static const unsigned char pyc_21_magic[4]= { 0x2a, 0xeb, '\\r', '\\n'};$/;"	v	file:
pyc_22_magic	./src/file_pyc.c	/^static const unsigned char pyc_22_magic[4]= { 0x2d, 0xed, '\\r', '\\n'};$/;"	v	file:
pyc_23_magic	./src/file_pyc.c	/^static const unsigned char pyc_23_magic[4]= { 0x3b, 0xf2, '\\r', '\\n'};$/;"	v	file:
pyc_24_magic	./src/file_pyc.c	/^static const unsigned char pyc_24_magic[4]= { 0x6d, 0xf2, '\\r', '\\n'};$/;"	v	file:
pyc_25_magic	./src/file_pyc.c	/^static const unsigned char pyc_25_magic[4]= { 0xb3, 0xf2, '\\r', '\\n'};$/;"	v	file:
pyc_26_magic	./src/file_pyc.c	/^static const unsigned char pyc_26_magic[4]= { 0xd1, 0xf2, '\\r', '\\n'};$/;"	v	file:
pyc_27_magic	./src/file_pyc.c	/^static const unsigned char pyc_27_magic[4]= { 0x03, 0xf3, '\\r', '\\n'};$/;"	v	file:
pyc_30_magic	./src/file_pyc.c	/^static const unsigned char pyc_30_magic[4]= { 0x3b, 0x0c, '\\r', '\\n'};$/;"	v	file:
pyc_31_magic	./src/file_pyc.c	/^static const unsigned char pyc_31_magic[4]= { 0x4f, 0x0c, '\\r', '\\n'};$/;"	v	file:
pyc_32_magic	./src/file_pyc.c	/^static const unsigned char pyc_32_magic[4]= { 0x6c, 0x0c, '\\r', '\\n'};$/;"	v	file:
pyc_header	./src/file_pyc.c	/^struct pyc_header {$/;"	s	file:
pzf_header	./src/file_pzf.c	/^static const unsigned char pzf_header[8]=  {$/;"	v	file:
pzh_header	./src/file_pzh.c	/^static const unsigned char pzh_header[10]=  {$/;"	v	file:
qextRadioButton	./src/qphotorec.h	/^		QRadioButton 		*qextRadioButton;$/;"	m	class:QPhotorec
qfatRadioButton	./src/qphotorec.h	/^		QRadioButton 		*qfatRadioButton;$/;"	m	class:QPhotorec
qfreeRadioButton	./src/qphotorec.h	/^		QRadioButton 		*qfreeRadioButton;$/;"	m	class:QPhotorec
qkt_header	./src/file_qkt.c	/^static const unsigned char qkt_header[8]=  {$/;"	v	file:
qwholeRadioButton	./src/qphotorec.h	/^		QRadioButton 		*qwholeRadioButton;$/;"	m	class:QPhotorec
r3d_header1	./src/file_r3d.c	/^static const unsigned char r3d_header1[4]=  { 'R' , 'E' , 'D' , '1' };$/;"	v	file:
r3d_header2	./src/file_r3d.c	/^static const unsigned char r3d_header2[4]=  { 'R' , 'E' , 'D' , '2' };$/;"	v	file:
ra3_header	./src/file_ra.c	/^struct ra3_header {$/;"	s	file:
ra4_header	./src/file_ra.c	/^struct ra4_header {$/;"	s	file:
raid_disk	./src/md.h	/^	uint32_t raid_disk;	\/* 3 The role of the device in the raid set   *\/$/;"	m	struct:mdp_device_descriptor_s
raid_disks	./src/md.h	/^	uint32_t	raid_disks;$/;"	m	struct:mdp_superblock_1
raid_disks	./src/md.h	/^	uint32_t raid_disks;	\/* 10 disks in a fully functional raid set    *\/$/;"	m	struct:mdp_superblock_s
rangeShift	./src/file_ttf.c	/^  uint16_t	rangeShift;$/;"	m	struct:ttf_offset_table	file:
rar_header	./src/file_rar.c	/^static const unsigned char rar_header[7]={0x52, 0x61, 0x72, 0x21, 0x1a, 0x07, 0x00 };$/;"	v	file:
raw_header_contax	./src/file_raw.c	/^static const unsigned char raw_header_contax[7]= {'A','R','E','C','O','Y','K'};$/;"	v	file:
rbuffer	./src/common.h	/^  void *rbuffer;$/;"	m	struct:param_disk_struct
rbuffer_size	./src/common.h	/^  unsigned int rbuffer_size;$/;"	m	struct:param_disk_struct
rclBounds	./src/file_emf.c	/^  U_RECTL rclBounds;$/;"	m	struct:EMF_HDR	file:
rclFrame	./src/file_emf.c	/^  U_RECTL rclFrame;$/;"	m	struct:EMF_HDR	file:
rdc_header	./src/file_rdc.c	/^static const unsigned char rdc_header[9]= {'D','S','C','-','I','m','a','g','e'};$/;"	v	file:
read4_little_endian	./src/parti386.c	/^static unsigned int read4_little_endian(const unsigned char *cp)$/;"	f	file:
read_SB	./src/file_swf.c	/^static int read_SB(const unsigned char **data, unsigned int *offset_bit, unsigned int nbit)$/;"	f	file:
read_device_sysfs_file	./src/hdaccess.c	/^static char * read_device_sysfs_file (const disk_t *disk_car, const char *file)$/;"	f	file:
read_mft_info	./src/ntfs_adv.c	/^static int read_mft_info(disk_t *disk_car, partition_t *partition, const uint64_t mft_sector, const int verbose, unsigned int *sectors_per_cluster, uint64_t *mft_lcn, uint64_t *mftmirr_lcn, unsigned int *mft_record_size)$/;"	f	file:
read_native_max	./src/hpa_dco.c	/^static uint64_t read_native_max(int fd)$/;"	f	file:
read_part	./src/common.h	/^  list_part_t *(*read_part)(disk_t *disk, const int verbose,const int saveheader);$/;"	m	struct:arch_fnct_struct
read_part_gpt	./src/partgpt.c	/^list_part_t *read_part_gpt(disk_t *disk, const int verbose, const int saveheader)$/;"	f
read_part_gpt_aux	./src/partgpt.c	/^static list_part_t *read_part_gpt_aux(disk_t *disk_car, const int verbose, const int saveheader, const uint64_t hdr_lba)$/;"	f	file:
read_part_humax	./src/parthumax.c	/^static list_part_t *read_part_humax(disk_t *disk_car, const int verbose, const int saveheader)$/;"	f	file:
read_part_i386	./src/parti386.c	/^static list_part_t *read_part_i386(disk_t *disk_car, const int verbose, const int saveheader)$/;"	f	file:
read_part_mac	./src/partmac.c	/^static list_part_t *read_part_mac(disk_t *disk_car, const int verbose, const int saveheader)$/;"	f	file:
read_part_none	./src/partnone.c	/^static list_part_t *read_part_none(disk_t *disk, const int verbose, const int saveheader)$/;"	f	file:
read_part_sun	./src/partsun.c	/^static list_part_t *read_part_sun(disk_t *disk_car, const int verbose, const int saveheader)$/;"	f	file:
read_part_xbox	./src/partxbox.c	/^static list_part_t *read_part_xbox(disk_t *disk_car, const int verbose, const int saveheader)$/;"	f	file:
read_record	./src/ntfs_udl.c	/^static struct ufile * read_record(ntfs_volume *vol, long long record)$/;"	f	file:
readoutMode	./src/file_spe.c	/^  uint16_t  readoutMode;       \/* 1480 Readout mode, full,kinetics, etc    *\/$/;"	m	struct:header_spe	file:
real_start_time	./src/photorec.h	/^  time_t real_start_time;$/;"	m	struct:ph_param
realize_virt_arrays	./src/suspend.c	/^METHODDEF(void) realize_virt_arrays (j_common_ptr cinfo) {$/;"	f
rebuild_FAT_BS	./src/fat_adv.c	/^int rebuild_FAT_BS(disk_t *disk_car, partition_t *partition, const int verbose, const int dump_ind,const int interface,const unsigned int expert, char**current_cmd)$/;"	f
rebuild_NTFS_BS	./src/ntfs_adv.c	/^int rebuild_NTFS_BS(disk_t *disk_car, partition_t *partition, const int verbose, const int interface, const unsigned int expert, char **current_cmd)$/;"	f
recover	./src/filegen.h	/^  const int recover;$/;"	m	struct:file_hint_struct
recover_BSD	./src/bsd.c	/^int recover_BSD(disk_t *disk_car, const struct disklabel*bsd_header,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
recover_BeFS	./src/bfs.c	/^int recover_BeFS(disk_t *disk_car, const struct disk_super_block *beos_block, partition_t *partition, const int dump_ind)$/;"	f
recover_EXFAT	./src/exfat.c	/^int recover_EXFAT(const disk_t *disk, const struct exfat_super_block *exfat_header, partition_t *partition)$/;"	f
recover_EXT2	./src/ext2.c	/^int recover_EXT2(disk_t *disk, const struct ext2_super_block *sb,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
recover_FAT	./src/fat.c	/^int recover_FAT(disk_t *disk_car, const struct fat_boot_sector*fat_header, partition_t *partition, const int verbose, const int dump_ind, const int backup)$/;"	f
recover_FATX	./src/fatx.c	/^int recover_FATX(const struct disk_fatx *fatx_block, partition_t *partition)$/;"	f
recover_HFS	./src/hfs.c	/^int recover_HFS(disk_t *disk_car, const hfs_mdb_t *hfs_mdb,partition_t *partition,const int verbose, const int dump_ind, const int backup)$/;"	f
recover_HFSP	./src/hfsp.c	/^int recover_HFSP(disk_t *disk_car, const struct hfsp_vh *vh,partition_t *partition,const int verbose, const int dump_ind, const int backup)$/;"	f
recover_HPFS	./src/hpfs.c	/^int recover_HPFS(disk_t *disk_car,const struct fat_boot_sector*fat_header, partition_t *partition, const int verbose)$/;"	f
recover_ISO	./src/iso.c	/^int recover_ISO(const struct iso_primary_descriptor *iso, partition_t *partition)$/;"	f
recover_JFS	./src/jfs.c	/^int recover_JFS(disk_t *disk_car, const struct jfs_superblock *sb,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
recover_LUKS	./src/luks.c	/^int recover_LUKS(disk_t *disk_car, const struct luks_phdr *sb,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
recover_LVM	./src/lvm.c	/^int recover_LVM(disk_t *disk_car, const pv_disk_t *pv,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
recover_LVM2	./src/lvm.c	/^int recover_LVM2(disk_t *disk_car, const unsigned char *buf,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
recover_Linux_SWAP	./src/swap.c	/^int recover_Linux_SWAP(const union swap_header *swap_header, partition_t *partition)$/;"	f
recover_MD	./src/md.c	/^int recover_MD(disk_t *disk_car, const struct mdp_superblock_s *sb, partition_t *partition, const int verbose, const int dump_ind)$/;"	f
recover_MD_from_partition	./src/md.c	/^int recover_MD_from_partition(disk_t *disk_car, partition_t *partition, const int verbose)$/;"	f
recover_NTFS	./src/ntfs.c	/^int recover_NTFS(disk_t *disk_car, const struct ntfs_boot_sector*ntfs_header,partition_t *partition,const int verbose, const int dump_ind, const int backup)$/;"	f
recover_OS2MB	./src/fat.c	/^int recover_OS2MB(const disk_t *disk, const struct fat_boot_sector*fat_header, partition_t *partition, const int verbose, const int dump_ind)$/;"	f
recover_VMFS	./src/vmfs.c	/^int recover_VMFS(disk_t *disk, const struct vmfs_volume *sb, partition_t *partition, const int verbose, const int dump_ind)$/;"	f
recover_WBFS	./src/wbfs.c	/^int recover_WBFS(disk_t *disk, const struct wbfs_head *sb, partition_t *partition, const int verbose, const int dump_ind)$/;"	f
recover_ZFS	./src/zfs.c	/^int recover_ZFS(disk_t *disk, const struct vdev_boot_header *sb,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
recover_btrfs	./src/btrfs.c	/^int recover_btrfs(disk_t *disk, const struct btrfs_super_block *sb, partition_t *partition, const int verbose, const int dump_ind)$/;"	f
recover_cramfs	./src/cramfs.c	/^int recover_cramfs(disk_t *disk_car, const struct cramfs_super *sb,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
recover_gfs2	./src/gfs2.c	/^int recover_gfs2(disk_t *disk, const struct gfs2_sb *sb, partition_t *partition, const int dump_ind)$/;"	f
recover_i386_logical	./src/parti386.c	/^int recover_i386_logical(disk_t *disk, const unsigned char *buffer, partition_t *partition)$/;"	f
recover_netware	./src/netware.c	/^int recover_netware(disk_t *disk_car, const struct disk_netware *netware_block,partition_t *partition)$/;"	f
recover_rfs	./src/rfs.c	/^int recover_rfs(disk_t *disk_car, const struct reiserfs_super_block *sb,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
recover_sun_i386	./src/sun.c	/^int recover_sun_i386(disk_t *disk_car, const sun_partition_i386 *sunlabel, partition_t *partition,const int verbose, const int dump_ind)$/;"	f
recover_sysv	./src/sysv.c	/^int recover_sysv(disk_t *disk_car,  const struct sysv4_super_block *sbd, partition_t *partition,const int verbose, const int dump_ind)$/;"	f
recover_ufs	./src/ufs.c	/^int recover_ufs(disk_t *disk_car, const struct ufs_super_block *sb, partition_t *partition,const int verbose, const int dump_ind)$/;"	f
recover_xfs	./src/xfs.c	/^int recover_xfs(disk_t *disk_car, const struct xfs_sb *sb,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
recovered	./src/filegen.h	/^  unsigned int recovered;$/;"	m	struct:file_stat_struct
recovery_finished	./src/phrecn.c	/^static void recovery_finished(disk_t *disk, const partition_t *partition, const unsigned int file_nbr, const char *recup_dir, const pstatus_t ind_stop)$/;"	f	file:
recovery_offset	./src/md.h	/^	uint64_t	recovery_offset;\/* sectors before this offset (from data_offset) have been recovered *\/$/;"	m	struct:mdp_superblock_1
recup_dir	./src/photorec.h	/^  char *recup_dir;$/;"	m	struct:ph_param
reduce_structure	./src/godmode.c	/^static list_part_t *reduce_structure(list_part_t *list_part)$/;"	f	file:
ref	./src/file_hdf.c	/^  uint16_t	ref;$/;"	m	struct:dd_struct	file:
refcount_table_clusters	./src/file_cow.c	/^    uint32_t refcount_table_clusters;$/;"	m	struct:QCowHeader	file:
refcount_table_offset	./src/file_cow.c	/^    uint64_t refcount_table_offset;$/;"	m	struct:QCowHeader	file:
regf_file_header	./src/file_reg.c	/^struct regf_file_header$/;"	s	file:
register_header_check	./src/filegen.c	/^void register_header_check(const unsigned int offset, const void *value, const unsigned int length, int (*header_check)(const unsigned char *buffer, const unsigned int buffer_size,$/;"	f
register_header_check	./src/filegen.h	/^  void (*register_header_check)(file_stat_t *file_stat);$/;"	m	struct:file_hint_struct
register_header_check_1cd	./src/file_1cd.c	/^static void register_header_check_1cd(file_stat_t *file_stat)$/;"	f	file:
register_header_check_3dm	./src/file_3dm.c	/^static void register_header_check_3dm(file_stat_t *file_stat)$/;"	f	file:
register_header_check_7z	./src/file_7z.c	/^static void register_header_check_7z(file_stat_t *file_stat)$/;"	f	file:
register_header_check_DB	./src/file_DB.c	/^static void register_header_check_DB(file_stat_t *file_stat)$/;"	f	file:
register_header_check_EXTENSION	./src/file_template.c	/^static void register_header_check_EXTENSION(file_stat_t *file_stat)$/;"	f	file:
register_header_check_a	./src/file_a.c	/^static void register_header_check_a(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ab	./src/file_ab.c	/^static void register_header_check_ab(file_stat_t *file_stat)$/;"	f	file:
register_header_check_abcdp	./src/file_abcdp.c	/^static void register_header_check_abcdp(file_stat_t *file_stat)$/;"	f	file:
register_header_check_abr	./src/file_abr.c	/^static void register_header_check_abr(file_stat_t *file_stat)$/;"	f	file:
register_header_check_acb	./src/file_acb.c	/^static void register_header_check_acb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_accdb	./src/file_mdb.c	/^static void register_header_check_accdb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ace	./src/file_ace.c	/^static void register_header_check_ace(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ado	./src/file_ado.c	/^static void register_header_check_ado(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ahn	./src/file_ahn.c	/^static void register_header_check_ahn(file_stat_t *file_stat)$/;"	f	file:
register_header_check_aif	./src/file_aif.c	/^static void register_header_check_aif(file_stat_t *file_stat)$/;"	f	file:
register_header_check_all	./src/file_all.c	/^static void register_header_check_all(file_stat_t *file_stat)$/;"	f	file:
register_header_check_als	./src/file_als.c	/^static void register_header_check_als(file_stat_t *file_stat)$/;"	f	file:
register_header_check_amd	./src/file_amd.c	/^static void register_header_check_amd(file_stat_t *file_stat)$/;"	f	file:
register_header_check_amr	./src/file_amr.c	/^static void register_header_check_amr(file_stat_t *file_stat)$/;"	f	file:
register_header_check_apa	./src/file_apa.c	/^static void register_header_check_apa(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ape	./src/file_ape.c	/^static void register_header_check_ape(file_stat_t *file_stat)$/;"	f	file:
register_header_check_apple	./src/file_apple.c	/^static void register_header_check_apple(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ari	./src/file_ari.c	/^static void register_header_check_ari(file_stat_t *file_stat)$/;"	f	file:
register_header_check_arj	./src/file_arj.c	/^static void register_header_check_arj(file_stat_t *file_stat)$/;"	f	file:
register_header_check_asf	./src/file_asf.c	/^static void register_header_check_asf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_asl	./src/file_asl.c	/^static void register_header_check_asl(file_stat_t *file_stat)$/;"	f	file:
register_header_check_asm	./src/file_asm.c	/^static void register_header_check_asm(file_stat_t *file_stat)$/;"	f	file:
register_header_check_atd	./src/file_atd.c	/^static void register_header_check_atd(file_stat_t *file_stat)$/;"	f	file:
register_header_check_au	./src/file_au.c	/^static void register_header_check_au(file_stat_t *file_stat)$/;"	f	file:
register_header_check_axx	./src/file_axx.c	/^static void register_header_check_axx(file_stat_t *file_stat)$/;"	f	file:
register_header_check_bac	./src/file_bac.c	/^static void register_header_check_bac(file_stat_t *file_stat)$/;"	f	file:
register_header_check_berkeley_le	./src/file_berkeley.c	/^static void register_header_check_berkeley_le(file_stat_t *file_stat)$/;"	f	file:
register_header_check_bim	./src/file_bim.c	/^static void register_header_check_bim(file_stat_t *file_stat)$/;"	f	file:
register_header_check_binvox	./src/file_binvox.c	/^static void register_header_check_binvox(file_stat_t *file_stat)$/;"	f	file:
register_header_check_bkf	./src/file_bkf.c	/^static void register_header_check_bkf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_blend	./src/file_bld.c	/^static void register_header_check_blend(file_stat_t *file_stat)$/;"	f	file:
register_header_check_bmp	./src/file_bmp.c	/^static void register_header_check_bmp(file_stat_t *file_stat)$/;"	f	file:
register_header_check_bz2	./src/file_bz2.c	/^static void register_header_check_bz2(file_stat_t *file_stat)$/;"	f	file:
register_header_check_cab	./src/file_cab.c	/^static void register_header_check_cab(file_stat_t *file_stat)$/;"	f	file:
register_header_check_caf	./src/file_caf.c	/^static void register_header_check_caf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_cam	./src/file_cam.c	/^static void register_header_check_cam(file_stat_t *file_stat)$/;"	f	file:
register_header_check_catdrawing	./src/file_catdrawing.c	/^static void register_header_check_catdrawing(file_stat_t *file_stat)$/;"	f	file:
register_header_check_cdt	./src/file_cdt.c	/^static void register_header_check_cdt(file_stat_t *file_stat)$/;"	f	file:
register_header_check_chm	./src/file_chm.c	/^static void register_header_check_chm(file_stat_t *file_stat)$/;"	f	file:
register_header_check_class	./src/file_class.c	/^static void register_header_check_class(file_stat_t *file_stat)$/;"	f	file:
register_header_check_cm	./src/file_cm.c	/^static void register_header_check_cm(file_stat_t *file_stat)$/;"	f	file:
register_header_check_compress	./src/file_compress.c	/^static void register_header_check_compress(file_stat_t *file_stat)$/;"	f	file:
register_header_check_cow	./src/file_cow.c	/^static void register_header_check_cow(file_stat_t *file_stat)$/;"	f	file:
register_header_check_crw	./src/file_crw.c	/^static void register_header_check_crw(file_stat_t *file_stat)$/;"	f	file:
register_header_check_csh	./src/file_csh.c	/^static void register_header_check_csh(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ctg	./src/file_ctg.c	/^static void register_header_check_ctg(file_stat_t *file_stat)$/;"	f	file:
register_header_check_cwk	./src/file_cwk.c	/^static void register_header_check_cwk(file_stat_t *file_stat)$/;"	f	file:
register_header_check_d2s	./src/file_d2s.c	/^static void register_header_check_d2s(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dad	./src/file_dad.c	/^static void register_header_check_dad(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dar	./src/file_dar.c	/^static void register_header_check_dar(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dat	./src/file_dat.c	/^static void register_header_check_dat(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dbf	./src/file_dbf.c	/^static void register_header_check_dbf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dbn	./src/file_dbn.c	/^static void register_header_check_dbn(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dcm	./src/file_dcm.c	/^static void register_header_check_dcm(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ddf	./src/file_ddf.c	/^static void register_header_check_ddf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dex	./src/file_dex.c	/^static void register_header_check_dex(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dim	./src/file_dim.c	/^static void register_header_check_dim(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dir	./src/file_dir.c	/^static void register_header_check_dir(file_stat_t *file_stat)$/;"	f	file:
register_header_check_djv	./src/file_djv.c	/^static void register_header_check_djv(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dmp	./src/file_dmp.c	/^static void register_header_check_dmp(file_stat_t *file_stat)$/;"	f	file:
register_header_check_doc	./src/file_doc.c	/^static void register_header_check_doc(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dpx	./src/file_dpx.c	/^static void register_header_check_dpx(file_stat_t *file_stat)$/;"	f	file:
register_header_check_drw	./src/file_drw.c	/^static void register_header_check_drw(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ds2	./src/file_ds2.c	/^static void register_header_check_ds2(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dsc	./src/file_dsc.c	/^static void register_header_check_dsc(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dss	./src/file_dss.c	/^static void register_header_check_dss(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dta	./src/file_dta.c	/^static void register_header_check_dta(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dump	./src/file_dump.c	/^static void register_header_check_dump(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dv	./src/file_dv.c	/^static void register_header_check_dv(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dwg	./src/file_dwg.c	/^static void register_header_check_dwg(file_stat_t *file_stat)$/;"	f	file:
register_header_check_dxf	./src/file_dxf.c	/^static void register_header_check_dxf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_e01	./src/file_e01.c	/^static void register_header_check_e01(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ecryptfs	./src/file_ecryptfs.c	/^static void register_header_check_ecryptfs(file_stat_t *file_stat)$/;"	f	file:
register_header_check_edb	./src/file_edb.c	/^static void register_header_check_edb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_elf	./src/file_elf.c	/^static void register_header_check_elf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_emf	./src/file_emf.c	/^static void register_header_check_emf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_evt	./src/file_evt.c	/^static void register_header_check_evt(file_stat_t *file_stat)$/;"	f	file:
register_header_check_exe	./src/file_exe.c	/^static void register_header_check_exe(file_stat_t *file_stat)$/;"	f	file:
register_header_check_exs	./src/file_exs.c	/^static void register_header_check_exs(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ext2_fs	./src/file_ext2.c	/^static void register_header_check_ext2_fs(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ext2_sb	./src/file_ext.c	/^static void register_header_check_ext2_sb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fasttxt	./src/file_txt.c	/^static void register_header_check_fasttxt(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fat	./src/file_fat.c	/^static void register_header_check_fat(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fbf	./src/file_fbf.c	/^static void register_header_check_fbf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fbk	./src/file_fbk.c	/^static void register_header_check_fbk(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fcp	./src/file_fcp.c	/^static void register_header_check_fcp(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fcs	./src/file_fcs.c	/^static void register_header_check_fcs(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fdb	./src/file_fdb.c	/^static void register_header_check_fdb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fds	./src/file_fds.c	/^static void register_header_check_fds(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fh10	./src/file_fh10.c	/^static void register_header_check_fh10(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fh5	./src/file_fh5.c	/^static void register_header_check_fh5(file_stat_t *file_stat)$/;"	f	file:
register_header_check_filevault	./src/file_filevault.c	/^static void register_header_check_filevault(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fits	./src/file_fits.c	/^static void register_header_check_fits(file_stat_t *file_stat)$/;"	f	file:
register_header_check_flac	./src/file_flac.c	/^static void register_header_check_flac(file_stat_t *file_stat)$/;"	f	file:
register_header_check_flp	./src/file_flp.c	/^static void register_header_check_flp(file_stat_t *file_stat)$/;"	f	file:
register_header_check_flv	./src/file_flv.c	/^static void register_header_check_flv(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fob	./src/file_fob.c	/^static void register_header_check_fob(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fp5	./src/file_fp5.c	/^static void register_header_check_fp5(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fp7	./src/file_fp7.c	/^static void register_header_check_fp7(file_stat_t *file_stat)$/;"	f	file:
register_header_check_freeway	./src/file_freeway.c	/^static void register_header_check_freeway(file_stat_t *file_stat)$/;"	f	file:
register_header_check_frm	./src/file_frm.c	/^static void register_header_check_frm(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fs	./src/file_fs.c	/^static void register_header_check_fs(file_stat_t *file_stat)$/;"	f	file:
register_header_check_fwd	./src/file_fwd.c	/^static void register_header_check_fwd(file_stat_t *file_stat)$/;"	f	file:
register_header_check_gam	./src/file_gam.c	/^static void register_header_check_gam(file_stat_t *file_stat)$/;"	f	file:
register_header_check_gct	./src/file_gct.c	/^static void register_header_check_gct(file_stat_t *file_stat)$/;"	f	file:
register_header_check_gho	./src/file_gho.c	/^static void register_header_check_gho(file_stat_t *file_stat)$/;"	f	file:
register_header_check_gif	./src/file_gif.c	/^static void register_header_check_gif(file_stat_t *file_stat)$/;"	f	file:
register_header_check_gm6	./src/file_gm6.c	/^static void register_header_check_gm6(file_stat_t *file_stat)$/;"	f	file:
register_header_check_gp5	./src/file_gp5.c	/^static void register_header_check_gp5(file_stat_t *file_stat)$/;"	f	file:
register_header_check_gpg	./src/file_gpg.c	/^static void register_header_check_gpg(file_stat_t *file_stat)$/;"	f	file:
register_header_check_gz	./src/file_gz.c	/^static void register_header_check_gz(file_stat_t *file_stat)$/;"	f	file:
register_header_check_hdf	./src/file_hdf.c	/^static void register_header_check_hdf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_hds	./src/file_hds.c	/^static void register_header_check_hds(file_stat_t *file_stat)$/;"	f	file:
register_header_check_hfsp	./src/file_hfsp.c	/^static void register_header_check_hfsp(file_stat_t *file_stat)$/;"	f	file:
register_header_check_hr9	./src/file_hr9.c	/^static void register_header_check_hr9(file_stat_t *file_stat)$/;"	f	file:
register_header_check_http	./src/file_http.c	/^static void register_header_check_http(file_stat_t *file_stat)$/;"	f	file:
register_header_check_icc	./src/file_icc.c	/^static void register_header_check_icc(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ico	./src/file_ico.c	/^static void register_header_check_ico(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ifo	./src/file_ifo.c	/^static void register_header_check_ifo(file_stat_t *file_stat)$/;"	f	file:
register_header_check_imb	./src/file_imb.c	/^static void register_header_check_imb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_indd	./src/file_indd.c	/^static void register_header_check_indd(file_stat_t *file_stat)$/;"	f	file:
register_header_check_info	./src/file_info.c	/^static void register_header_check_info(file_stat_t *file_stat)$/;"	f	file:
register_header_check_iso	./src/file_iso.c	/^static void register_header_check_iso(file_stat_t *file_stat)$/;"	f	file:
register_header_check_it	./src/file_it.c	/^static void register_header_check_it(file_stat_t *file_stat)$/;"	f	file:
register_header_check_itunes	./src/file_itu.c	/^static void register_header_check_itunes(file_stat_t *file_stat)$/;"	f	file:
register_header_check_jpg	./src/file_jpg.c	/^static void register_header_check_jpg(file_stat_t *file_stat)$/;"	f	file:
register_header_check_kdb	./src/file_kdb.c	/^static void register_header_check_kdb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_kdbx	./src/file_kdbx.c	/^static void register_header_check_kdbx(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ldf	./src/file_ldf.c	/^static void register_header_check_ldf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_lit	./src/file_lit.c	/^static void register_header_check_lit(file_stat_t *file_stat)$/;"	f	file:
register_header_check_lnk	./src/file_lnk.c	/^static void register_header_check_lnk(file_stat_t *file_stat)$/;"	f	file:
register_header_check_logic	./src/file_logic.c	/^static void register_header_check_logic(file_stat_t *file_stat)$/;"	f	file:
register_header_check_lso	./src/file_lso.c	/^static void register_header_check_lso(file_stat_t *file_stat)$/;"	f	file:
register_header_check_luks	./src/file_luks.c	/^static void register_header_check_luks(file_stat_t *file_stat)$/;"	f	file:
register_header_check_lxo	./src/file_lxo.c	/^static void register_header_check_lxo(file_stat_t *file_stat)$/;"	f	file:
register_header_check_lzh	./src/file_lzh.c	/^static void register_header_check_lzh(file_stat_t *file_stat)$/;"	f	file:
register_header_check_lzo	./src/file_lzo.c	/^static void register_header_check_lzo(file_stat_t *file_stat)$/;"	f	file:
register_header_check_m2ts	./src/file_m2ts.c	/^static void register_header_check_m2ts(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mat	./src/file_mat.c	/^static void register_header_check_mat(file_stat_t *file_stat)$/;"	f	file:
register_header_check_max	./src/file_max.c	/^static void register_header_check_max(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mb	./src/file_mb.c	/^static void register_header_check_mb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mcd	./src/file_mcd.c	/^static void register_header_check_mcd(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mdb	./src/file_mdb.c	/^static void register_header_check_mdb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mdf	./src/file_mdf.c	/^static void register_header_check_mdf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mfa	./src/file_mfa.c	/^static void register_header_check_mfa(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mfg	./src/file_mfg.c	/^static void register_header_check_mfg(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mft	./src/file_mft.c	/^static void register_header_check_mft(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mid	./src/file_mid.c	/^static void register_header_check_mid(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mig	./src/file_mig.c	/^static void register_header_check_mig(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mk5	./src/file_mk5.c	/^static void register_header_check_mk5(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mkv	./src/file_mkv.c	/^static void register_header_check_mkv(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mlv	./src/file_mlv.c	/^static void register_header_check_mlv(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mobi	./src/file_mobi.c	/^static void register_header_check_mobi(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mov	./src/file_mov.c	/^static void register_header_check_mov(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mp3	./src/file_mp3.c	/^static void register_header_check_mp3(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mpg	./src/file_mpg.c	/^static void register_header_check_mpg(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mrw	./src/file_mrw.c	/^static void register_header_check_mrw(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mus	./src/file_mus.c	/^static void register_header_check_mus(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mxf	./src/file_mxf.c	/^static void register_header_check_mxf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_myo	./src/file_myo.c	/^static void register_header_check_myo(file_stat_t *file_stat)$/;"	f	file:
register_header_check_mysql	./src/file_mysql.c	/^static void register_header_check_mysql(file_stat_t *file_stat)$/;"	f	file:
register_header_check_nds	./src/file_nds.c	/^static void register_header_check_nds(file_stat_t *file_stat)$/;"	f	file:
register_header_check_nes	./src/file_nes.c	/^static void register_header_check_nes(file_stat_t *file_stat)$/;"	f	file:
register_header_check_njx	./src/file_njx.c	/^static void register_header_check_njx(file_stat_t *file_stat)$/;"	f	file:
register_header_check_nk2	./src/file_nk2.c	/^static void register_header_check_nk2(file_stat_t *file_stat)$/;"	f	file:
register_header_check_nsf	./src/file_nsf.c	/^static void register_header_check_nsf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_oci	./src/file_oci.c	/^static void register_header_check_oci(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ogg	./src/file_ogg.c	/^static void register_header_check_ogg(file_stat_t *file_stat)$/;"	f	file:
register_header_check_one	./src/file_one.c	/^static void register_header_check_one(file_stat_t *file_stat)$/;"	f	file:
register_header_check_orf	./src/file_orf.c	/^static void register_header_check_orf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_paf	./src/file_paf.c	/^static void register_header_check_paf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_pap	./src/file_pap.c	/^static void register_header_check_pap(file_stat_t *file_stat)$/;"	f	file:
register_header_check_par2	./src/file_par2.c	/^static void register_header_check_par2(file_stat_t *file_stat)$/;"	f	file:
register_header_check_pcap	./src/file_pcap.c	/^static void register_header_check_pcap(file_stat_t *file_stat)$/;"	f	file:
register_header_check_pct	./src/file_pct.c	/^static void register_header_check_pct(file_stat_t *file_stat)$/;"	f	file:
register_header_check_pcx	./src/file_pcx.c	/^static void register_header_check_pcx(file_stat_t *file_stat)$/;"	f	file:
register_header_check_pdf	./src/file_pdf.c	/^static void register_header_check_pdf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_pds	./src/file_pds.c	/^static void register_header_check_pds(file_stat_t *file_stat)$/;"	f	file:
register_header_check_pfx	./src/file_pfx.c	/^static void register_header_check_pfx(file_stat_t *file_stat)$/;"	f	file:
register_header_check_plt	./src/file_plt.c	/^static void register_header_check_plt(file_stat_t *file_stat)$/;"	f	file:
register_header_check_png	./src/file_png.c	/^static void register_header_check_png(file_stat_t *file_stat)$/;"	f	file:
register_header_check_pnm	./src/file_pnm.c	/^static void register_header_check_pnm(file_stat_t *file_stat)$/;"	f	file:
register_header_check_prc	./src/file_prc.c	/^static void register_header_check_prc(file_stat_t *file_stat)$/;"	f	file:
register_header_check_prt	./src/file_prt.c	/^static void register_header_check_prt(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ps	./src/file_ps.c	/^static void register_header_check_ps(file_stat_t *file_stat)$/;"	f	file:
register_header_check_psb	./src/file_psb.c	/^static void register_header_check_psb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_psd	./src/file_psd.c	/^static void register_header_check_psd(file_stat_t *file_stat)$/;"	f	file:
register_header_check_psf	./src/file_psf.c	/^static void register_header_check_psf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_psp	./src/file_psp.c	/^static void register_header_check_psp(file_stat_t *file_stat)$/;"	f	file:
register_header_check_pst	./src/file_pst.c	/^static void register_header_check_pst(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ptb	./src/file_ptb.c	/^static void register_header_check_ptb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ptf	./src/file_ptf.c	/^static void register_header_check_ptf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_pyc	./src/file_pyc.c	/^static void register_header_check_pyc(file_stat_t *file_stat)$/;"	f	file:
register_header_check_pzf	./src/file_pzf.c	/^static void register_header_check_pzf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_pzh	./src/file_pzh.c	/^static void register_header_check_pzh(file_stat_t *file_stat)$/;"	f	file:
register_header_check_qbb	./src/file_qbb.c	/^static void register_header_check_qbb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_qdf	./src/file_qdf.c	/^static void register_header_check_qdf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_qkt	./src/file_qkt.c	/^static void register_header_check_qkt(file_stat_t *file_stat)$/;"	f	file:
register_header_check_qxd	./src/file_qxd.c	/^static void register_header_check_qxd(file_stat_t *file_stat)$/;"	f	file:
register_header_check_r3d	./src/file_r3d.c	/^static void register_header_check_r3d(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ra	./src/file_ra.c	/^static void register_header_check_ra(file_stat_t *file_stat)$/;"	f	file:
register_header_check_raf	./src/file_raf.c	/^static void register_header_check_raf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_rar	./src/file_rar.c	/^static void register_header_check_rar(file_stat_t *file_stat)$/;"	f	file:
register_header_check_raw	./src/file_raw.c	/^static void register_header_check_raw(file_stat_t *file_stat)$/;"	f	file:
register_header_check_rdc	./src/file_rdc.c	/^static void register_header_check_rdc(file_stat_t *file_stat)$/;"	f	file:
register_header_check_reg	./src/file_reg.c	/^static void register_header_check_reg(file_stat_t *file_stat)$/;"	f	file:
register_header_check_res	./src/file_res.c	/^static void register_header_check_res(file_stat_t *file_stat)$/;"	f	file:
register_header_check_rfp	./src/file_rfp.c	/^static void register_header_check_rfp(file_stat_t *file_stat)$/;"	f	file:
register_header_check_riff	./src/file_riff.c	/^static void register_header_check_riff(file_stat_t *file_stat)$/;"	f	file:
register_header_check_rlv	./src/file_rlv.c	/^static void register_header_check_rlv(file_stat_t *file_stat)$/;"	f	file:
register_header_check_rm	./src/file_rm.c	/^static void register_header_check_rm(file_stat_t *file_stat)$/;"	f	file:
register_header_check_rns	./src/file_rns.c	/^static void register_header_check_rns(file_stat_t *file_stat)$/;"	f	file:
register_header_check_rpm	./src/file_rpm.c	/^static void register_header_check_rpm(file_stat_t *file_stat)$/;"	f	file:
register_header_check_rw2	./src/file_rw2.c	/^static void register_header_check_rw2(file_stat_t *file_stat)$/;"	f	file:
register_header_check_rx2	./src/file_rx2.c	/^static void register_header_check_rx2(file_stat_t *file_stat)$/;"	f	file:
register_header_check_save	./src/file_save.c	/^static void register_header_check_save(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ses	./src/file_ses.c	/^static void register_header_check_ses(file_stat_t *file_stat)$/;"	f	file:
register_header_check_shn	./src/file_shn.c	/^static void register_header_check_shn(file_stat_t *file_stat)$/;"	f	file:
register_header_check_sib	./src/file_sib.c	/^static void register_header_check_sib(file_stat_t *file_stat)$/;"	f	file:
register_header_check_sig	./src/file_sig.c	/^static void register_header_check_sig(file_stat_t *file_stat)$/;"	f	file:
register_header_check_sit	./src/file_sit.c	/^static void register_header_check_sit(file_stat_t *file_stat)$/;"	f	file:
register_header_check_skd	./src/file_skd.c	/^static void register_header_check_skd(file_stat_t *file_stat)$/;"	f	file:
register_header_check_skp	./src/file_skp.c	/^static void register_header_check_skp(file_stat_t *file_stat)$/;"	f	file:
register_header_check_sp3	./src/file_sp3.c	/^static void register_header_check_sp3(file_stat_t *file_stat)$/;"	f	file:
register_header_check_spe	./src/file_spe.c	/^static void register_header_check_spe(file_stat_t *file_stat)$/;"	f	file:
register_header_check_spf	./src/file_spf.c	/^static void register_header_check_spf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_spss	./src/file_spss.c	/^static void register_header_check_spss(file_stat_t *file_stat)$/;"	f	file:
register_header_check_sqlite	./src/file_sql.c	/^static void register_header_check_sqlite(file_stat_t *file_stat)$/;"	f	file:
register_header_check_sqm	./src/file_sqm.c	/^static void register_header_check_sqm(file_stat_t *file_stat)$/;"	f	file:
register_header_check_stl	./src/file_stl.c	/^static void register_header_check_stl(file_stat_t *file_stat)$/;"	f	file:
register_header_check_stuffit	./src/file_stu.c	/^static void register_header_check_stuffit(file_stat_t *file_stat)$/;"	f	file:
register_header_check_swf	./src/file_swf.c	/^static void register_header_check_swf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_tar	./src/file_tar.c	/^static void register_header_check_tar(file_stat_t *file_stat)$/;"	f	file:
register_header_check_tax	./src/file_tax.c	/^static void register_header_check_tax(file_stat_t *file_stat)$/;"	f	file:
register_header_check_tib	./src/file_tib.c	/^static void register_header_check_tib(file_stat_t *file_stat)$/;"	f	file:
register_header_check_tiff	./src/file_tiff.c	/^static void register_header_check_tiff(file_stat_t *file_stat)$/;"	f	file:
register_header_check_tivo	./src/file_tivo.c	/^static void register_header_check_tivo(file_stat_t *file_stat)$/;"	f	file:
register_header_check_torrent	./src/file_torrent.c	/^static void register_header_check_torrent(file_stat_t *file_stat)$/;"	f	file:
register_header_check_tph	./src/file_tph.c	/^static void register_header_check_tph(file_stat_t *file_stat)$/;"	f	file:
register_header_check_tpl	./src/file_tpl.c	/^static void register_header_check_tpl(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ts	./src/file_m2ts.c	/^static void register_header_check_ts(file_stat_t *file_stat)$/;"	f	file:
register_header_check_ttf	./src/file_ttf.c	/^static void register_header_check_ttf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_txt	./src/file_txt.c	/^static void register_header_check_txt(file_stat_t *file_stat)$/;"	f	file:
register_header_check_tz	./src/file_tz.c	/^static void register_header_check_tz(file_stat_t *file_stat)$/;"	f	file:
register_header_check_v2i	./src/file_v2i.c	/^static void register_header_check_v2i(file_stat_t *file_stat)$/;"	f	file:
register_header_check_vault	./src/file_vault.c	/^static void register_header_check_vault(file_stat_t *file_stat)$/;"	f	file:
register_header_check_vdi	./src/file_vdi.c	/^static void register_header_check_vdi(file_stat_t *file_stat)$/;"	f	file:
register_header_check_veg	./src/file_veg.c	/^static void register_header_check_veg(file_stat_t *file_stat)$/;"	f	file:
register_header_check_vfb	./src/file_vfb.c	/^static void register_header_check_vfb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_vmdk	./src/file_vmdk.c	/^static void register_header_check_vmdk(file_stat_t *file_stat)$/;"	f	file:
register_header_check_vmg	./src/file_vmg.c	/^static void register_header_check_vmg(file_stat_t *file_stat)$/;"	f	file:
register_header_check_wallet	./src/file_wallet.c	/^static void register_header_check_wallet(file_stat_t *file_stat)$/;"	f	file:
register_header_check_wdp	./src/file_wdp.c	/^static void register_header_check_wdp(file_stat_t *file_stat)$/;"	f	file:
register_header_check_wim	./src/file_wim.c	/^static void register_header_check_wim(file_stat_t *file_stat)$/;"	f	file:
register_header_check_win	./src/file_win.c	/^static void register_header_check_win(file_stat_t *file_stat)$/;"	f	file:
register_header_check_wks	./src/file_wks.c	/^static void register_header_check_wks(file_stat_t *file_stat)$/;"	f	file:
register_header_check_wmf	./src/file_wmf.c	/^static void register_header_check_wmf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_wnk	./src/file_wnk.c	/^static void register_header_check_wnk(file_stat_t *file_stat)$/;"	f	file:
register_header_check_woff	./src/file_woff.c	/^static void register_header_check_woff(file_stat_t *file_stat)$/;"	f	file:
register_header_check_wpb	./src/file_wpb.c	/^static void register_header_check_wpb(file_stat_t *file_stat)$/;"	f	file:
register_header_check_wpd	./src/file_wpd.c	/^static void register_header_check_wpd(file_stat_t *file_stat)$/;"	f	file:
register_header_check_wtv	./src/file_wtv.c	/^static void register_header_check_wtv(file_stat_t *file_stat)$/;"	f	file:
register_header_check_wv	./src/file_wv.c	/^static void register_header_check_wv(file_stat_t *file_stat)$/;"	f	file:
register_header_check_x3f	./src/file_x3f.c	/^static void register_header_check_x3f(file_stat_t *file_stat)$/;"	f	file:
register_header_check_xcf	./src/file_xcf.c	/^static void register_header_check_xcf(file_stat_t *file_stat)$/;"	f	file:
register_header_check_xfi	./src/file_xfi.c	/^static void register_header_check_xfi(file_stat_t *file_stat)$/;"	f	file:
register_header_check_xm	./src/file_xm.c	/^static void register_header_check_xm(file_stat_t *file_stat)$/;"	f	file:
register_header_check_xpt	./src/file_xpt.c	/^static void register_header_check_xpt(file_stat_t *file_stat)$/;"	f	file:
register_header_check_xsv	./src/file_xsv.c	/^static void register_header_check_xsv(file_stat_t *file_stat)$/;"	f	file:
register_header_check_xv	./src/file_xv.c	/^static void register_header_check_xv(file_stat_t *file_stat)$/;"	f	file:
register_header_check_xz	./src/file_xz.c	/^static void register_header_check_xz(file_stat_t *file_stat)$/;"	f	file:
register_header_check_z2d	./src/file_z2d.c	/^static void register_header_check_z2d(file_stat_t *file_stat)$/;"	f	file:
register_header_check_zip	./src/file_zip.c	/^static void register_header_check_zip(file_stat_t *file_stat)$/;"	f	file:
reiser4_master_sb	./src/rfs.h	/^struct reiser4_master_sb {$/;"	s
reiser_copy	./src/rfs_dir.c	/^static int reiser_copy(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const file_info_t *file)$/;"	f	file:
reiser_dir	./src/rfs_dir.c	/^static int reiser_dir(disk_t *disk_car, const partition_t *partition, dir_data_t *dir_data, const unsigned long int cluster, file_info_t *dir_list)$/;"	f	file:
reiserfs_super_block	./src/rfs.h	/^struct reiserfs_super_block$/;"	s
relative_name	./src/dfxml.c	/^static const char *relative_name(const char *fname)$/;"	f	file:
reloc_table_offset	./src/pe.h	/^    uint16_t reloc_table_offset;$/;"	m	struct:dos_image_file_hdr
remove_used_space	./src/photorec.c	/^unsigned int remove_used_space(disk_t *disk_car, const partition_t *partition, alloc_data_t *list_search_space)$/;"	f
repair_FAT_table	./src/fat_adv.c	/^int repair_FAT_table(disk_t *disk_car, partition_t *partition, const int verbose, char **current_cmd)$/;"	f
repair_MFT	./src/ntfs_fix.c	/^int repair_MFT(disk_t *disk_car, partition_t *partition, const int verbose, const unsigned int expert, char **current_cmd)$/;"	f
reparse_point_tag	./src/ntfs.h	/^	\/* 3c*\/	uint32_t reparse_point_tag;		\/* Type of reparse point,$/;"	m	union:__anon23::__anon24
reserved	./src/btrfs.h	/^	uint64_t reserved[32];$/;"	m	struct:btrfs_super_block
reserved	./src/exfat.h	/^  uint8_t  reserved[18];$/;"	m	struct:exfat_alloc_bitmap_entry
reserved	./src/fat.h	/^	uint16_t	reserved;	\/* 0x0E reserved sectors *\/$/;"	m	struct:fat_boot_sector
reserved	./src/fat.h	/^	uint8_t    reserved;		\/* 0C always 0 *\/$/;"	m	struct:msdos_dir_slot
reserved	./src/file_arj.c	/^  uint8_t	reserved;$/;"	m	struct:arj_main_header	file:
reserved	./src/file_bmp.c	/^  uint32_t reserved;$/;"	m	struct:bmp_header	file:
reserved	./src/file_fcs.c	/^  unsigned char reserved[4];$/;"	m	struct:fcs_header	file:
reserved	./src/file_ico.c	/^  uint16_t	reserved;$/;"	m	struct:ico_header	file:
reserved	./src/file_ico.c	/^  uint8_t	reserved;$/;"	m	struct:ico_directory	file:
reserved	./src/file_lzh.c	/^  uint8_t  reserved;$/;"	m	struct:lzh_level2	file:
reserved	./src/file_psb.c	/^  char reserved[6];	\/* must be 0 *\/$/;"	m	struct:psb_file_header	file:
reserved	./src/file_psd.c	/^  char reserved[6];	\/* must be 0 *\/$/;"	m	struct:psd_file_header	file:
reserved	./src/file_rpm.c	/^  char reserved[16];$/;"	m	struct:rpmlead	file:
reserved	./src/file_sql.c	/^ uint8_t  reserved;$/;"	m	struct:db_header	file:
reserved	./src/file_woff.c	/^  uint16_t	reserved;$/;"	m	struct:WOFFHeader	file:
reserved	./src/hfsp.h	/^        uint32_t         reserved;	\/\/ 0C$/;"	m	struct:hfsp_vh
reserved	./src/md.h	/^	uint32_t reserved[MD_SB_DESCRIPTOR_WORDS - 5];$/;"	m	struct:mdp_device_descriptor_s
reserved	./src/md.h	/^	uint32_t reserved[MD_SB_RESERVED_WORDS];$/;"	m	struct:mdp_superblock_s
reserved	./src/ntfs.h	/^		\/* 3e*\/	uint16_t reserved;		\/* Reserved for alignment. *\/$/;"	m	struct:__anon23::__anon24::__anon25
reserved	./src/ntfs.h	/^	uint16_t	reserved;	\/* 0x0E reserved sectors = 0 *\/$/;"	m	struct:ntfs_boot_sector
reserved	./src/ntfs.h	/^  uint16_t	reserved;		\/* NTFS 3.1+ *\/$/;"	m	struct:ntfs_mft_record
reserved	./src/ntfs.h	/^\/* 13*\/	uint8_t reserved[3];		\/* Reserved\/align to 8-byte boundary. *\/$/;"	m	struct:__anon26
reserved	./src/ntfs.h	/^\/* 13*\/ uint8_t reserved[3];    \/* Reserved\/align to 8-byte boundary.*\/$/;"	m	struct:__anon22
reserved	./src/ole.h	/^	int16_t			reserved;	\/\/ 124 must be 0$/;"	m	struct:OLE_DIR
reserved	./src/ole.h	/^	uint16_t	reserved;				\/*34*\/$/;"	m	struct:OLE_HDR
reserved	./src/swap.h	/^	char reserved[PAGE_8K- 10];$/;"	m	struct:swap_header::__anon63
reserved	./src/swap.h	/^	char reserved[PAGE_SIZE - 10];$/;"	m	struct:swap_header::__anon61
reserved0	./src/file_cwk.c	/^  uint64_t	reserved0;$/;"	m	struct:cwk_header	file:
reserved0	./src/ntfs.h	/^	uint8_t  	reserved0[3];               	\/* zero *\/$/;"	m	struct:ntfs_boot_sector
reserved1	./src/exfat.h	/^  uint16_t reserved1;$/;"	m	struct:exfat_file_entry
reserved1	./src/exfat.h	/^  uint8_t  reserved1;$/;"	m	struct:exfat_stream_ext_entry
reserved1	./src/fat.h	/^  uint8_t reserved1[480];$/;"	m	struct:fat_fsinfo
reserved1	./src/file_asf.c	/^  char		reserved1;	\/* 1 *\/$/;"	m	struct:asf_header_obj_s	file:
reserved1	./src/file_cwk.c	/^  uint16_t	reserved1;$/;"	m	struct:cwk_header	file:
reserved1	./src/file_ecryptfs.c	/^  unsigned char reserved1;$/;"	m	struct:ecrypfs_header	file:
reserved1	./src/ntfs.h	/^	uint8_t  	reserved1[3];               	\/* zero *\/$/;"	m	struct:ntfs_boot_sector
reserved1	./src/ole.h	/^	uint32_t	reserved1;				\/*36*\/$/;"	m	struct:OLE_HDR
reserved2	./src/exfat.h	/^  uint16_t reserved2;$/;"	m	struct:exfat_stream_ext_entry
reserved2	./src/exfat.h	/^  uint8_t  reserved2[7];$/;"	m	struct:exfat_file_entry
reserved2	./src/file_asf.c	/^  char		reserved2;	\/* 2 *\/$/;"	m	struct:asf_header_obj_s	file:
reserved2	./src/file_ecryptfs.c	/^  unsigned char reserved2;$/;"	m	struct:ecrypfs_header	file:
reserved2	./src/ntfs.h	/^	uint16_t	reserved2;	\/* 0x26 usually 0x80 *\/$/;"	m	struct:ntfs_boot_sector
reserved3	./src/exfat.h	/^  uint32_t reserved3;$/;"	m	struct:exfat_stream_ext_entry
reserved3	./src/fat.h	/^  uint8_t reserved3[12];$/;"	m	struct:fat_fsinfo
reserved_20	./src/file_lzh.c	/^  uint8_t  reserved_20;$/;"	m	struct:lzh_level1	file:
reserved_for_expansion	./src/file_sql.c	/^ char     reserved_for_expansion[20];$/;"	m	struct:db_header	file:
reset_file_recovery	./src/filegen.c	/^void reset_file_recovery(file_recovery_t *file_recovery)$/;"	f
reset_list_file_enable	./src/phcfg.c	/^void reset_list_file_enable(file_enable_t *files_enable)$/;"	f
reshape_position	./src/md.h	/^	uint64_t	reshape_position;	\/* next address in array-space for reshape *\/$/;"	m	struct:mdp_superblock_1
reshdr_disk_short	./src/file_wim.c	/^struct reshdr_disk_short$/;"	s	file:
resident	./src/ntfs_udl.c	/^	int		 resident;	\/* Stream is resident *\/$/;"	m	struct:data	file:
resume_memory	./src/suspend.c	/^int resume_memory(j_common_ptr cinfo)$/;"	f
resume_memory	./src/suspend_no.c	/^int resume_memory(j_common_ptr cinfo)$/;"	f
resync_offset	./src/md.h	/^	uint64_t	resync_offset;	\/* data before this offset (from data_offset) known to be in sync *\/$/;"	m	struct:mdp_superblock_1
rfp_header	./src/file_rfp.c	/^static const unsigned char rfp_header[10]=  {$/;"	v	file:
rfs_dir_struct	./src/rfs_dir.c	/^struct rfs_dir_struct {$/;"	s	file:
rgd_offset	./src/file_vmdk.c	/^  int64_t rgd_offset;$/;"	m	struct:__anon39	file:
rgdb_block	./src/file_reg.c	/^struct rgdb_block$/;"	s	file:
rgdb_offset	./src/file_reg.c	/^  uint32_t rgdb_offset;$/;"	m	struct:creg_file_header	file:
rhBootMetadata	./src/file_wim.c	/^  struct reshdr_disk_short	rhBootMetadata;$/;"	m	struct:_WIMHEADER_V1_PACKED	typeref:struct:_WIMHEADER_V1_PACKED::reshdr_disk_short	file:
rhIntegrity	./src/file_wim.c	/^  struct reshdr_disk_short	rhIntegrity;$/;"	m	struct:_WIMHEADER_V1_PACKED	typeref:struct:_WIMHEADER_V1_PACKED::reshdr_disk_short	file:
rhOffsetTable	./src/file_wim.c	/^  struct reshdr_disk_short	rhOffsetTable;$/;"	m	struct:_WIMHEADER_V1_PACKED	typeref:struct:_WIMHEADER_V1_PACKED::reshdr_disk_short	file:
rhXmlData	./src/file_wim.c	/^  struct reshdr_disk_short	rhXmlData;$/;"	m	struct:_WIMHEADER_V1_PACKED	typeref:struct:_WIMHEADER_V1_PACKED::reshdr_disk_short	file:
riff_chunk_header	./src/file_riff.c	/^} riff_chunk_header;$/;"	t	typeref:struct:__anon3	file:
riff_list_header	./src/file_riff.c	/^} riff_list_header;$/;"	t	typeref:struct:__anon4	file:
right	./src/file_emf.c	/^  int32_t right;$/;"	m	struct:__anon20	file:
rm_header	./src/file_rm.c	/^struct rm_header$/;"	s	file:
rns_header	./src/file_rns.c	/^static const unsigned char rns_header[]  = "Propellerheads Reason Song File";$/;"	v	file:
root	./src/btrfs.h	/^	uint64_t root;$/;"	m	struct:btrfs_super_block
root	./src/cramfs.h	/^	struct cramfs_inode root;	\/* root inode data *\/$/;"	m	struct:cramfs_super	typeref:struct:cramfs_super::cramfs_inode
root_block	./src/md.h	/^	uint32_t root_block;	\/*  3 LV root block *\/$/;"	m	struct:mdp_superblock_s
root_cluster	./src/fat.h	/^	uint32_t	root_cluster;	\/* 0x2C first cluster in root directory *\/$/;"	m	struct:fat_boot_sector
root_dir	./src/bfs.h	/^    inode_addr   root_dir;              \/* 0x74 *\/$/;"	m	struct:disk_super_block
root_dir_objectid	./src/btrfs.h	/^	uint64_t root_dir_objectid;$/;"	m	struct:btrfs_super_block
root_directory_record	./src/iso9660.h	/^	char root_directory_record[34];$/;"	m	struct:iso_primary_descriptor
root_key_offset	./src/file_reg.c	/^  uint32_t root_key_offset;$/;"	m	struct:regf_file_header	file:
root_level	./src/btrfs.h	/^	uint8_t root_level;$/;"	m	struct:btrfs_super_block
root_pv	./src/md.h	/^	uint32_t root_pv;		\/*  2 LV root PV *\/$/;"	m	struct:mdp_superblock_s
root_start_block	./src/ole.h	/^	uint32_t	root_start_block;		\/*48*\/$/;"	m	struct:OLE_HDR
rootdir_clusnr	./src/exfat.h	/^	uint32_t  	rootdir_clusnr;         \/* 0x60 start clusnr of rootdir *\/$/;"	m	struct:exfat_super_block
rotation	./src/file_x3f.c	/^  uint32_t	rotation;$/;"	m	struct:x3f_header	file:
row_stride	./src/file_jpg.c	/^  unsigned int row_stride;$/;"	m	struct:jpeg_session_struct	file:
rows	./src/file_x3f.c	/^  uint32_t	rows;$/;"	m	struct:x3f_header	file:
rows_in_array	./src/suspend.c	/^  JDIMENSION rows_in_array;	\/* total virtual array height *\/$/;"	m	struct:jvirt_barray_control	file:
rows_in_array	./src/suspend.c	/^  JDIMENSION rows_in_array;	\/* total virtual array height *\/$/;"	m	struct:jvirt_sarray_control	file:
rows_in_mem	./src/suspend.c	/^  JDIMENSION rows_in_mem;	\/* height of memory buffer *\/$/;"	m	struct:jvirt_barray_control	file:
rows_in_mem	./src/suspend.c	/^  JDIMENSION rows_in_mem;	\/* height of memory buffer *\/$/;"	m	struct:jvirt_sarray_control	file:
rowsperchunk	./src/suspend.c	/^  JDIMENSION rowsperchunk;	\/* allocation chunk size in mem_buffer *\/$/;"	m	struct:jvirt_barray_control	file:
rowsperchunk	./src/suspend.c	/^  JDIMENSION rowsperchunk;	\/* allocation chunk size in mem_buffer *\/$/;"	m	struct:jvirt_sarray_control	file:
rpmlead	./src/file_rpm.c	/^struct rpmlead {$/;"	s	file:
rspeed	./src/sun.h	/^  uint16_t rspeed;     \/* Disk rotational speed *\/$/;"	m	struct:__anon8
rsrc_clump_sz	./src/hfsp.h	/^        uint32_t         rsrc_clump_sz;$/;"	m	struct:hfsp_vh
rsrc_entries_s	./src/file_exe.c	/^struct rsrc_entries_s$/;"	s	file:
rsv1	./src/file_bkf.c	/^  uint8_t	rsv1[6];	\/* reserved for future use *\/$/;"	m	struct:mtf_db_hdr	file:
rsv2	./src/file_bkf.c	/^  uint8_t	rsv2[4];	\/* reserved for future use *\/$/;"	m	struct:mtf_db_hdr	file:
rsv3	./src/file_bkf.c	/^  uint8_t	rsv3;		\/* reserved for future use *\/$/;"	m	struct:mtf_db_hdr	file:
run_sudo	./src/sudo.c	/^void run_sudo(int argc, char **argv)$/;"	f
runlist	./src/ntfs_udl.c	/^	runlist_element *runlist;	\/* Decoded data runs *\/$/;"	m	struct:data	file:
rx2_header	./src/file_rx2.c	/^static const unsigned char rx2_header[4]=  { 'C' , 'A' , 'T' , ' ' };$/;"	v	file:
rx2_header	./src/file_rx2.c	/^struct rx2_header$/;"	s	file:
s1	./src/ole.h	/^	int32_t		s1;$/;"	m	struct:DIRECTORY
s2	./src/ole.h	/^	int32_t		s2;$/;"	m	struct:DIRECTORY
sReserved	./src/file_emf.c	/^  uint16_t sReserved;$/;"	m	struct:EMF_HDR	file:
s_agsize	./src/jfs_superblock.h	/^	uint32_t s_agsize;		\/* 4: allocation group size in aggr. blocks *\/$/;"	m	struct:jfs_superblock
s_aim2	./src/jfs_superblock.h	/^	pxd_t s_aim2;		\/* 8: first extent of secondary$/;"	m	struct:jfs_superblock
s_ait2	./src/jfs_superblock.h	/^	pxd_t s_ait2;		\/* 8: first extent of secondary$/;"	m	struct:jfs_superblock
s_algorithm_usage_bitmap	./src/ext2.h	/^	uint32_t	s_algorithm_usage_bitmap; \/* For compression *\/$/;"	m	struct:ext2_super_block
s_block_count	./src/rfs.h	/^	uint32_t s_block_count;		\/* 0x00 blocks count         *\/$/;"	m	struct:reiserfs_super_block
s_block_group_nr	./src/ext2.h	/^	uint16_t	s_block_group_nr; 	\/* block group # of this superblock *\/$/;"	m	struct:ext2_super_block
s_blocks_count	./src/ext2.h	/^	uint32_t	s_blocks_count;		\/* Blocks count *\/$/;"	m	struct:ext2_super_block
s_blocks_count_hi	./src/ext2.h	/^	uint32_t	s_blocks_count_hi;	\/* Blocks count high 32bits *\/$/;"	m	struct:ext2_super_block
s_blocks_per_group	./src/ext2.h	/^	uint32_t	s_blocks_per_group;	\/* # Blocks per group *\/$/;"	m	struct:ext2_super_block
s_blocksize	./src/rfs.h	/^	uint16_t s_blocksize;		\/* 0x2C block size           *\/$/;"	m	struct:reiserfs_super_block
s_bmap_nr	./src/rfs.h	/^	uint16_t s_bmap_nr;		\/* 0x46 amount of bitmap blocks needed to address each block of file system *\/$/;"	m	struct:reiserfs_super_block
s_bsize	./src/jfs_superblock.h	/^	int32_t s_bsize;		\/* 4: aggregate block size in bytes; $/;"	m	struct:jfs_superblock
s_checkinterval	./src/ext2.h	/^	uint32_t	s_checkinterval;	\/* max. time between checks *\/$/;"	m	struct:ext2_super_block
s_checksum	./src/ext2.h	/^	uint32_t	s_checksum;		\/* crc32c(superblock) *\/$/;"	m	struct:ext2_super_block
s_clean	./src/sysv.h	/^	char		s_clean;	\/* set to 0x46 when filesystem is properly unmounted *\/$/;"	m	struct:xenix_super_block
s_compress	./src/jfs_superblock.h	/^	int32_t s_compress;		\/* 4: > 0 if data compression *\/$/;"	m	struct:jfs_superblock
s_creator_os	./src/ext2.h	/^	uint32_t	s_creator_os;		\/* OS *\/$/;"	m	struct:ext2_super_block
s_cyl	./src/parti386.c	83;"	d	file:
s_def_hash_version	./src/ext2.h	/^	uint8_t		s_def_hash_version;	\/* Default hash version to use *\/$/;"	m	struct:ext2_super_block
s_def_resgid	./src/ext2.h	/^	uint16_t	s_def_resgid;		\/* Default gid for reserved blocks *\/$/;"	m	struct:ext2_super_block
s_def_resuid	./src/ext2.h	/^	uint16_t	s_def_resuid;		\/* Default uid for reserved blocks *\/$/;"	m	struct:ext2_super_block
s_default_mount_opts	./src/ext2.h	/^	uint32_t	s_default_mount_opts;$/;"	m	struct:ext2_super_block
s_desc_size	./src/ext2.h	/^	uint16_t	s_desc_size;		\/* Group desc. size: INCOMPAT_64BIT *\/$/;"	m	struct:ext2_super_block
s_dinfo	./src/sysv.h	/^	int16_t		s_dinfo[4];	\/* device information ?? *\/$/;"	m	struct:xenix_super_block
s_dinfo	./src/sysv.h	/^	int16_t	s_dinfo[4];			\/* 0x1a8 device information ?? *\/$/;"	m	struct:sysv4_super_block
s_dinfo	./src/sysv.h	/^	int16_t	s_dinfo[4];		\/* device information ?? *\/$/;"	m	struct:sysv2_super_block
s_error_count	./src/ext2.h	/^	uint32_t	s_error_count;		\/* number of fs errors *\/$/;"	m	struct:ext2_super_block
s_errors	./src/ext2.h	/^	uint16_t	s_errors;		\/* Behaviour when detecting errors *\/$/;"	m	struct:ext2_super_block
s_feature_compat	./src/ext2.h	/^	uint32_t	s_feature_compat; 	\/* compatible feature set *\/$/;"	m	struct:ext2_super_block
s_feature_incompat	./src/ext2.h	/^	uint32_t	s_feature_incompat; 	\/* incompatible feature set *\/$/;"	m	struct:ext2_super_block
s_feature_ro_compat	./src/ext2.h	/^	uint32_t	s_feature_ro_compat; 	\/* readonly-compatible feature set *\/$/;"	m	struct:ext2_super_block
s_fill	./src/sysv.h	/^	char		s_fill[371];$/;"	m	struct:xenix_super_block
s_fill	./src/sysv.h	/^	int32_t	s_fill[12];			\/* 0x1c4 *\/$/;"	m	struct:sysv4_super_block
s_fill	./src/sysv.h	/^	int32_t	s_fill[14];$/;"	m	struct:sysv2_super_block
s_first_data_block	./src/ext2.h	/^	uint32_t	s_first_data_block;	\/* First Data Block *\/$/;"	m	struct:ext2_super_block
s_first_error_block	./src/ext2.h	/^	uint64_t	s_first_error_block;	\/* block involved of first error *\/$/;"	m	struct:ext2_super_block
s_first_error_func	./src/ext2.h	/^	uint8_t		s_first_error_func[32];	\/* function where the error happened *\/$/;"	m	struct:ext2_super_block
s_first_error_ino	./src/ext2.h	/^	uint32_t	s_first_error_ino;	\/* inode involved in first error *\/$/;"	m	struct:ext2_super_block
s_first_error_line	./src/ext2.h	/^	uint32_t	s_first_error_line;	\/* line number where error happened *\/$/;"	m	struct:ext2_super_block
s_first_error_time	./src/ext2.h	/^	uint32_t	s_first_error_time;	\/* first time an error happened *\/$/;"	m	struct:ext2_super_block
s_first_ino	./src/ext2.h	/^	uint32_t	s_first_ino; 		\/* First non-reserved inode *\/$/;"	m	struct:ext2_super_block
s_first_meta_bg	./src/ext2.h	/^	uint32_t	s_first_meta_bg;	\/* First metablock group *\/$/;"	m	struct:ext2_super_block
s_flag	./src/jfs_superblock.h	/^	uint32_t s_flag;		\/* 4: aggregate attributes:$/;"	m	struct:jfs_superblock
s_flags	./src/ext2.h	/^	uint32_t	s_flags;		\/* Miscellaneous flags *\/$/;"	m	struct:ext2_super_block
s_flags	./src/rfs.h	/^\/* 80 *\/     uint32_t s_flags;                \/* Right now used only by inode-attributes, if enabled *\/$/;"	m	struct:reiserfs_super_block
s_flock	./src/sysv.h	/^	char		s_flock;	\/* lock during free block list manipulation *\/$/;"	m	struct:coh_super_block
s_flock	./src/sysv.h	/^	char		s_flock;	\/* lock during free block list manipulation *\/$/;"	m	struct:xenix_super_block
s_flock	./src/sysv.h	/^	char	s_flock;			\/* 0x1a0 lock during free block list manipulation *\/$/;"	m	struct:sysv4_super_block
s_flock	./src/sysv.h	/^	char	s_flock;		\/* lock during free block list manipulation *\/$/;"	m	struct:sysv2_super_block
s_flock	./src/sysv.h	/^	char    s_flock;        \/* lock during free block list manipulation *\/$/;"	m	struct:v7_super_block
s_fmod	./src/sysv.h	/^	char		s_fmod;		\/* super-block modified flag *\/$/;"	m	struct:coh_super_block
s_fmod	./src/sysv.h	/^	char		s_fmod;		\/* super-block modified flag *\/$/;"	m	struct:xenix_super_block
s_fmod	./src/sysv.h	/^	char	s_fmod;				\/* 0x1a2 super-block modified flag *\/$/;"	m	struct:sysv4_super_block
s_fmod	./src/sysv.h	/^	char	s_fmod;			\/* super-block modified flag *\/$/;"	m	struct:sysv2_super_block
s_fmod	./src/sysv.h	/^	char    s_fmod;         \/* super-block modified flag *\/$/;"	m	struct:v7_super_block
s_fname	./src/sysv.h	/^	char		s_fname[6];	\/* file system volume name *\/$/;"	m	struct:coh_super_block
s_fname	./src/sysv.h	/^	char		s_fname[6];	\/* file system volume name *\/$/;"	m	struct:xenix_super_block
s_fname	./src/sysv.h	/^	char	s_fname[6];			\/* 0x1b6 file system volume name *\/$/;"	m	struct:sysv4_super_block
s_fname	./src/sysv.h	/^	char	s_fname[6];		\/* file system volume name *\/$/;"	m	struct:sysv2_super_block
s_fname	./src/sysv.h	/^	char    s_fname[6];     \/* file system name *\/$/;"	m	struct:v7_super_block
s_fpack	./src/jfs_superblock.h	/^	char s_fpack[11];	\/* 11: file system volume name $/;"	m	struct:jfs_superblock
s_fpack	./src/sysv.h	/^	char		s_fpack[6];	\/* file system pack name *\/$/;"	m	struct:coh_super_block
s_fpack	./src/sysv.h	/^	char		s_fpack[6];	\/* file system pack name *\/$/;"	m	struct:xenix_super_block
s_fpack	./src/sysv.h	/^	char	s_fpack[6];			\/* 0x1bc file system pack name *\/$/;"	m	struct:sysv4_super_block
s_fpack	./src/sysv.h	/^	char	s_fpack[6];		\/* file system pack name *\/$/;"	m	struct:sysv2_super_block
s_fpack	./src/sysv.h	/^	char    s_fpack[6];     \/* file system pack name *\/$/;"	m	struct:v7_super_block
s_frags_per_group	./src/ext2.h	/^	uint32_t	s_frags_per_group;	\/* # Fragments per group *\/$/;"	m	struct:ext2_super_block
s_free	./src/sysv.h	/^	uint32_t		s_free[XENIX_NICFREE]; \/* first free block list chunk *\/$/;"	m	struct:xenix_super_block
s_free	./src/sysv.h	/^	uint32_t	s_free[SYSV_NICFREE];	\/* first free block list chunk *\/$/;"	m	struct:sysv2_super_block
s_free	./src/sysv.h	/^	uint32_t	s_free[SYSV_NICFREE]; 	\/* 0x0c first free block list chunk *\/$/;"	m	struct:sysv4_super_block
s_free	./src/sysv.h	/^	uint32_t    s_free[V7_NICFREE]; \/* first free block list chunk *\/$/;"	m	struct:v7_super_block
s_free_blocks	./src/rfs.h	/^	uint32_t s_free_blocks;		\/* 0x04 free blocks count    *\/$/;"	m	struct:reiserfs_super_block
s_free_blocks_count	./src/ext2.h	/^	uint32_t	s_free_blocks_count;	\/* Free blocks count *\/$/;"	m	struct:ext2_super_block
s_free_blocks_hi	./src/ext2.h	/^	uint32_t	s_free_blocks_hi; 	\/* Free blocks count *\/$/;"	m	struct:ext2_super_block
s_free_inodes_count	./src/ext2.h	/^	uint32_t	s_free_inodes_count;	\/* Free inodes count *\/$/;"	m	struct:ext2_super_block
s_fscklog	./src/jfs_superblock.h	/^	int8_t s_fscklog;		\/* 1: which fsck service log is most recent$/;"	m	struct:jfs_superblock
s_fsckloglen	./src/jfs_superblock.h	/^	int32_t s_fsckloglen;	\/* 4: Number of filesystem blocks reserved for$/;"	m	struct:jfs_superblock
s_fsckpxd	./src/jfs_superblock.h	/^	pxd_t s_fsckpxd;	\/* 8: inline fsck work space extent *\/$/;"	m	struct:jfs_superblock
s_fsize	./src/sysv.h	/^	uint32_t	s_fsize;		\/* 0x04 total number of zones of this fs *\/$/;"	m	struct:sysv4_super_block
s_grp_quota_inum	./src/ext2.h	/^	uint32_t	s_grp_quota_inum;	\/* inode number of group quota file *\/$/;"	m	struct:ext2_super_block
s_hash_function_code	./src/rfs.h	/^	uint32_t s_hash_function_code;	\/* 0x40 indicate, what hash fuction is being use to sort names in a directory*\/$/;"	m	struct:reiserfs_super_block
s_hash_seed	./src/ext2.h	/^	uint32_t	s_hash_seed[4];		\/* HTREE hash seed *\/$/;"	m	struct:ext2_super_block
s_ilock	./src/sysv.h	/^	char		s_ilock;	\/* lock during inode cache manipulation *\/$/;"	m	struct:coh_super_block
s_ilock	./src/sysv.h	/^	char		s_ilock;	\/* lock during inode cache manipulation *\/$/;"	m	struct:xenix_super_block
s_ilock	./src/sysv.h	/^	char	s_ilock;			\/* 0x1a1 lock during inode cache manipulation *\/$/;"	m	struct:sysv4_super_block
s_ilock	./src/sysv.h	/^	char	s_ilock;		\/* lock during inode cache manipulation *\/$/;"	m	struct:sysv2_super_block
s_ilock	./src/sysv.h	/^	char    s_ilock;        \/* lock during inode cache manipulation *\/$/;"	m	struct:v7_super_block
s_info_mft	./src/ntfs_adv.c	/^struct s_info_mft$/;"	s	file:
s_inode	./src/sysv.h	/^	sysv_ino_t	s_inode[COH_NICINOD]; \/* some free inodes *\/$/;"	m	struct:coh_super_block
s_inode	./src/sysv.h	/^	sysv_ino_t	s_inode[XENIX_NICINOD]; \/* some free inodes *\/$/;"	m	struct:xenix_super_block
s_inode	./src/sysv.h	/^	sysv_ino_t      s_inode[V7_NICINOD]; \/* some free inodes *\/$/;"	m	struct:v7_super_block
s_inode	./src/sysv.h	/^	sysv_ino_t     s_inode[SYSV_NICINOD]; 	\/* 0xd8 some free inodes *\/$/;"	m	struct:sysv4_super_block
s_inode	./src/sysv.h	/^	sysv_ino_t     s_inode[SYSV_NICINOD]; \/* some free inodes *\/$/;"	m	struct:sysv2_super_block
s_inode_size	./src/ext2.h	/^	uint16_t   s_inode_size; 		\/* size of inode structure *\/$/;"	m	struct:ext2_super_block
s_inodes_count	./src/ext2.h	/^	uint32_t	s_inodes_count;		\/* Inodes count *\/$/;"	m	struct:ext2_super_block
s_inodes_per_group	./src/ext2.h	/^	uint32_t	s_inodes_per_group;	\/* # Inodes per group *\/$/;"	m	struct:ext2_super_block
s_interleave_m	./src/sysv.h	/^	uint16_t		s_interleave_m;	\/* interleave factor *\/$/;"	m	struct:coh_super_block
s_interleave_n	./src/sysv.h	/^	uint16_t		s_interleave_n;$/;"	m	struct:coh_super_block
s_isize	./src/sysv.h	/^	uint16_t		s_isize;	\/* index of first data zone *\/$/;"	m	struct:coh_super_block
s_isize	./src/sysv.h	/^	uint16_t		s_isize; \/* index of first data zone *\/$/;"	m	struct:xenix_super_block
s_isize	./src/sysv.h	/^	uint16_t	s_isize;		\/* 0x00 index of first data zone *\/$/;"	m	struct:sysv4_super_block
s_isize	./src/sysv.h	/^	uint16_t	s_isize; 		\/* 0x00 index of first data zone *\/$/;"	m	struct:sysv2_super_block
s_isize	./src/sysv.h	/^	uint16_t    s_isize;        \/* index of first data zone *\/$/;"	m	struct:v7_super_block
s_jnl_backup_type	./src/ext2.h	/^	uint8_t		s_jnl_backup_type; 	\/* Default type of journal backup *\/$/;"	m	struct:ext2_super_block
s_jnl_blocks	./src/ext2.h	/^	uint32_t	s_jnl_blocks[17]; 	\/* Backup of the journal inode *\/$/;"	m	struct:ext2_super_block
s_journal_block	./src/rfs.h	/^	uint32_t s_journal_block;	\/* 0x0C journal block number    *\/$/;"	m	struct:reiserfs_super_block
s_journal_block_count	./src/rfs.h	/^	uint32_t s_journal_block_count;	\/* 0x1C total size of the journal. can change over time  *\/$/;"	m	struct:reiserfs_super_block
s_journal_dev	./src/ext2.h	/^	uint32_t	s_journal_dev;		\/* device number of journal file *\/$/;"	m	struct:ext2_super_block
s_journal_dev	./src/rfs.h	/^	uint32_t s_journal_dev;		\/* 0x10 journal device number  *\/$/;"	m	struct:reiserfs_super_block
s_journal_inum	./src/ext2.h	/^	uint32_t	s_journal_inum;		\/* inode number of journal file *\/$/;"	m	struct:ext2_super_block
s_journal_max_batch	./src/rfs.h	/^	uint32_t s_journal_max_batch;	\/* 0x20 max number of blocks to batch into a trans *\/$/;"	m	struct:reiserfs_super_block
s_journal_max_commit_age	./src/rfs.h	/^	uint32_t s_journal_max_commit_age;	\/* 0x24 in seconds, how old can an async commit be *\/$/;"	m	struct:reiserfs_super_block
s_journal_max_trans_age	./src/rfs.h	/^	uint32_t s_journal_max_trans_age;	\/* 0x28 in seconds, how old can a transaction be *\/$/;"	m	struct:reiserfs_super_block
s_journal_trans_max	./src/rfs.h	/^	uint32_t s_journal_trans_max;	\/* 0x18 max number of blocks in a transaction.  *\/$/;"	m	struct:reiserfs_super_block
s_journal_uuid	./src/ext2.h	/^	uint8_t		s_journal_uuid[16];	\/* uuid of journal superblock *\/$/;"	m	struct:ext2_super_block
s_kbytes_written	./src/ext2.h	/^	uint64_t	s_kbytes_written;	\/* nr of lifetime kilobytes written *\/$/;"	m	struct:ext2_super_block
s_l2bfactor	./src/jfs_superblock.h	/^	int16_t s_l2bfactor;	\/* 2: log2(s_bsize\/hardware block size) *\/$/;"	m	struct:jfs_superblock
s_l2bsize	./src/jfs_superblock.h	/^	int16_t s_l2bsize;		\/* 2: log2 of s_bsize *\/$/;"	m	struct:jfs_superblock
s_l2pbsize	./src/jfs_superblock.h	/^	int16_t s_l2pbsize;		\/* 2: log2 of s_pbsize *\/$/;"	m	struct:jfs_superblock
s_label	./src/jfs_superblock.h	/^	char s_label[16];	\/* 16: volume label *\/$/;"	m	struct:jfs_superblock
s_label	./src/rfs.h	/^\/*100 *\/    unsigned char s_label[16];     \/* filesystem volume label *\/$/;"	m	struct:reiserfs_super_block
s_last_error_block	./src/ext2.h	/^	uint64_t	s_last_error_block;	\/* block involved of last error *\/$/;"	m	struct:ext2_super_block
s_last_error_func	./src/ext2.h	/^	uint8_t		s_last_error_func[32];	\/* function where the error happened *\/$/;"	m	struct:ext2_super_block
s_last_error_ino	./src/ext2.h	/^	uint32_t	s_last_error_ino;	\/* inode involved in last error *\/$/;"	m	struct:ext2_super_block
s_last_error_line	./src/ext2.h	/^	uint32_t	s_last_error_line;	\/* line number where error happened *\/$/;"	m	struct:ext2_super_block
s_last_error_time	./src/ext2.h	/^	uint32_t	s_last_error_time;	\/* most recent time of an error *\/$/;"	m	struct:ext2_super_block
s_last_mounted	./src/ext2.h	/^	char	s_last_mounted[64]; 	\/* directory where last mounted *\/$/;"	m	struct:ext2_super_block
s_last_orphan	./src/ext2.h	/^	uint32_t	s_last_orphan;		\/* start of list of inodes to delete *\/$/;"	m	struct:ext2_super_block
s_lastcheck	./src/ext2.h	/^	uint32_t	s_lastcheck;		\/* time of last check *\/$/;"	m	struct:ext2_super_block
s_log_block_size	./src/ext2.h	/^	uint32_t	s_log_block_size;	\/* Block size *\/$/;"	m	struct:ext2_super_block
s_log_frag_size	./src/ext2.h	/^	int32_t	s_log_frag_size;	\/* Fragment size *\/$/;"	m	struct:ext2_super_block
s_log_groups_per_flex	./src/ext2.h	/^	uint8_t		s_log_groups_per_flex;	\/* FLEX_BG group size *\/$/;"	m	struct:ext2_super_block
s_logdev	./src/jfs_superblock.h	/^	uint32_t s_logdev;		\/* 4: device address of log *\/$/;"	m	struct:jfs_superblock
s_logpxd	./src/jfs_superblock.h	/^	pxd_t s_logpxd;		\/* 8: inline log extent *\/$/;"	m	struct:jfs_superblock
s_logserial	./src/jfs_superblock.h	/^	int32_t s_logserial;	\/* 4: log serial number at aggregate mount *\/$/;"	m	struct:jfs_superblock
s_loguuid	./src/jfs_superblock.h	/^	char s_loguuid[16];	\/* 16: 128-bit uuid for log device *\/$/;"	m	struct:jfs_superblock
s_m	./src/sysv.h	/^	uint16_t     s_m;            \/* interleave factor *\/$/;"	m	struct:v7_super_block
s_magic	./src/ext2.h	/^	uint16_t	s_magic;		\/* Magic signature *\/$/;"	m	struct:ext2_super_block
s_magic	./src/jfs_superblock.h	/^	char s_magic[4];	\/* 4: magic number *\/$/;"	m	struct:jfs_superblock
s_magic	./src/rfs.h	/^	char s_magic[10];		\/* 0x34 reiserfs magic string indicates that file system is reiserfs *\/$/;"	m	struct:reiserfs_super_block
s_magic	./src/sysv.h	/^	int32_t		s_magic;	\/* version of file system *\/$/;"	m	struct:xenix_super_block
s_magic	./src/sysv.h	/^	int32_t	s_magic;			\/* 0x1f8 version of file system *\/$/;"	m	struct:sysv4_super_block
s_magic	./src/sysv.h	/^	int32_t	s_magic;		\/* version of file system *\/$/;"	m	struct:sysv2_super_block
s_max_mnt_count	./src/ext2.h	/^	int16_t	s_max_mnt_count;	\/* Maximal mount count *\/$/;"	m	struct:ext2_super_block
s_min_extra_isize	./src/ext2.h	/^	uint16_t	s_min_extra_isize;	\/* All inodes have at least # bytes *\/$/;"	m	struct:ext2_super_block
s_minor_rev_level	./src/ext2.h	/^	uint16_t	s_minor_rev_level; 	\/* minor revision level *\/$/;"	m	struct:ext2_super_block
s_mkfs_time	./src/ext2.h	/^	uint32_t	s_mkfs_time;		\/* When the filesystem was created *\/$/;"	m	struct:ext2_super_block
s_mmp_block	./src/ext2.h	/^	uint64_t   	s_mmp_block;            \/* Block for multi-mount protection *\/$/;"	m	struct:ext2_super_block
s_mmp_update_interval	./src/ext2.h	/^	uint16_t   	s_mmp_update_interval;  \/* # seconds to wait in MMP checking *\/$/;"	m	struct:ext2_super_block
s_mnt_count	./src/ext2.h	/^	uint16_t	s_mnt_count;		\/* Mount count *\/$/;"	m	struct:ext2_super_block
s_mount_opts	./src/ext2.h	/^	uint8_t		s_mount_opts[64];$/;"	m	struct:ext2_super_block
s_mtime	./src/ext2.h	/^	uint32_t	s_mtime;		\/* Mount time *\/$/;"	m	struct:ext2_super_block
s_n	./src/sysv.h	/^	uint16_t     s_n;            \/* interleave factor *\/$/;"	m	struct:v7_super_block
s_nfree	./src/sysv.h	/^	uint16_t		s_nfree;	\/* number of free blocks in s_free, <= XENIX_NICFREE *\/$/;"	m	struct:xenix_super_block
s_nfree	./src/sysv.h	/^	uint16_t	s_nfree;		\/* 0x08 number of free blocks in s_free, <= SYSV_NICFREE *\/$/;"	m	struct:sysv4_super_block
s_nfree	./src/sysv.h	/^	uint16_t	s_nfree;		\/* number of free blocks in s_free, <= SYSV_NICFREE *\/$/;"	m	struct:sysv2_super_block
s_nfree	./src/sysv.h	/^	uint16_t    s_nfree;        \/* number of free blocks in s_free, <= V7_NICFREE *\/$/;"	m	struct:v7_super_block
s_nfree	./src/sysv.h	/^	uint16_t s_nfree;	\/* number of free blocks in s_free, <= COH_NICFREE *\/$/;"	m	struct:coh_super_block
s_ninode	./src/sysv.h	/^	uint16_t		s_ninode;	\/* number of free inodes in s_inode, <= COH_NICINOD *\/$/;"	m	struct:coh_super_block
s_ninode	./src/sysv.h	/^	uint16_t		s_ninode; \/* number of free inodes in s_inode, <= XENIX_NICINOD *\/$/;"	m	struct:xenix_super_block
s_ninode	./src/sysv.h	/^	uint16_t	s_ninode;		\/* 0xd4 number of free inodes in s_inode, <= SYSV_NICINOD *\/$/;"	m	struct:sysv4_super_block
s_ninode	./src/sysv.h	/^	uint16_t	s_ninode;		\/* number of free inodes in s_inode, <= SYSV_NICINOD *\/$/;"	m	struct:sysv2_super_block
s_ninode	./src/sysv.h	/^	uint16_t    s_ninode;       \/* number of free inodes in s_inode, <= V7_NICINOD *\/$/;"	m	struct:v7_super_block
s_oid_cursize	./src/rfs.h	/^	uint16_t s_oid_cursize;		\/* 0x30 current size of object id array *\/$/;"	m	struct:reiserfs_super_block
s_oid_maxsize	./src/rfs.h	/^	uint16_t s_oid_maxsize;		\/* 0x2E max size of object id array, see get_objectid() commentary  *\/$/;"	m	struct:reiserfs_super_block
s_orig_journal_size	./src/rfs.h	/^	uint32_t s_orig_journal_size;	\/* 0x14 size of the journal on FS creation. *\/$/;"	m	struct:reiserfs_super_block
s_overhead_blocks	./src/ext2.h	/^	uint32_t	s_overhead_blocks;	\/* overhead blocks\/clusters in fs *\/$/;"	m	struct:ext2_super_block
s_pad0	./src/sysv.h	/^	uint16_t	s_pad0;			\/* 0x02 *\/$/;"	m	struct:sysv4_super_block
s_pad1	./src/sysv.h	/^	uint16_t	s_pad1;			\/* 0x0a *\/$/;"	m	struct:sysv4_super_block
s_pad2	./src/sysv.h	/^	uint16_t	s_pad2;			\/* 0xd6 *\/$/;"	m	struct:sysv4_super_block
s_pad3	./src/sysv.h	/^	uint16_t	s_pad3;			\/* 0x1c2 *\/$/;"	m	struct:sysv4_super_block
s_pbsize	./src/jfs_superblock.h	/^	int32_t s_pbsize;		\/* 4: hardware\/LVM block size in bytes *\/$/;"	m	struct:jfs_superblock
s_prealloc_blocks	./src/ext2.h	/^	uint8_t	s_prealloc_blocks;	\/* Nr of blocks to try to preallocate*\/$/;"	m	struct:ext2_super_block
s_prealloc_dir_blocks	./src/ext2.h	/^	uint8_t	s_prealloc_dir_blocks;	\/* Nr to preallocate for dirs *\/$/;"	m	struct:ext2_super_block
s_r_blocks_count	./src/ext2.h	/^	uint32_t	s_r_blocks_count;	\/* Reserved blocks count *\/$/;"	m	struct:ext2_super_block
s_r_blocks_count_hi	./src/ext2.h	/^	uint32_t	s_r_blocks_count_hi;	\/* Reserved blocks count high 32 bits*\/$/;"	m	struct:ext2_super_block
s_raid_stride	./src/ext2.h	/^	uint16_t   	s_raid_stride;		\/* RAID stride *\/$/;"	m	struct:ext2_super_block
s_raid_stripe_width	./src/ext2.h	/^	uint32_t   	s_raid_stripe_width;    \/* blocks on all data disks (N*stride)*\/$/;"	m	struct:ext2_super_block
s_reserved	./src/ext2.h	/^	uint32_t   	s_reserved[108];        \/* Padding to the end of the block *\/$/;"	m	struct:ext2_super_block
s_reserved_char_pad	./src/ext2.h	/^	uint8_t    	s_reserved_char_pad;$/;"	m	struct:ext2_super_block
s_reserved_gdt_blocks	./src/ext2.h	/^	uint16_t	s_reserved_gdt_blocks;	\/* Per group table for online growth *\/$/;"	m	struct:ext2_super_block
s_reserved_pad	./src/ext2.h	/^	uint16_t	s_reserved_pad;		\/* Padding to next 32bits *\/$/;"	m	struct:ext2_super_block
s_rev_level	./src/ext2.h	/^	uint32_t	s_rev_level;		\/* Revision level *\/$/;"	m	struct:ext2_super_block
s_ronly	./src/sysv.h	/^	char		s_ronly;	\/* flag whether fs is mounted read-only *\/$/;"	m	struct:coh_super_block
s_ronly	./src/sysv.h	/^	char		s_ronly;	\/* flag whether fs is mounted read-only *\/$/;"	m	struct:xenix_super_block
s_ronly	./src/sysv.h	/^	char	s_ronly;			\/* 0x1a3 flag whether fs is mounted read-only *\/$/;"	m	struct:sysv4_super_block
s_ronly	./src/sysv.h	/^	char	s_ronly;		\/* flag whether fs is mounted read-only *\/$/;"	m	struct:sysv2_super_block
s_ronly	./src/sysv.h	/^	char    s_ronly;        \/* flag whether fs is mounted read-only *\/$/;"	m	struct:v7_super_block
s_root_block	./src/rfs.h	/^	uint32_t s_root_block;		\/* 0x08 root block number    *\/$/;"	m	struct:reiserfs_super_block
s_sect	./src/parti386.c	84;"	d	file:
s_size	./src/file_mig.c	/^  uint32_t s_size;$/;"	m	struct:MIG_HDR	file:
s_size	./src/jfs_superblock.h	/^	int64_t s_size;		\/* 8: aggregate size in hardware\/LVM blocks;$/;"	m	struct:jfs_superblock
s_snapshot_id	./src/ext2.h	/^	uint32_t	s_snapshot_id;		\/* sequential ID of active snapshot *\/$/;"	m	struct:ext2_super_block
s_snapshot_inum	./src/ext2.h	/^	uint32_t	s_snapshot_inum;	\/* Inode number of active snapshot *\/$/;"	m	struct:ext2_super_block
s_snapshot_list	./src/ext2.h	/^	uint32_t	s_snapshot_list;	\/* inode number of the head of the on-disk snapshot list *\/$/;"	m	struct:ext2_super_block
s_snapshot_r_blocks_count	./src/ext2.h	/^	uint64_t	s_snapshot_r_blocks_count; \/* reserved blocks for active$/;"	m	struct:ext2_super_block
s_state	./src/ext2.h	/^	uint16_t	s_state;		\/* File system state *\/$/;"	m	struct:ext2_super_block
s_state	./src/jfs_superblock.h	/^	uint32_t s_state;		\/* 4: mount\/unmount\/recovery state: $/;"	m	struct:jfs_superblock
s_state	./src/rfs.h	/^	uint16_t s_state;		\/* 0x32 valid or error       *\/$/;"	m	struct:reiserfs_super_block
s_state	./src/sysv.h	/^	int32_t	s_state;			\/* 0x1f4 file system state: 0x7c269d38-s_time means clean *\/$/;"	m	struct:sysv4_super_block
s_state	./src/sysv.h	/^	int32_t	s_state;		\/* file system state: 0xcb096f43 means clean *\/$/;"	m	struct:sysv2_super_block
s_tfree	./src/sysv.h	/^	uint32_t	s_tfree;		\/* 0x1b0 total number of free zones *\/$/;"	m	struct:sysv4_super_block
s_time	./src/jfs_superblock.h	/^	struct timestruc_t s_time;	\/* 8: time last updated *\/$/;"	m	struct:jfs_superblock	typeref:struct:jfs_superblock::timestruc_t
s_time	./src/sysv.h	/^	uint32_t	s_time;			\/* 0x1a4 time of last super block update *\/$/;"	m	struct:sysv4_super_block
s_tinode	./src/sysv.h	/^	uint16_t		s_tinode;	\/* total number of free inodes *\/$/;"	m	struct:coh_super_block
s_tinode	./src/sysv.h	/^	uint16_t		s_tinode;	\/* total number of free inodes *\/$/;"	m	struct:xenix_super_block
s_tinode	./src/sysv.h	/^	uint16_t	s_tinode;		\/* 0x1b4 total number of free inodes *\/$/;"	m	struct:sysv4_super_block
s_tinode	./src/sysv.h	/^	uint16_t	s_tinode;		\/* total number of free inodes *\/$/;"	m	struct:sysv2_super_block
s_tinode	./src/sysv.h	/^	uint16_t     s_tinode;       \/* total number of free inodes *\/$/;"	m	struct:v7_super_block
s_tree_height	./src/rfs.h	/^	uint16_t s_tree_height;		\/* 0x44 height of disk tree *\/$/;"	m	struct:reiserfs_super_block
s_type	./src/sysv.h	/^	int32_t		s_type;		\/* type of file system: 1 for 512 byte blocks$/;"	m	struct:xenix_super_block
s_type	./src/sysv.h	/^	int32_t	s_type;			\/* type of file system: 1 for 512 byte blocks$/;"	m	struct:sysv2_super_block
s_type	./src/sysv.h	/^	int32_t	s_type;		\/* 0x1fc type of file system: 1 for 512 byte blocks$/;"	m	struct:sysv4_super_block
s_unique	./src/sysv.h	/^	uint32_t		s_unique;	\/* zero, not used *\/$/;"	m	struct:coh_super_block
s_unused	./src/rfs.h	/^\/*116 *\/    char s_unused[88] ;            \/* zero filled by mkreiserfs and reiserfs_convert_objectid_map_v1()$/;"	m	struct:reiserfs_super_block
s_usr_quota_inum	./src/ext2.h	/^	uint32_t	s_usr_quota_inum;	\/* inode number of user quota file *\/$/;"	m	struct:ext2_super_block
s_uuid	./src/ext2.h	/^	uint8_t	s_uuid[16];		\/* 128-bit uuid for volume *\/$/;"	m	struct:ext2_super_block
s_uuid	./src/jfs_superblock.h	/^	char s_uuid[16];	\/* 16: 128-bit uuid for volume *\/$/;"	m	struct:jfs_superblock
s_uuid	./src/rfs.h	/^\/* 84 *\/    unsigned char s_uuid[16];      \/* filesystem unique identifier *\/$/;"	m	struct:reiserfs_super_block
s_version	./src/jfs_superblock.h	/^	uint32_t s_version;		\/* 4: version number *\/$/;"	m	struct:jfs_superblock
s_volume_name	./src/ext2.h	/^	char	s_volume_name[16]; 	\/* volume name *\/$/;"	m	struct:ext2_super_block
s_want_extra_isize	./src/ext2.h	/^	uint16_t	s_want_extra_isize; 	\/* New inodes should reserve # bytes *\/$/;"	m	struct:ext2_super_block
s_wtime	./src/ext2.h	/^	uint32_t	s_wtime;		\/* Write time *\/$/;"	m	struct:ext2_super_block
s_xfsckpxd	./src/jfs_superblock.h	/^	pxd_t s_xfsckpxd;	\/* 8: extendfs fsckpxd *\/$/;"	m	struct:jfs_superblock
s_xlogpxd	./src/jfs_superblock.h	/^	pxd_t s_xlogpxd;	\/* 8: extendfs logpxd *\/$/;"	m	struct:jfs_superblock
s_xsize	./src/jfs_superblock.h	/^	int64_t s_xsize;		\/* 8: extendfs s_size *\/$/;"	m	struct:jfs_superblock
sample_rate	./src/file_au.c	/^  uint32_t sample_rate;$/;"	m	struct:header_au_s	file:
sample_rate_table	./src/file_mp3.c	/^static const unsigned int sample_rate_table[4][4]={$/;"	v	file:
sample_size	./src/file_ra.c	/^  uint16_t sample_size;$/;"	m	struct:ra4_header	file:
samplerate	./src/file_ra.c	/^  uint16_t samplerate;$/;"	m	struct:ra4_header	file:
samplesperrow	./src/suspend.c	/^  JDIMENSION samplesperrow;	\/* width of array (and of memory buffer) *\/$/;"	m	struct:jvirt_sarray_control	file:
save_header	./src/file_save.c	/^static const unsigned char save_header[8]=  {$/;"	v	file:
save_header	./src/savehdr.c	/^int save_header(disk_t *disk_car,partition_t *partition, const int verbose)$/;"	f
sbBlkCount	./src/partmac.h	/^    uint32_t 	sbBlkCount;	\/* number of blocks on device *\/$/;"	m	struct:Block0
sbBlkSize	./src/partmac.h	/^    uint16_t 	sbBlkSize;	\/* block size of device *\/$/;"	m	struct:Block0
sbData	./src/partmac.h	/^    uint32_t 	sbData;		\/* not used *\/$/;"	m	struct:Block0
sbDevId	./src/partmac.h	/^    uint16_t 	sbDevId;	\/* device id *\/$/;"	m	struct:Block0
sbDevType	./src/partmac.h	/^    uint16_t 	sbDevType;	\/* device type *\/$/;"	m	struct:Block0
sbDrvrCount	./src/partmac.h	/^    uint16_t 	sbDrvrCount;	\/* driver descriptor count *\/$/;"	m	struct:Block0
sbMap	./src/partmac.h	/^    uint16_t 	sbMap[247];	\/* descriptor map *\/$/;"	m	struct:Block0
sbSig	./src/partmac.h	/^    uint16_t 	sbSig;		\/* unique value for SCSI block 0 *\/$/;"	m	struct:Block0
sb_agblklog	./src/xfs.h	/^	uint8_t	sb_agblklog;	\/* log2 of sb_agblocks (rounded up) *\/$/;"	m	struct:xfs_sb
sb_agblocks	./src/xfs.h	/^	xfs_agblock_t	sb_agblocks;	\/* size of an allocation group *\/$/;"	m	struct:xfs_sb
sb_agcount	./src/xfs.h	/^	xfs_agnumber_t	sb_agcount;	\/* number of allocation groups *\/$/;"	m	struct:xfs_sb
sb_block_count	./src/rfs.h	/^  uint64_t sb_block_count;$/;"	m	struct:format40_super
sb_blocklog	./src/xfs.h	/^	uint8_t	sb_blocklog;	\/* log2 of sb_blocksize *\/$/;"	m	struct:xfs_sb
sb_blocksize	./src/xfs.h	/^	uint32_t	sb_blocksize;	\/* logical block size, bytes *\/$/;"	m	struct:xfs_sb
sb_bsize	./src/gfs2.h	/^	uint32_t sb_bsize;$/;"	m	struct:gfs2_sb
sb_bsize_shift	./src/gfs2.h	/^	uint32_t sb_bsize_shift;$/;"	m	struct:gfs2_sb
sb_csum	./src/md.h	/^	uint32_t	sb_csum;	\/* checksum upto devs[max_dev] *\/$/;"	m	struct:mdp_superblock_1
sb_csum	./src/md.h	/^	uint32_t sb_csum;		\/*  6 checksum of the whole superblock        *\/$/;"	m	struct:mdp_superblock_s
sb_dblocks	./src/xfs.h	/^	xfs_drfsbno_t	sb_dblocks;	\/* number of data blocks *\/$/;"	m	struct:xfs_sb
sb_dirblklog	./src/xfs.h	/^	uint8_t	sb_dirblklog;	\/* log2 of dir block size (fsbs) *\/$/;"	m	struct:xfs_sb
sb_fdblocks	./src/xfs.h	/^	uint64_t	sb_fdblocks;	\/* free data blocks *\/$/;"	m	struct:xfs_sb
sb_features2	./src/xfs.h	/^	uint32_t	sb_features2;	\/* additonal feature bits *\/$/;"	m	struct:xfs_sb
sb_flags	./src/rfs.h	/^  uint64_t sb_flags;$/;"	m	struct:format40_super
sb_flags	./src/xfs.h	/^	uint8_t	sb_flags;	\/* misc. flags *\/$/;"	m	struct:xfs_sb
sb_flushes	./src/rfs.h	/^  uint64_t sb_flushes;$/;"	m	struct:format40_super
sb_fname	./src/xfs.h	/^	char		sb_fname[12];	\/* file system name *\/$/;"	m	struct:xfs_sb
sb_free_blocks	./src/rfs.h	/^  uint64_t sb_free_blocks;$/;"	m	struct:format40_super
sb_frextents	./src/xfs.h	/^	uint64_t	sb_frextents;	\/* free realtime extents *\/$/;"	m	struct:xfs_sb
sb_fs_format	./src/gfs2.h	/^	uint32_t sb_fs_format;$/;"	m	struct:gfs2_sb
sb_fs_state	./src/rfs.h	/^	uint16_t sb_fs_state; 		\/* 0x3E it is set to used by fsck to mark which phase of$/;"	m	struct:reiserfs_super_block
sb_gquotino	./src/xfs.h	/^	xfs_ino_t	sb_gquotino;	\/* group quota inode *\/$/;"	m	struct:xfs_sb
sb_header	./src/gfs2.h	/^	struct gfs2_meta_header sb_header;$/;"	m	struct:gfs2_sb	typeref:struct:gfs2_sb::gfs2_meta_header
sb_icount	./src/xfs.h	/^	uint64_t	sb_icount;	\/* allocated inodes *\/$/;"	m	struct:xfs_sb
sb_ifree	./src/xfs.h	/^	uint64_t	sb_ifree;	\/* free inodes *\/$/;"	m	struct:xfs_sb
sb_imax_pct	./src/xfs.h	/^	uint8_t	sb_imax_pct;	\/* max % of fs for inode space *\/$/;"	m	struct:xfs_sb
sb_inoalignmt	./src/xfs.h	/^	xfs_extlen_t	sb_inoalignmt;	\/* inode chunk alignment, fsblocks *\/$/;"	m	struct:xfs_sb
sb_inode_generation	./src/rfs.h	/^\/* 76 *\/     uint32_t sb_inode_generation; $/;"	m	struct:reiserfs_super_block
sb_inodelog	./src/xfs.h	/^	uint8_t	sb_inodelog;	\/* log2 of sb_inodesize *\/$/;"	m	struct:xfs_sb
sb_inodesize	./src/xfs.h	/^	uint16_t	sb_inodesize;	\/* inode size, bytes *\/$/;"	m	struct:xfs_sb
sb_inopblock	./src/xfs.h	/^	uint16_t	sb_inopblock;	\/* inodes per block *\/$/;"	m	struct:xfs_sb
sb_inopblog	./src/xfs.h	/^	uint8_t	sb_inopblog;	\/* log2 of sb_inopblock *\/$/;"	m	struct:xfs_sb
sb_inprogress	./src/xfs.h	/^	uint8_t	sb_inprogress;	\/* mkfs is in progress, don't mount *\/$/;"	m	struct:xfs_sb
sb_lockproto	./src/gfs2.h	/^	char sb_lockproto[GFS2_LOCKNAME_LEN];$/;"	m	struct:gfs2_sb
sb_locktable	./src/gfs2.h	/^	char sb_locktable[GFS2_LOCKNAME_LEN];$/;"	m	struct:gfs2_sb
sb_logblocks	./src/xfs.h	/^	xfs_extlen_t	sb_logblocks;	\/* number of log blocks *\/$/;"	m	struct:xfs_sb
sb_logsectlog	./src/xfs.h	/^	uint8_t	sb_logsectlog;	\/* log2 of the log sector size *\/$/;"	m	struct:xfs_sb
sb_logsectsize	./src/xfs.h	/^	uint16_t	sb_logsectsize;	\/* sector size for the log, bytes *\/$/;"	m	struct:xfs_sb
sb_logstart	./src/xfs.h	/^	xfs_dfsbno_t	sb_logstart;	\/* starting block of log if internal *\/$/;"	m	struct:xfs_sb
sb_logsunit	./src/xfs.h	/^	uint32_t	sb_logsunit;	\/* stripe unit size for the log *\/$/;"	m	struct:xfs_sb
sb_magic	./src/rfs.h	/^  char sb_magic[MAGIC_SIZE];$/;"	m	struct:format40_super
sb_magicnum	./src/xfs.h	/^	uint32_t	sb_magicnum;	\/* magic number == XFS_SB_MAGIC *\/$/;"	m	struct:xfs_sb
sb_master_dir	./src/gfs2.h	/^	struct gfs2_inum sb_master_dir; \/* Was jindex dinode in gfs1 *\/$/;"	m	struct:gfs2_sb	typeref:struct:gfs2_sb::gfs2_inum
sb_mkfs_id	./src/rfs.h	/^  uint32_t sb_mkfs_id;$/;"	m	struct:format40_super
sb_multihost_format	./src/gfs2.h	/^	uint32_t sb_multihost_format;$/;"	m	struct:gfs2_sb
sb_offset	./src/common.h	/^  uint64_t      sb_offset;$/;"	m	struct:partition_struct
sb_oid	./src/rfs.h	/^  uint64_t sb_oid[2];$/;"	m	struct:format40_super
sb_policy	./src/rfs.h	/^  uint16_t sb_policy;$/;"	m	struct:format40_super
sb_qflags	./src/xfs.h	/^	uint16_t	sb_qflags;	\/* quota flags *\/$/;"	m	struct:xfs_sb
sb_rblocks	./src/xfs.h	/^	xfs_drfsbno_t	sb_rblocks;	\/* number of realtime blocks *\/$/;"	m	struct:xfs_sb
sb_rbmblocks	./src/xfs.h	/^	xfs_extlen_t	sb_rbmblocks;	\/* number of rt bitmap blocks *\/$/;"	m	struct:xfs_sb
sb_rbmino	./src/xfs.h	/^	xfs_ino_t	sb_rbmino;	\/* bitmap inode for realtime extents *\/$/;"	m	struct:xfs_sb
sb_reserved_for_journal	./src/rfs.h	/^	uint16_t sb_reserved_for_journal;  \/* 74 size in blocks of journal area on$/;"	m	struct:reiserfs_super_block
sb_rextents	./src/xfs.h	/^	xfs_drtbno_t	sb_rextents;	\/* number of realtime extents *\/$/;"	m	struct:xfs_sb
sb_rextsize	./src/xfs.h	/^	xfs_agblock_t	sb_rextsize;	\/* realtime extent size, blocks *\/$/;"	m	struct:xfs_sb
sb_rextslog	./src/xfs.h	/^	uint8_t	sb_rextslog;	\/* log2 of sb_rextents *\/$/;"	m	struct:xfs_sb
sb_root_block	./src/rfs.h	/^  uint64_t sb_root_block;$/;"	m	struct:format40_super
sb_root_dir	./src/gfs2.h	/^	struct gfs2_inum sb_root_dir;$/;"	m	struct:gfs2_sb	typeref:struct:gfs2_sb::gfs2_inum
sb_rootino	./src/xfs.h	/^	xfs_ino_t	sb_rootino;	\/* root inode number *\/$/;"	m	struct:xfs_sb
sb_rsumino	./src/xfs.h	/^	xfs_ino_t	sb_rsumino;	\/* summary inode for rt bitmap *\/$/;"	m	struct:xfs_sb
sb_sectlog	./src/xfs.h	/^	uint8_t	sb_sectlog;	\/* log2 of sb_sectsize *\/$/;"	m	struct:xfs_sb
sb_sectsize	./src/xfs.h	/^	uint16_t	sb_sectsize;	\/* volume sector size, bytes *\/$/;"	m	struct:xfs_sb
sb_shared_vn	./src/xfs.h	/^	uint8_t	sb_shared_vn;	\/* shared version number *\/$/;"	m	struct:xfs_sb
sb_size	./src/common.h	/^  unsigned int  sb_size;$/;"	m	struct:partition_struct
sb_tree_height	./src/rfs.h	/^  uint16_t sb_tree_height;$/;"	m	struct:format40_super
sb_unit	./src/xfs.h	/^	uint32_t	sb_unit;	\/* stripe or raid unit *\/$/;"	m	struct:xfs_sb
sb_unused	./src/rfs.h	/^  char sb_unused[432];$/;"	m	struct:format40_super
sb_uquotino	./src/xfs.h	/^	xfs_ino_t	sb_uquotino;	\/* user quota inode *\/$/;"	m	struct:xfs_sb
sb_uuid	./src/gfs2.h	/^	uint8_t sb_uuid[16]; \/* The UUID, maybe 0 for backwards compat *\/$/;"	m	struct:gfs2_sb
sb_uuid	./src/xfs.h	/^	uint8_t		sb_uuid[16];	\/* file system unique id *\/$/;"	m	struct:xfs_sb
sb_version	./src/rfs.h	/^	uint16_t sb_version; 		\/* 72 this field is only reliable on$/;"	m	struct:reiserfs_super_block
sb_versionnum	./src/xfs.h	/^	uint16_t	sb_versionnum;	\/* header version == XFS_SB_VERSION *\/$/;"	m	struct:xfs_sb
sb_width	./src/xfs.h	/^	uint32_t	sb_width;	\/* stripe or raid width *\/$/;"	m	struct:xfs_sb
sborg_offset	./src/common.h	/^  uint64_t      sborg_offset;$/;"	m	struct:partition_struct
scan_disk	./src/ntfs_udl.c	/^static void scan_disk(ntfs_volume *vol, file_info_t *dir_list)$/;"	f	file:
schema_cookie	./src/file_sql.c	/^ uint32_t schema_cookie;$/;"	m	struct:db_header	file:
schema_format	./src/file_sql.c	/^ uint32_t schema_format;$/;"	m	struct:db_header	file:
scramble	./src/file_spe.c	/^  int16_t           scramble;          \/*  658  0 = scrambled, 1 = unscrambled     *\/$/;"	m	struct:header_spe	file:
screen_buffer_add	./src/intrf.c	/^int screen_buffer_add(const char *_format, ...)$/;"	f
screen_buffer_display	./src/intrfn.c	/^int screen_buffer_display(WINDOW *window, const char *options_org, const struct MenuItem *menuItems)$/;"	f
screen_buffer_display_ext	./src/intrfn.c	/^int screen_buffer_display_ext(WINDOW *window, const char *options_org, const struct MenuItem *menuItems, unsigned int *menu)$/;"	f
screen_buffer_reset	./src/intrf.c	/^void screen_buffer_reset(void)$/;"	f
screen_buffer_to_interface	./src/intrfn.c	/^void screen_buffer_to_interface(void)$/;"	f
screen_buffer_to_log	./src/intrf.c	/^void screen_buffer_to_log(void)$/;"	f
screenp	./src/intrfn.c	/^static SCREEN *screenp=NULL;$/;"	v	file:
scsi_inquiry_data_t	./src/hdaccess.c	/^} __attribute__((packed)) scsi_inquiry_data_t;$/;"	t	typeref:struct:_scsi_inquiry_data	file:
scsi_query_product_info	./src/hdaccess.c	/^static int scsi_query_product_info (const int sg_fd, char **vendor, char **product, char **fw_rev)$/;"	f	file:
sdvs_header	./src/file_m2ts.c	/^static const unsigned char sdvs_header[4] = { 'S','D','V','S'};$/;"	v	file:
searchRange	./src/file_ttf.c	/^  uint16_t	searchRange;$/;"	m	struct:ttf_offset_table	file:
search_EXFAT_backup	./src/analyse.c	/^int search_EXFAT_backup(unsigned char *buffer, disk_t *disk, partition_t *partition)$/;"	f
search_FAT_backup	./src/analyse.c	/^int search_FAT_backup(unsigned char *buffer, disk_t *disk, partition_t *partition, const int verbose, const int dump_ind)$/;"	f
search_HFS_backup	./src/analyse.c	/^int search_HFS_backup(unsigned char *buffer, disk_t *disk, partition_t *partition, const int verbose, const int dump_ind)$/;"	f
search_MMT	./src/file_mp3.c	/^static unsigned int search_MMT(const unsigned char *buffer, const unsigned int i, const unsigned int buffer_size)$/;"	f	file:
search_NTFS_backup	./src/analyse.c	/^int search_NTFS_backup(unsigned char *buffer, disk_t *disk, partition_t *partition, const int verbose, const int dump_ind)$/;"	f
search_NTFS_from_backup	./src/godmode.c	/^static void search_NTFS_from_backup(disk_t *disk_car, list_part_t *list_part, const int verbose, const int dump_ind, const uint64_t min_location, const uint64_t search_location_max)$/;"	f	file:
search_add_hints	./src/godmode.c	/^static void search_add_hints(const disk_t *disk, uint64_t *try_offset, unsigned int *try_offset_nbr)$/;"	f	file:
search_location	./src/next.c	/^struct search_location$/;"	s	file:
search_location_info	./src/next.c	/^static search_location_t search_location_info[SEARCH_LOCATION_MAX];$/;"	v	file:
search_location_init	./src/next.c	/^void search_location_init(const disk_t *disk_car, const unsigned int location_boundary, const int fast_mode)$/;"	f
search_location_nbr	./src/next.c	/^static unsigned int search_location_nbr=0;$/;"	v	file:
search_location_t	./src/next.c	/^typedef struct search_location search_location_t;$/;"	t	typeref:struct:search_location	file:
search_location_update	./src/next.c	/^uint64_t search_location_update(const uint64_t location)$/;"	f
search_part	./src/godmode.c	/^static list_part_t *search_part(disk_t *disk_car, const list_part_t *list_part_org, const int verbose, const int dump_ind, const int fast_mode, char **current_cmd)$/;"	f	file:
search_superblock	./src/ext2_sbn.c	/^list_part_t *search_superblock(disk_t *disk_car, partition_t *partition, const int verbose, const int dump_ind, const int interface)$/;"	f
search_type_0	./src/analyse.c	/^int search_type_0(const unsigned char *buffer, disk_t *disk, partition_t *partition, const int verbose, const int dump_ind)$/;"	f
search_type_1	./src/analyse.c	/^int search_type_1(const unsigned char *buffer, disk_t *disk, partition_t *partition, const int verbose, const int dump_ind)$/;"	f
search_type_128	./src/analyse.c	/^int search_type_128(unsigned char *buffer, disk_t *disk, partition_t *partition, const int verbose, const int dump_ind)$/;"	f
search_type_16	./src/analyse.c	/^int search_type_16(unsigned char *buffer, disk_t *disk,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
search_type_2	./src/analyse.c	/^int search_type_2(const unsigned char *buffer, disk_t *disk, partition_t *partition, const int verbose, const int dump_ind)$/;"	f
search_type_2048	./src/analyse.c	/^int search_type_2048(unsigned char *buffer, disk_t *disk, partition_t *partition, const int verbose, const int dump_ind)$/;"	f
search_type_64	./src/analyse.c	/^int search_type_64(unsigned char *buffer, disk_t *disk,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
search_type_8	./src/analyse.c	/^int search_type_8(unsigned char *buffer, disk_t *disk,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
sec_count	./src/exfat.h	/^  uint8_t  sec_count;$/;"	m	struct:exfat_file_entry
sec_flags	./src/exfat.h	/^  uint8_t  sec_flags;$/;"	m	struct:exfat_stream_ext_entry
secondary_sequence_number	./src/file_reg.c	/^  uint32_t secondary_sequence_number;$/;"	m	struct:regf_file_header	file:
seconds	./src/file_spe.c	/^  int16_t           seconds;           \/*   38  Experiment Time: Seconds(as binary)*\/$/;"	m	struct:header_spe	file:
secs1	./src/ole.h	/^	int32_t		secs1;		\/\/ 100$/;"	m	struct:OLE_DIR
secs2	./src/ole.h	/^	int32_t		secs2;		\/\/ 108$/;"	m	struct:OLE_DIR
secs_track	./src/fat.h	/^	uint16_t	secs_track;	\/* 0x18 sectors per track *\/$/;"	m	struct:fat_boot_sector
secs_track	./src/ntfs.h	/^	uint16_t	secs_track;	\/* 0x18 sectors per track *\/$/;"	m	struct:ntfs_boot_sector
section	./src/file_reg.c	/^  uint16_t section;$/;"	m	struct:rgdb_block	file:
sector	./src/common.h	/^  unsigned int sector;$/;"	m	struct:CHS_struct
sector	./src/fat_cluster.h	/^  unsigned int sector;$/;"	m	struct:sector_cluster_struct
sector	./src/ntfs_adv.c	/^  uint64_t sector;$/;"	m	struct:s_info_mft	file:
sector	./src/parti386.c	/^    unsigned char sector;           \/* starting sector *\/$/;"	m	struct:partition_dos	file:
sector_cluster_struct	./src/fat_cluster.h	/^struct sector_cluster_struct$/;"	s
sector_cluster_t	./src/fat_cluster.h	/^typedef struct sector_cluster_struct sector_cluster_t;$/;"	t	typeref:struct:sector_cluster_struct
sector_size	./src/btrfs.h	/^	uint32_t sector_size;$/;"	m	struct:btrfs_dev_item
sector_size	./src/common.h	/^  unsigned int sector_size;$/;"	m	struct:param_disk_struct
sector_size	./src/fat.h	/^	uint8_t	sector_size[2];	\/* 0x0B bytes per logical sector *\/$/;"	m	struct:fat_boot_sector
sector_size	./src/file_vdi.c	/^    uint32_t sector_size;$/;"	m	struct:__anon57	file:
sector_size	./src/ntfs.h	/^	uint8_t	sector_size[2];	\/* 0x0B bytes per logical sector *\/$/;"	m	struct:ntfs_boot_sector
sector_size	./src/sun.h	/^  uint16_t sector_size;$/;"	m	struct:struct_sun_partition_i386
sector_xl	./src/lvm.h	/^  uint64_t sector_xl;     \/* 0x08 Sector number of this label *\/$/;"	m	struct:lvm2_label_header
sectors	./src/fat.h	/^	uint8_t	sectors[2];	\/* 0x13 number of sectors *\/$/;"	m	struct:fat_boot_sector
sectors	./src/file_vdi.c	/^    uint32_t sectors;           \/* disk geometry, unused here *\/$/;"	m	struct:__anon57	file:
sectors	./src/ntfs.h	/^	uint8_t	sectors[2];	\/* 0x13 number of sectors = 0 *\/$/;"	m	struct:ntfs_boot_sector
sectors_nbr	./src/ntfs.h	/^	uint64_t	sectors_nbr;	\/* 0x28 total sectors nbr *\/$/;"	m	struct:ntfs_boot_sector
sectors_per_cluster	./src/fat.h	/^	uint8_t	sectors_per_cluster;	\/* 0x0D sectors\/cluster *\/$/;"	m	struct:fat_boot_sector
sectors_per_cluster	./src/fat_cluster.h	/^  unsigned int  sectors_per_cluster;$/;"	m	struct:cluster_offset_struct
sectors_per_cluster	./src/ntfs.h	/^	uint8_t	sectors_per_cluster;	\/* 0x0D sectors\/cluster *\/$/;"	m	struct:ntfs_boot_sector
sectors_per_head	./src/common.h	/^  unsigned int sectors_per_head;$/;"	m	struct:__anon40
sectors_per_track	./src/file_vmdk.c	/^  uint32_t sectors_per_track;$/;"	m	struct:__anon38	file:
sectorsize	./src/btrfs.h	/^	uint32_t sectorsize;$/;"	m	struct:btrfs_super_block
security_env_pos	./src/file_arj.c	/^  uint32_t	security_env_pos;$/;"	m	struct:arj_main_header	file:
security_env_size	./src/file_arj.c	/^  uint16_t	security_env_size;$/;"	m	struct:arj_main_header	file:
security_ver	./src/file_arj.c	/^  uint8_t	security_ver;$/;"	m	struct:arj_main_header	file:
secwest	./src/common.c	/^static int32_t secwest=0;$/;"	v	file:
seek_speed	./src/btrfs.h	/^	uint8_t seek_speed;$/;"	m	struct:btrfs_dev_item
segment	./src/pe.h	/^  uint16_t segment;$/;"	m	struct:exe_reloc
select_fat_info	./src/fat_adv.c	/^static upart_type_t select_fat_info(const info_offset_t *info_offset, const unsigned int nbr_offset,unsigned int*reserved, unsigned int*fat_length, const unsigned long int max_sector_offset, unsigned int *fats)$/;"	f	file:
selected_disk	./src/qphotorec.h	/^		disk_t      		*selected_disk;$/;"	m	class:QPhotorec
selected_partition	./src/qphotorec.h	/^		partition_t 		*selected_partition;$/;"	m	class:QPhotorec
self_destruct	./src/suspend.c	/^METHODDEF(void) self_destruct (j_common_ptr cinfo) {$/;"	f
sequence_number	./src/ntfs.h	/^  uint16_t	sequence_number;$/;"	m	struct:ntfs_mft_record
serial_no	./src/common.h	/^  char *serial_no;$/;"	m	struct:param_disk_struct
serial_number	./src/exfat.h	/^	uint32_t  	serial_number;          \/* volume serial number *\/$/;"	m	struct:exfat_super_block
session_load	./src/sessionp.c	/^int session_load(char **cmd_device, char **current_cmd, alloc_data_t *list_free_space)$/;"	f
session_save	./src/sessionp.c	/^int session_save(alloc_data_t *list_free_space, struct ph_param *params,  const struct ph_options *options)$/;"	f
set_BeFS_info	./src/bfs.c	/^static int set_BeFS_info(const struct disk_super_block *beos_block, partition_t *partition)$/;"	f	file:
set_EXFAT_info	./src/exfat.c	/^static int set_EXFAT_info(partition_t *partition, const struct exfat_super_block*exfat_header)$/;"	f	file:
set_EXT2_info	./src/ext2.c	/^static int set_EXT2_info(const struct ext2_super_block *sb, partition_t *partition, const int verbose)$/;"	f	file:
set_FATX_info	./src/fatx.c	/^static void set_FATX_info(partition_t *partition)$/;"	f	file:
set_FAT_info	./src/fat.c	/^static int set_FAT_info(disk_t *disk_car, const struct fat_boot_sector *fat_header, partition_t *partition)$/;"	f	file:
set_HFSP_info	./src/hfsp.c	/^static int set_HFSP_info(partition_t *partition, const struct hfsp_vh *vh)$/;"	f	file:
set_HFS_info	./src/hfs.c	/^static int set_HFS_info(partition_t *partition, const hfs_mdb_t *hfs_mdb)$/;"	f	file:
set_ISO_info	./src/iso.c	/^static int set_ISO_info(const struct iso_primary_descriptor *iso, partition_t *partition)$/;"	f	file:
set_JFS_info	./src/jfs.c	/^static int set_JFS_info(const struct jfs_superblock *sb, partition_t *partition)$/;"	f	file:
set_LUKS_info	./src/luks.c	/^static int set_LUKS_info(const struct luks_phdr *sb, partition_t *partition)$/;"	f	file:
set_LVM2_info	./src/lvm.c	/^static int set_LVM2_info(partition_t*partition)$/;"	f	file:
set_LVM_info	./src/lvm.c	/^static int set_LVM_info(partition_t *partition)$/;"	f	file:
set_Linux_SWAP_info	./src/swap.c	/^static int set_Linux_SWAP_info(const union swap_header *swap_header,partition_t *partition)$/;"	f	file:
set_MD_info	./src/md.c	/^static int set_MD_info(const struct mdp_superblock_s *sb, partition_t *partition, const int verbose)$/;"	f	file:
set_MD_info_be	./src/md.c	/^static int set_MD_info_be(const struct mdp_superblock_s *sb, partition_t *partition, const int verbose)$/;"	f	file:
set_NTFS_info	./src/ntfs.c	/^static void set_NTFS_info(disk_t *disk_car, const struct ntfs_boot_sector*ntfs_header, partition_t *partition)$/;"	f	file:
set_VMFS_info	./src/vmfs.c	/^static int set_VMFS_info(const struct vmfs_volume *sb, partition_t *partition)$/;"	f	file:
set_WBFS_info	./src/wbfs.c	/^static int set_WBFS_info(partition_t *partition)$/;"	f	file:
set_ZFS_info	./src/zfs.c	/^static int set_ZFS_info(const struct vdev_boot_header *sb, partition_t *partition)$/;"	f	file:
set_btrfs_info	./src/btrfs.c	/^static int set_btrfs_info(const struct btrfs_super_block *sb, partition_t *partition)$/;"	f	file:
set_cramfs_info	./src/cramfs.c	/^static int set_cramfs_info(const struct cramfs_super *sb, partition_t *partition)$/;"	f	file:
set_cylinders_from_size_up	./src/geometry.c	/^void set_cylinders_from_size_up(disk_t *disk_car)$/;"	f
set_date	./src/setdate.c	/^int set_date(const char *pathname, time_t actime, time_t modtime)$/;"	f
set_filename	./src/photorec.c	/^void set_filename(file_recovery_t *file_recovery, struct ph_param *params)$/;"	f
set_gfs2_info	./src/gfs2.c	/^static int set_gfs2_info(const struct gfs2_sb *sb, partition_t *partition)$/;"	f	file:
set_mode	./src/dir.c	/^int set_mode(const char *pathname, unsigned int mode)$/;"	f
set_name	./src/md.h	/^	char	set_name[32];	\/* set and interpreted by user-space *\/$/;"	m	struct:mdp_superblock_1
set_next_cluster	./src/fat.c	/^int set_next_cluster(disk_t *disk_car,const partition_t *partition, const upart_type_t upart_type,const int offset, const unsigned int cluster, const unsigned int next_cluster)$/;"	f
set_next_status	./src/common.h	/^  void (*set_next_status)(const disk_t *disk, partition_t *partition);$/;"	m	struct:arch_fnct_struct
set_next_status_gpt	./src/partgpt.c	/^static void set_next_status_gpt(const disk_t *disk_car, partition_t *partition)$/;"	f	file:
set_next_status_humax	./src/parthumax.c	/^static void set_next_status_humax(const disk_t *disk_car, partition_t *partition)$/;"	f	file:
set_next_status_i386	./src/parti386.c	/^static void set_next_status_i386(const disk_t *disk_car, partition_t *partition)$/;"	f	file:
set_next_status_mac	./src/partmac.c	/^static void set_next_status_mac(const disk_t *disk_car, partition_t *partition)$/;"	f	file:
set_next_status_none	./src/partnone.c	/^static void set_next_status_none(const disk_t *disk_car, partition_t *partition)$/;"	f	file:
set_next_status_sun	./src/partsun.c	/^static void set_next_status_sun(const disk_t *disk_car, partition_t *partition)$/;"	f	file:
set_next_status_xbox	./src/partxbox.c	/^static void set_next_status_xbox(const disk_t *disk_car, partition_t *partition)$/;"	f	file:
set_nr_sects	./src/parti386.c	/^static void set_nr_sects(struct partition_dos *p, unsigned int nr_sects)$/;"	f	file:
set_parent_directory	./src/askloc.c	/^static void set_parent_directory(char *dst_directory)$/;"	f	file:
set_part_name	./src/common.c	/^void set_part_name(partition_t *partition, const char *src, const unsigned int max_size)$/;"	f
set_part_name_chomp	./src/common.c	/^void set_part_name_chomp(partition_t *partition, const unsigned char *src, const unsigned int max_size)$/;"	f
set_part_type	./src/common.h	/^  int (*set_part_type)(partition_t *partition, unsigned int part_type);$/;"	m	struct:arch_fnct_struct
set_part_type_i386	./src/parti386.c	/^static int set_part_type_i386(partition_t *partition, unsigned int part_type)$/;"	f	file:
set_part_type_mac	./src/partmac.c	/^static int set_part_type_mac(partition_t *partition, unsigned int part_type_mac)$/;"	f	file:
set_part_type_none	./src/partnone.c	/^static int set_part_type_none(partition_t *partition, unsigned int part_type)$/;"	f	file:
set_part_type_sun	./src/partsun.c	/^static int set_part_type_sun(partition_t *partition, unsigned int part_type_sun)$/;"	f	file:
set_part_type_xbox	./src/partxbox.c	/^static int set_part_type_xbox(partition_t *partition, unsigned int part_type_xbox)$/;"	f	file:
set_prev_status	./src/common.h	/^  void (*set_prev_status)(const disk_t *disk, partition_t *partition);$/;"	m	struct:arch_fnct_struct
set_prev_status_i386	./src/parti386.c	/^static void set_prev_status_i386(const disk_t *disk_car, partition_t *partition)$/;"	f	file:
set_rfs4_info	./src/rfs.c	/^static int set_rfs4_info(const struct reiser4_master_sb *sb4, partition_t *partition)$/;"	f	file:
set_rfs_info	./src/rfs.c	/^static int set_rfs_info(const struct reiserfs_super_block *sb, partition_t *partition)$/;"	f	file:
set_search_start	./src/photorec.c	/^uint64_t set_search_start(struct ph_param *params, alloc_data_t **new_current_search_space, alloc_data_t *list_search_space)$/;"	f
set_search_start_aux	./src/photorec.c	/^static void set_search_start_aux(alloc_data_t **new_current_search_space, alloc_data_t *list_search_space, const uint64_t offset)$/;"	f	file:
set_secwest	./src/common.c	/^void set_secwest(void)$/;"	f
set_start_sect	./src/parti386.c	/^static void set_start_sect(struct partition_dos *p, unsigned int start_sect)$/;"	f	file:
set_sun_info_i386	./src/sun.c	/^static int set_sun_info_i386(partition_t *partition)$/;"	f	file:
set_sysv4_info	./src/sysv.c	/^static int set_sysv4_info(const struct sysv4_super_block *sbd, partition_t *partition)$/;"	f	file:
set_ufs_info	./src/ufs.c	/^static int set_ufs_info(const struct ufs_super_block *sb, partition_t *partition)$/;"	f	file:
set_uuid	./src/md.h	/^	uint8_t	set_uuid[16];	\/* user-space generated. *\/$/;"	m	struct:mdp_superblock_1
set_uuid0	./src/md.h	/^	uint32_t set_uuid0;	\/*  5 Raid set identifier		      *\/$/;"	m	struct:mdp_superblock_s
set_uuid1	./src/md.h	/^	uint32_t set_uuid1;	\/* 13 Raid set identifier #2		      *\/$/;"	m	struct:mdp_superblock_s
set_uuid2	./src/md.h	/^	uint32_t set_uuid2;	\/* 14 Raid set identifier #3		      *\/$/;"	m	struct:mdp_superblock_s
set_uuid3	./src/md.h	/^	uint32_t set_uuid3;	\/* 15 Raid set identifier #4		      *\/$/;"	m	struct:mdp_superblock_s
set_xfs_info	./src/xfs.c	/^static int set_xfs_info(const struct xfs_sb *sb, partition_t *partition)$/;"	f	file:
setid	./src/file_cab.c	/^  uint16_t setid;$/;"	m	struct:cab_header	file:
setjmp_buffer	./src/file_jpg.c	/^  jmp_buf setjmp_buffer;	\/* for return to caller *\/$/;"	m	struct:my_error_mgr	file:
sfnt_version	./src/file_ttf.c	/^  int32_t 	sfnt_version;$/;"	m	struct:ttf_offset_table	file:
sg_device_configuration_identify	./src/hpa_dco.c	/^static uint64_t sg_device_configuration_identify(int fd)$/;"	f	file:
sg_read_native_max_ext	./src/hpa_dco.c	/^static uint64_t sg_read_native_max_ext(int fd)$/;"	f	file:
sgs	./src/bsd.h	/^			uint16_t sgs;	\/* LFS: FS segment shift *\/$/;"	m	union:disklabel::partition::__anon71
shadow_pool	./src/suspend.c	/^  char *shadow_pool;$/;"	m	struct:my_memory_mgr	file:
shared_ioch	./src/ext2_dir.c	/^static io_channel *shared_ioch=NULL;$/;"	v	file:
showWnd_value	./src/file_lnk.c	/^  uint32_t showWnd_value; 	\/* 3Ch *\/$/;"	m	struct:lnk_header_s	file:
shutterComp	./src/file_spe.c	/^  float         shutterComp;       \/* 1476 shutter compensation time.          *\/$/;"	m	struct:header_spe	file:
sib_header	./src/file_sib.c	/^static const unsigned char sib_header[9]= {0x0F, 'S', 'I', 'B', 'E', 'L', 'I', 'U', 'S'};$/;"	v	file:
sidChild	./src/ole.h	/^	uint32_t	sidChild;	\/\/ 76$/;"	m	struct:OLE_DIR
sig	./src/file_sig.c	/^  unsigned char *sig;$/;"	m	struct:signature_s	file:
sig_size	./src/file_sig.c	/^  unsigned int sig_size;$/;"	m	struct:signature_s	file:
sighup_hdlr	./src/phmain.c	/^static void sighup_hdlr(int sig)$/;"	f	file:
sighup_hdlr	./src/testdisk.c	/^static void sighup_hdlr(int sig)$/;"	f	file:
sign	./src/file_ra.c	/^  char sign[4];		\/* .ra4 *\/$/;"	m	struct:ra4_header	file:
sign_theora	./src/file_ogg.c	/^static const unsigned char sign_theora[7]= {0x80, 't', 'h', 'e', 'o', 'r', 'a'};$/;"	v	file:
signature	./src/cramfs.h	/^	uint8_t signature[16];		\/* "Compressed ROMFS" *\/$/;"	m	struct:cramfs_super
signature	./src/exfat.h	/^	uint16_t  	signature;              \/* 0xaa55 *\/$/;"	m	struct:exfat_super_block
signature	./src/file_7z.c	/^  unsigned char signature[6];$/;"	m	struct:header_7z	file:
signature	./src/file_dex.c	/^  unsigned char signature[20];$/;"	m	struct:dex_header	file:
signature	./src/file_e01.c	/^        uint8_t signature[ 8 ];$/;"	m	struct:ewf_file_header	file:
signature	./src/file_flv.c	/^  char 		signature[3];$/;"	m	struct:flv_header	file:
signature	./src/file_psb.c	/^  char signature[4];$/;"	m	struct:psb_file_header	file:
signature	./src/file_psd.c	/^  char signature[4];$/;"	m	struct:psd_file_header	file:
signature	./src/file_reg.c	/^  uint32_t signature;$/;"	m	struct:regf_file_header	file:
signature	./src/file_vdi.c	/^    uint32_t signature;$/;"	m	struct:__anon57	file:
signature	./src/file_woff.c	/^  uint32_t	signature;$/;"	m	struct:WOFFHeader	file:
signature	./src/hdaccess.c	/^        uint8_t signature[ 8 ];$/;"	m	struct:tdewf_file_header	file:
signature	./src/hfsp.h	/^        uint16_t         signature;   \/\/ 00: must be HFSPLUS_VOLHEAD_SIG 'H+'$/;"	m	struct:hfsp_vh
signature_insert	./src/file_sig.c	/^static void signature_insert(const char *extension, unsigned int offset, unsigned char *sig, unsigned int sig_size)$/;"	f	file:
signature_s	./src/file_sig.c	/^struct signature_s$/;"	s	file:
signature_t	./src/file_sig.c	/^typedef struct signature_s signature_t;$/;"	t	typeref:struct:signature_s	file:
signature_type	./src/file_rpm.c	/^  uint16_t signature_type;$/;"	m	struct:rpmlead	file:
signatures	./src/file_sig.c	/^static signature_t *signatures=NULL;$/;"	v	file:
size	./src/cramfs.h	/^	uint32_t size:CRAMFS_SIZE_WIDTH, gid:CRAMFS_GID_WIDTH;$/;"	m	struct:cramfs_inode
size	./src/cramfs.h	/^	uint32_t size;			\/* length in bytes *\/$/;"	m	struct:cramfs_super
size	./src/fat.h	/^	uint32_t	size;		\/* 1C file size (in bytes) *\/$/;"	m	struct:msdos_dir_entry
size	./src/file_1cd.c	/^  uint32_t size;$/;"	m	struct:header_1cd	file:
size	./src/file_a.c	/^  char size[10];$/;"	m	struct:file_header	file:
size	./src/file_ab.c	/^  uint32_t size;$/;"	m	struct:ab_header	file:
size	./src/file_ace.c	/^  uint16_t size;       \/** Size of the block from HEAD_TYPE$/;"	m	struct:header_ace	file:
size	./src/file_arj.c	/^  uint32_t	size;$/;"	m	struct:arj_main_header	file:
size	./src/file_au.c	/^  uint32_t size;$/;"	m	struct:header_au_s	file:
size	./src/file_bkf.c	/^  uint64_t	size;		\/* displayable size *\/$/;"	m	struct:mtf_db_hdr	file:
size	./src/file_bmp.c	/^  uint32_t size;$/;"	m	struct:bmp_header	file:
size	./src/file_caf.c	/^  int64_t  size;$/;"	m	struct:chunk_struct	file:
size	./src/file_cow.c	/^    uint64_t size; \/* in bytes *\/$/;"	m	struct:QCowHeader	file:
size	./src/file_cow.c	/^    uint64_t size; \/* in bytes *\/$/;"	m	struct:__anon48	file:
size	./src/file_d2s.c	/^  uint32_t size;$/;"	m	struct:d2s_header	file:
size	./src/file_dad.c	/^  uint32_t size;$/;"	m	struct:dad_header	file:
size	./src/file_djv.c	/^  uint32_t size;$/;"	m	struct:djv_header	file:
size	./src/file_evt.c	/^  uint32_t size;$/;"	m	struct:evt_chunk	file:
size	./src/file_hdf.c	/^  uint16_t	size;$/;"	m	struct:ddh_struct	file:
size	./src/file_jpg.c	/^  uint32_t size;$/;"	m	struct:MP_Entry	file:
size	./src/file_lxo.c	/^  uint32_t size;$/;"	m	struct:lxo_header	file:
size	./src/file_mb.c	/^  uint32_t size;$/;"	m	struct:maya_header	file:
size	./src/file_mov.c	/^  uint32_t size;$/;"	m	struct:atom_struct	file:
size	./src/file_mov.c	/^  uint64_t size;$/;"	m	struct:atom64_struct	file:
size	./src/file_mrw.c	/^  uint32_t size;$/;"	m	struct:hdr	file:
size	./src/file_oci.c	/^  uint32_t	size;$/;"	m	struct:oci_header	file:
size	./src/file_psp.c	/^  uint32_t size;$/;"	m	struct:psp_chunk	file:
size	./src/file_r3d.c	/^  uint32_t size;$/;"	m	struct:atom_struct	file:
size	./src/file_reg.c	/^  uint32_t size;$/;"	m	struct:rgdb_block	file:
size	./src/file_rm.c	/^  uint32_t size;$/;"	m	struct:rm_header	file:
size	./src/file_rx2.c	/^  uint32_t size;$/;"	m	struct:rx2_header	file:
size	./src/file_swf.c	/^  uint32_t size;$/;"	m	struct:swf_header	file:
size	./src/file_wim.c	/^    uint64_t size;	\/* the 7 low-bytes are used to store the size *\/$/;"	m	union:reshdr_disk_short::__anon15	file:
size	./src/file_wmf.c	/^  uint32_t size;$/;"	m	struct:wmf_header	file:
size	./src/file_zip.c	/^  uint16_t size;$/;"	m	struct:zip64_extra_entry	file:
size	./src/io_redir.c	/^  unsigned int size;$/;"	m	struct:struclist_redir_t	file:
size	./src/lvm.h	/^	uint32_t size;$/;"	m	struct:__anon12
size	./src/lvm.h	/^  uint64_t size;          \/* Bytes *\/$/;"	m	struct:lvm2_disk_locn
size	./src/md.h	/^	uint32_t size;		\/*  8 Apparent size of each individual disk   *\/$/;"	m	struct:mdp_superblock_s
size	./src/md.h	/^	uint64_t	size;		\/* used size of component devices, in 512byte sectors *\/$/;"	m	struct:mdp_superblock_1
size	./src/ole.h	/^	int32_t		size;$/;"	m	struct:DIRECTORY
size	./src/ole.h	/^	uint32_t	size;		\/\/ 120$/;"	m	struct:OLE_DIR
size	./src/vmfs.h	/^  uint64_t size;$/;"	m	struct:vmfs_lvm
size1	./src/file_mov.c	/^  uint32_t size1;$/;"	m	struct:atom64_struct	file:
size4	./src/parti386.c	/^    unsigned char size4[4];         \/* nr of sectors in partition *\/$/;"	m	struct:partition_dos	file:
size_alloc	./src/ntfs_udl.c	/^	long long	 size_alloc;	\/* Allocated size (multiple of cluster size) *\/$/;"	m	struct:data	file:
size_alloc	./src/ntfs_udl.c	/^	long long	 size_alloc;	\/* Allocated size (multiple of cluster size) *\/$/;"	m	struct:filename	file:
size_data	./src/ntfs_udl.c	/^	long long	 size_data;	\/* Actual size of data *\/$/;"	m	struct:data	file:
size_data	./src/ntfs_udl.c	/^	long long	 size_data;	\/* Actual size of data *\/$/;"	m	struct:filename	file:
size_init	./src/ntfs_udl.c	/^	long long	 size_init;	\/* Initialised size, may be less than data size *\/$/;"	m	struct:data	file:
size_to_unit	./src/fnctdsk.c	/^void size_to_unit(const uint64_t disk_size, char *buffer)$/;"	f
size_vcn	./src/ntfs_udl.c	/^	long long	 size_vcn;	\/* Highest VCN in the data runs *\/$/;"	m	struct:data	file:
skd_header	./src/file_skd.c	/^static const unsigned char skd_header[29]= {$/;"	v	file:
skp_header	./src/file_skp.c	/^static const unsigned char skp_header[32]= {$/;"	v	file:
sleep	./src/psearchn.c	84;"	d	file:
snapshots_offset	./src/file_cow.c	/^    uint64_t snapshots_offset;$/;"	m	struct:QCowHeader	file:
snprintf	./src/common.c	/^int snprintf(char *str, size_t size, const char *format, ...)$/;"	f
software2ext	./src/file_doc.c	/^static void software2ext(const char **ext, const unsigned int count, const unsigned char *software)$/;"	f	file:
software_uni2ext	./src/file_doc.c	/^static const char *software_uni2ext(const unsigned int count, const unsigned char *software)$/;"	f	file:
song_name	./src/file_it.c	/^  char	   song_name[26];$/;"	m	struct:impulse_header	file:
sorfile_stat_ts	./src/photorec.c	/^int sorfile_stat_ts(const void *p1, const void *p2)$/;"	f
sortInfoID	./src/file_prc.c	/^  unsigned char sortInfoID[5];$/;"	m	struct:DatabaseHdrType_s	file:
sort_partition_list	./src/fnctdsk.c	/^list_part_t *sort_partition_list(list_part_t *list_part)$/;"	f
sourceFpsDenom	./src/file_mlv.c	/^  uint32_t    sourceFpsDenom;	\/* denominator for fps. usually set to 1000, but may be 1001 for NTSC *\/$/;"	m	struct:__anon55	file:
sourceFpsNom	./src/file_mlv.c	/^  uint32_t    sourceFpsNom;	\/* configured fps in 1\/s multiplied by sourceFpsDenom *\/$/;"	m	struct:__anon55	file:
sp	./src/pe.h	/^    uint16_t sp;$/;"	m	struct:dos_image_file_hdr
sp31_header	./src/file_sp3.c	/^static const unsigned char sp31_header[8]=  { 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};$/;"	v	file:
sp32_header	./src/file_sp3.c	/^static const unsigned char sp32_header[8]=  { 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};$/;"	v	file:
spacerange_cmp	./src/phcli.c	/^static int spacerange_cmp(const struct td_list_head *a, const struct td_list_head *b)$/;"	f	file:
spare	./src/file_spe.c	/^  int16_t           spare[8];          \/*  708  reserved                           *\/$/;"	m	struct:header_spe	file:
spare0	./src/sun.h	/^  unsigned char spare0[14];$/;"	m	struct:__anon8
spare0	./src/sun.h	/^  unsigned char spare0[40];$/;"	m	struct:struct_sun_partition_i386
spare1	./src/sun.h	/^    unsigned char spare1;$/;"	m	struct:__anon8::sun_info
spare1	./src/sun.h	/^  unsigned char spare1[246]; \/* Boot information etc. *\/$/;"	m	struct:__anon8
spare1	./src/sun.h	/^  unsigned char spare1[64]; \/* timestamps ? *\/$/;"	m	struct:struct_sun_partition_i386
spare2	./src/sun.h	/^    unsigned char spare2;$/;"	m	struct:__anon8::sun_info
spare2	./src/sun.h	/^  unsigned char spare2[4];   \/* More magic... *\/$/;"	m	struct:__anon8
spare3	./src/sun.h	/^  unsigned char spare3[4];   \/* Even more magic... *\/$/;"	m	struct:__anon8
spare_disks	./src/md.h	/^	uint32_t spare_disks;	\/*  5 Number of spare disks		      *\/$/;"	m	struct:mdp_superblock_s
sparecyl	./src/sun.h	/^  uint16_t sparecyl;   \/* extra sects per cylinder *\/$/;"	m	struct:__anon8
spe_header	./src/file_spe.c	/^static const unsigned char spe_header[4]= {0x67, 0x45, 0x23, 0x01};$/;"	v	file:
spf_header	./src/file_spf.c	/^static const unsigned char spf_header[12]= {$/;"	v	file:
sqm_header	./src/file_sqm.c	/^static const unsigned char sqm_header[6]=  { 'M', 'S', 'Q', 'M', 'x', 0x00};$/;"	v	file:
srccmp	./src/file_spe.c	/^  int16_t           srccmp;            \/*  654  number of source comp. diodes      *\/$/;"	m	struct:header_spe	file:
ss	./src/pe.h	/^    uint16_t ss;$/;"	m	struct:dos_image_file_hdr
st_gid	./src/dir.h	/^  uint32_t st_gid;$/;"	m	struct:__anon50
st_ino	./src/dir.h	/^  uint32_t st_ino;$/;"	m	struct:__anon50
st_mode	./src/dir.h	/^  uint32_t st_mode;$/;"	m	struct:__anon50
st_size	./src/dir.h	/^  uint64_t st_size;$/;"	m	struct:__anon50
st_uid	./src/dir.h	/^  uint32_t st_uid;$/;"	m	struct:__anon50
start	./src/bfs.h	/^    uint16_t  start;$/;"	m	struct:block_run
start	./src/fat.h	/^	uint16_t   start;		\/* 1A starting cluster number, 0 in long slots *\/$/;"	m	struct:msdos_dir_slot
start	./src/fat.h	/^        uint16_t        start;		\/* 1A *\/$/;"	m	struct:msdos_dir_entry
start	./src/filegen.h	/^  uint64_t start;$/;"	m	struct:__anon66
start	./src/list.h	/^  uint64_t start;$/;"	m	struct:alloc_list_s
start4	./src/parti386.c	/^    unsigned char start4[4];        \/* starting sector counting from 0 *\/$/;"	m	struct:partition_dos	file:
startVCN	./src/ntfs.h	/^  uint64_t startVCN;            \/* Starting VCN *\/$/;"	m	struct:_ntfs_attribnonresident
start_block	./src/hfsp.h	/^        uint32_t         start_block;$/;"	m	struct:__anon53
start_block	./src/ole.h	/^	int32_t		start_block;$/;"	m	struct:DIRECTORY
start_block	./src/ole.h	/^	uint32_t	start_block;	\/\/ 116 starting SECT of stream$/;"	m	struct:OLE_DIR
start_cylinder	./src/sun.h	/^    uint32_t start_cylinder;$/;"	m	struct:__anon8::sun_partition
start_file	./src/hfsp.h	/^        hfsp_fork_raw   start_file;$/;"	m	struct:hfsp_vh
start_ncurses	./src/intrfn.c	/^int start_ncurses(const char *prog_name, const char *real_prog_name)$/;"	f
start_of_file	./src/file_jpg.c	/^  int start_of_file;	\/* have we gotten any data yet? *\/$/;"	m	struct:__anon60	file:
start_offset	./src/btrfs.h	/^	uint64_t start_offset;$/;"	m	struct:btrfs_dev_item
start_sector	./src/exfat.h	/^	uint64_t  	start_sector;           \/* 0x40 start sector of partition *\/$/;"	m	struct:exfat_super_block
start_sector	./src/parthumax.c	/^  uint32_t start_sector;$/;"	m	struct:partition_humax	file:
start_sector	./src/sun.h	/^    uint32_t start_sector;$/;"	m	struct:struct_sun_partition_i386::sun_info_i386
starthi	./src/fat.h	/^	uint16_t        starthi;	\/* 14 High 16 bits of cluster in FAT32 *\/$/;"	m	struct:msdos_dir_entry
startx	./src/file_spe.c	/^    uint16_t startx;            \/* left x start value.                      *\/$/;"	m	struct:header_spe::ROIinfo	file:
starty	./src/file_spe.c	/^    uint16_t starty;            \/* top y start value.                       *\/$/;"	m	struct:header_spe::ROIinfo	file:
state	./src/exfat.h	/^	uint16_t  	state;                  \/* state of this volume *\/$/;"	m	struct:exfat_super_block
state	./src/md.h	/^	uint32_t state;		\/*  1 State bits (clean, ...)		      *\/$/;"	m	struct:mdp_superblock_s
state	./src/md.h	/^	uint32_t state;		\/* 4 Operational state			      *\/$/;"	m	struct:mdp_device_descriptor_s
status	./src/common.h	/^  status_type_t status;$/;"	m	struct:partition_struct
status	./src/dir.h	/^  unsigned int status;$/;"	m	struct:__anon50
status	./src/file_fs.c	/^  char     status;$/;"	m	struct:transaction_header	file:
status	./src/photorec.h	/^  photorec_status_t status;$/;"	m	struct:ph_param
status_inc	./src/photorec.c	/^void status_inc(struct ph_param *params, const struct ph_options *options)$/;"	f
status_to_name	./src/photorec.c	/^const char *status_to_name(const photorec_status_t status)$/;"	f
status_type	./src/common.h	/^enum status_type { STATUS_DELETED, STATUS_PRIM, STATUS_PRIM_BOOT, STATUS_LOG, STATUS_EXT, STATUS_EXT_IN_EXT};$/;"	g
status_type_t	./src/common.h	/^typedef enum status_type status_type_t;$/;"	t	typeref:enum:status_type
stdiode	./src/file_spe.c	/^  int16_t           stdiode;           \/*   44  trigger diode                      *\/$/;"	m	struct:header_spe	file:
stop_the_recovery	./src/qphotorec.h	/^		bool			stop_the_recovery;$/;"	m	class:QPhotorec
storagemethod	./src/file_mrw.c	/^  uint8_t storagemethod; \/\/ 0x52 means not packed$/;"	m	struct:prd	file:
store4_little_endian	./src/parti386.c	/^static void store4_little_endian(unsigned char *cp, unsigned int val)$/;"	f	file:
str2UCSle	./src/unicode.c	/^int str2UCSle(uint16_t *to, const char *from, const unsigned int len)$/;"	f
strType	./src/file_bkf.c	/^  uint8_t	strType;	\/* string type *\/$/;"	m	struct:mtf_db_hdr	file:
str_uint	./src/file_sig.c	/^static char *str_uint(char *src, unsigned int *resptr)$/;"	f	file:
strcasestr	./src/common.c	/^char * strcasestr (const char *haystack, const char *needle)$/;"	f
streamID	./src/file_flv.c	/^  uint8_t	streamID[3];$/;"	m	struct:flv_tag	file:
stream_type	./src/file_asf.c	/^  unsigned char stream_type[16];$/;"	m	struct:asf_stream_prop_s	file:
string	./src/file_txt.c	/^  const char *string;$/;"	m	struct:__anon46	file:
strings_ids_off	./src/file_dex.c	/^  uint32_t	strings_ids_off;$/;"	m	struct:dex_header	file:
strings_ids_size	./src/file_dex.c	/^  uint32_t	strings_ids_size;$/;"	m	struct:dex_header	file:
strip_dup	./src/common.c	/^char* strip_dup(char* str)$/;"	f
stripes	./src/luks.h	/^  uint32_t	stripes;$/;"	m	struct:luks_keyslot
stripesize	./src/btrfs.h	/^	uint32_t stripesize;$/;"	m	struct:btrfs_super_block
stripfil	./src/file_spe.c	/^  char          stripfil[16];      \/*  672  stripe file (st130)                *\/$/;"	m	struct:header_spe	file:
strncasecmp	./src/common.c	/^int strncasecmp(const char * s1, const char * s2, size_t len)$/;"	f
strong_encrypt	./src/file_zip.c	/^  uint16_t strong_encrypt:1;        \/** Strong encryption (version >= 50) *\/$/;"	m	struct:zip_file_entry	file:
struclist_redir_t	./src/io_redir.c	/^struct struclist_redir_t$/;"	s	file:
strucsig	./src/fat.h	/^  uint32_t strucsig;		\/* 0x61417272 *\/$/;"	m	struct:fat_fsinfo
struct_sun_partition_i386	./src/sun.h	/^struct struct_sun_partition_i386 {$/;"	s
stuffit_header	./src/file_stu.c	/^static const unsigned char stuffit_header[7] = { 'S', 't', 'u', 'f', 'f', 'I', 't'};$/;"	v	file:
sub_packet_h	./src/file_ra.c	/^  uint16_t sub_packet_h;$/;"	m	struct:ra4_header	file:
subpacket_size	./src/file_ra.c	/^  uint16_t subpacket_size;$/;"	m	struct:ra4_header	file:
sun_disklabel	./src/sun.h	/^} sun_disklabel;$/;"	t	typeref:struct:__anon8
sun_info	./src/sun.h	/^  struct sun_info {$/;"	s	struct:__anon8
sun_info_i386	./src/sun.h	/^  struct sun_info_i386 {$/;"	s	struct:struct_sun_partition_i386
sun_partition	./src/sun.h	/^  struct sun_partition {$/;"	s	struct:__anon8
sun_partition_i386	./src/sun.h	/^typedef struct struct_sun_partition_i386 sun_partition_i386;$/;"	t	typeref:struct:struct_sun_partition_i386
sun_sys_types	./src/partsun.c	/^static const struct systypes sun_sys_types[] = {$/;"	v	typeref:struct:systypes	file:
super_offset	./src/md.h	/^	uint64_t	super_offset;	\/* sector start of this superblock *\/$/;"	m	struct:mdp_superblock_1
suspend_memory	./src/suspend.c	/^void suspend_memory(j_common_ptr cinfo) {$/;"	f
suspend_memory	./src/suspend_no.c	/^void suspend_memory(j_common_ptr cinfo) {$/;"	f
sw_version	./src/file_spe.c	/^  char            sw_version[16];    \/*  688  Version of SW creating this file *\/$/;"	m	struct:header_spe	file:
swap_header	./src/swap.h	/^union swap_header {$/;"	u
swap_uuid_and_efi_guid	./src/partgptw.c	/^static void swap_uuid_and_efi_guid(efi_guid_t *guid)$/;"	f	file:
swf_header	./src/file_swf.c	/^struct swf_header$/;"	s	file:
sync	./src/common.h	/^  int (*sync)(disk_t *disk);$/;"	m	struct:param_disk_struct
sys_chunk_array	./src/btrfs.h	/^	uint8_t sys_chunk_array[BTRFS_SYSTEM_CHUNK_ARRAY_SIZE];$/;"	m	struct:btrfs_super_block
sys_chunk_array_size	./src/btrfs.h	/^	uint32_t sys_chunk_array_size;$/;"	m	struct:btrfs_super_block
sys_ind	./src/parti386.c	/^    unsigned char sys_ind;          \/* What partition type *\/$/;"	m	struct:partition_dos	file:
system_id	./src/fat.h	/^	int8_t	system_id[8];	\/* 0x03 Name - can be used to special case$/;"	m	struct:fat_boot_sector
system_id	./src/iso9660.h	/^	char system_id[32];$/;"	m	struct:iso_primary_descriptor
system_id	./src/lvm.h	/^	uint8_t system_id[NAME_LEN];	\/* for vgexport\/vgimport *\/$/;"	m	struct:__anon13
system_id	./src/ntfs.h	/^	int8_t	system_id[8];	\/* 0x03 Name : NTFS *\/$/;"	m	struct:ntfs_boot_sector
systypes	./src/common.h	/^struct systypes {$/;"	s
systypes_gtp	./src/partgpt.h	/^struct systypes_gtp {$/;"	s
sysv2_super_block	./src/sysv.h	/^struct sysv2_super_block {$/;"	s
sysv4_super_block	./src/sysv.h	/^struct sysv4_super_block {$/;"	s
sysv_ino_t	./src/sysv.h	/^typedef uint16_t sysv_ino_t;$/;"	t
szlDevice	./src/file_emf.c	/^  U_SIZEL szlDevice;$/;"	m	struct:EMF_HDR	file:
szlMillimeters	./src/file_emf.c	/^  U_SIZEL szlMillimeters; $/;"	m	struct:EMF_HDR	file:
tag	./src/file_hdf.c	/^  uint16_t	tag;$/;"	m	struct:dd_struct	file:
tag	./src/file_jpg.c	/^  uint16_t tag;$/;"	m	struct:MP_IFD_Field	file:
tag	./src/file_ttf.c	/^  uint32_t 	tag;$/;"	m	struct:ttf_table_directory	file:
tag	./src/file_zip.c	/^  uint16_t tag;$/;"	m	struct:zip64_extra_entry	file:
tag_name	./src/file_tiff.c	/^static const char *tag_name(unsigned int tag)$/;"	f	file:
tar_header_gnu	./src/file_tar.c	/^static const unsigned char tar_header_gnu[6]	= { 'u','s','t','a','r',0x00};$/;"	v	file:
tar_header_posix	./src/file_tar.c	/^static const unsigned char tar_header_posix[8]  = { 'u','s','t','a','r',' ',' ',0x00};$/;"	v	file:
tax_header	./src/file_tax.c	/^static const unsigned char tax_header[6]=  { 'T', 'T', 'F', 'N', 0x01, 0x01};$/;"	v	file:
td_atime	./src/dir.h	/^  time_t    td_atime;   \/* time of last access *\/$/;"	m	struct:__anon50
td_ctime	./src/dir.h	/^  time_t    td_ctime;   \/* time of last status change *\/$/;"	m	struct:__anon50
td_ewf_version	./src/ewf.c	/^const char*td_ewf_version(void)$/;"	f
td_ext2fs_blocks_count	./src/ext2_common.c	/^uint64_t td_ext2fs_blocks_count(const struct ext2_super_block *super)$/;"	f
td_ext2fs_free_blocks_count	./src/ext2_common.c	/^uint64_t td_ext2fs_free_blocks_count(const struct ext2_super_block *super)$/;"	f
td_ext2fs_version	./src/ext2_dir.c	/^const char*td_ext2fs_version(void)$/;"	f
td_getcwd	./src/askloc.c	/^static char *td_getcwd(char *buf, unsigned long size)$/;"	f	file:
td_ilog2	./src/file_ttf.c	/^static unsigned int td_ilog2(unsigned int v)$/;"	f	file:
td_jpeg_version	./src/file_jpg.c	/^const char*td_jpeg_version(void)$/;"	f
td_list_add	./src/list.h	/^static inline void td_list_add(struct td_list_head *newe, struct td_list_head *head)$/;"	f
td_list_add_sorted	./src/list.h	/^static inline void td_list_add_sorted(struct td_list_head *newe, struct td_list_head *head,$/;"	f
td_list_add_sorted_uniq	./src/list.h	/^static inline int td_list_add_sorted_uniq(struct td_list_head *newe, struct td_list_head *head,$/;"	f
td_list_add_tail	./src/list.h	/^static inline void td_list_add_tail(struct td_list_head *newe, struct td_list_head *head)$/;"	f
td_list_del	./src/list.h	/^static inline void td_list_del(struct td_list_head *entry)$/;"	f
td_list_del_init	./src/list.h	/^static inline void td_list_del_init(struct td_list_head *entry)$/;"	f
td_list_empty	./src/list.h	/^static inline int td_list_empty(const struct td_list_head *head)$/;"	f
td_list_empty_careful	./src/list.h	/^static inline int td_list_empty_careful(const struct td_list_head *head)$/;"	f
td_list_entry	./src/list.h	231;"	d
td_list_entry_const	./src/list.h	234;"	d
td_list_for_each	./src/list.h	243;"	d
td_list_for_each_entry	./src/list.h	281;"	d
td_list_for_each_entry_continue	./src/list.h	314;"	d
td_list_for_each_entry_reverse	./src/list.h	292;"	d
td_list_for_each_entry_safe	./src/list.h	326;"	d
td_list_for_each_prev	./src/list.h	251;"	d
td_list_for_each_prev_safe	./src/list.h	271;"	d
td_list_for_each_safe	./src/list.h	261;"	d
td_list_head	./src/list.h	/^struct td_list_head {$/;"	s
td_list_move	./src/list.h	/^static inline void td_list_move(struct td_list_head *list, struct td_list_head *head)$/;"	f
td_list_move_tail	./src/list.h	/^static inline void td_list_move_tail(struct td_list_head *list,$/;"	f
td_list_prepare_entry	./src/list.h	304;"	d
td_list_sort	./src/list_sort.c	/^void td_list_sort(struct td_list_head *head,$/;"	f
td_list_splice	./src/list.h	/^static inline void td_list_splice(struct td_list_head *list, struct td_list_head *head)$/;"	f
td_list_splice_init	./src/list.h	/^static inline void td_list_splice_init(struct td_list_head *list,$/;"	f
td_max	./src/common.h	509;"	d
td_memmem	./src/memmem.h	/^static inline const void *td_memmem(const void *haystack, const unsigned int haystack_len, const void *needle, const unsigned int needle_len)$/;"	f
td_min	./src/common.h	503;"	d
td_mtime	./src/dir.h	/^  time_t    td_mtime;   \/* time of last modification *\/$/;"	m	struct:__anon50
td_ntfs2utc	./src/common.c	/^time_t td_ntfs2utc (int64_t ntfstime)$/;"	f
td_ntfs_version	./src/ntfs_dir.c	/^const char*td_ntfs_version(void)$/;"	f
td_reiserfs_version	./src/rfs_dir.c	/^const char*td_reiserfs_version(void)$/;"	f
td_str	./src/file_jpg.c	1804;"	d	file:
td_xstr	./src/file_jpg.c	1803;"	d	file:
tdewf_file_header	./src/hdaccess.c	/^struct tdewf_file_header$/;"	s	file:
tdir_count	./src/file_tiff.h	/^        uint32_t          tdir_count;     \/* number of items; length in spec *\/$/;"	m	struct:__anon43
tdir_offset	./src/file_tiff.h	/^        uint32_t          tdir_offset;    \/* byte offset to field data *\/$/;"	m	struct:__anon43
tdir_tag	./src/file_tiff.h	/^        uint16_t          tdir_tag;       \/* see below *\/$/;"	m	struct:__anon43
tdir_type	./src/file_tiff.h	/^        uint16_t          tdir_type;      \/* data type; see below *\/$/;"	m	struct:__anon43
test_BSD	./src/bsd.c	/^static int test_BSD(disk_t *disk_car, const struct disklabel*bsd_header,partition_t *partition,const int verbose, const int dump_ind, const unsigned int max_partitions)$/;"	f	file:
test_BeFS	./src/bfs.c	/^static int test_BeFS(disk_t *disk_car, const struct disk_super_block*beos_block,partition_t *partition, const int dump_ind)$/;"	f	file:
test_EXFAT	./src/exfat.c	/^int test_EXFAT(const struct exfat_super_block *exfat_header, partition_t *partition)$/;"	f
test_EXT2	./src/ext2_common.c	/^int test_EXT2(const struct ext2_super_block *sb, partition_t *partition)$/;"	f
test_FAT	./src/fat.c	/^int test_FAT(disk_t *disk_car, const struct fat_boot_sector *fat_header, partition_t *partition,const int verbose, const int dump_ind)$/;"	f
test_HFS	./src/hfs.c	/^int test_HFS(disk_t *disk_car, const hfs_mdb_t *hfs_mdb,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
test_HFSP	./src/hfsp.c	/^int test_HFSP(disk_t *disk_car, const struct hfsp_vh *vh,partition_t *partition,const int verbose, const int dump_ind)$/;"	f
test_HPFS	./src/hpfs.c	/^static int test_HPFS(disk_t *disk_car,const struct fat_boot_sector *hpfs_header, partition_t *partition,const int verbose, const int dump_ind)$/;"	f	file:
test_ISO	./src/iso.c	/^static int test_ISO(const struct iso_primary_descriptor *iso, partition_t *partition)$/;"	f	file:
test_JFS	./src/jfs.c	/^static int test_JFS(disk_t *disk_car, const struct jfs_superblock *sb, partition_t *partition, const int dump_ind)$/;"	f	file:
test_LUKS	./src/luks.c	/^static int test_LUKS(disk_t *disk_car, const struct luks_phdr *sb, partition_t *partition, const int dump_ind)$/;"	f	file:
test_LVM	./src/lvm.c	/^static int test_LVM(disk_t *disk_car, const pv_disk_t *pv,partition_t *partition,const int verbose, const int dump_ind)$/;"	f	file:
test_LVM2	./src/lvm.c	/^static int test_LVM2(disk_t *disk_car, const struct lvm2_label_header *lh,partition_t *partition,const int verbose, const int dump_ind)$/;"	f	file:
test_Linux_SWAP	./src/swap.c	/^static int test_Linux_SWAP(const union swap_header *swap_header, partition_t *partition)$/;"	f	file:
test_MBR_data	./src/parti386.c	/^static void test_MBR_data(list_part_t *list_part)$/;"	f	file:
test_MBR_over	./src/parti386.c	/^static int test_MBR_over(disk_t *disk_car,list_part_t *list_part)$/;"	f	file:
test_MD	./src/md.c	/^static int test_MD(disk_t *disk_car, const struct mdp_superblock_s *sb, partition_t *partition, const int dump_ind)$/;"	f	file:
test_MD_be	./src/md.c	/^static int test_MD_be(disk_t *disk_car, const struct mdp_superblock_s *sb, partition_t *partition, const int dump_ind)$/;"	f	file:
test_NTFS	./src/ntfs.c	/^int test_NTFS(const disk_t *disk_car,const struct ntfs_boot_sector*ntfs_header, partition_t *partition,const int verbose, const int dump_ind)$/;"	f
test_OS2MB	./src/fat.c	/^static int test_OS2MB(const disk_t *disk, const struct fat_boot_sector *fat_header, partition_t *partition,const int verbose, const int dump_ind)$/;"	f	file:
test_VMFS	./src/vmfs.c	/^static int test_VMFS(disk_t *disk, const struct vmfs_volume *sb, partition_t *partition, const int dump_ind)$/;"	f	file:
test_WBFS	./src/wbfs.c	/^static int test_WBFS(disk_t *disk, const struct wbfs_head *sb, partition_t *partition, const int dump_ind)$/;"	f	file:
test_ZFS	./src/zfs.c	/^static int test_ZFS(disk_t *disk, const struct vdev_boot_header *sb, partition_t *partition, const int dump_ind)$/;"	f	file:
test_btrfs	./src/btrfs.c	/^static int test_btrfs(const struct btrfs_super_block *sb, partition_t *partition)$/;"	f	file:
test_cramfs	./src/cramfs.c	/^static int test_cramfs(const disk_t *disk_car, const struct cramfs_super *sb,partition_t *partition, const int verbose)$/;"	f	file:
test_fatx	./src/fatx.c	/^static int test_fatx(const struct disk_fatx *fatx_block, partition_t *partition)$/;"	f	file:
test_gfs2	./src/gfs2.c	/^static int test_gfs2(disk_t *disk, const struct gfs2_sb *sb, partition_t *partition, const int dump_ind)$/;"	f	file:
test_netware	./src/netware.c	/^static int test_netware(const struct disk_netware *netware_block, partition_t *partition)$/;"	f	file:
test_rfs	./src/rfs.c	/^static int test_rfs(const disk_t *disk_car, const struct reiserfs_super_block *sb, partition_t *partition, const int verbose)$/;"	f	file:
test_rfs4	./src/rfs.c	/^static int test_rfs4(const disk_t *disk_car, const struct reiser4_master_sb *sb, partition_t *partition, const int verbose)$/;"	f	file:
test_structure	./src/common.h	/^  int (*test_structure)(list_part_t *list_part);$/;"	m	struct:arch_fnct_struct
test_structure_gpt	./src/partgpt.c	/^static int test_structure_gpt(list_part_t *list_part)$/;"	f	file:
test_structure_humax	./src/parthumax.c	/^static int test_structure_humax(list_part_t *list_part)$/;"	f	file:
test_structure_i386	./src/parti386.c	/^static int test_structure_i386(list_part_t *list_part)$/;"	f	file:
test_structure_mac	./src/partmac.c	/^int test_structure_mac(list_part_t *list_part)$/;"	f
test_structure_none	./src/partnone.c	/^static int test_structure_none(list_part_t *list_part)$/;"	f	file:
test_structure_sun	./src/partsun.c	/^static int test_structure_sun(list_part_t *list_part)$/;"	f	file:
test_structure_xbox	./src/partxbox.c	/^static int test_structure_xbox(list_part_t *list_part)$/;"	f	file:
test_sun_i386	./src/sun.c	/^static int test_sun_i386(const disk_t *disk_car, const sun_partition_i386 *sunlabel, partition_t *partition, const int verbose)$/;"	f	file:
test_sysv4	./src/sysv.c	/^static int test_sysv4(const disk_t *disk_car, const struct sysv4_super_block *sbd, partition_t *partition, const int verbose)$/;"	f	file:
test_ufs	./src/ufs.c	/^static int test_ufs(const disk_t *disk_car, const struct ufs_super_block *sb, partition_t *partition, const int verbose)$/;"	f	file:
test_xfs	./src/xfs.c	/^static int test_xfs(const disk_t *disk_car, const struct xfs_sb *sb, partition_t *partition, const int verbose)$/;"	f	file:
testdisk_disk_selection_cli	./src/tdisksel.c	/^static int testdisk_disk_selection_cli(int verbose,int dump_ind, const list_disk_t *list_disk, const int saveheader, const char *cmd_device, char **current_cmd)$/;"	f	file:
testdisk_disk_selection_ncurses	./src/tdisksel.c	/^static int testdisk_disk_selection_ncurses(int verbose,int dump_ind, const list_disk_t *list_disk, const int saveheader, char **current_cmd)$/;"	f	file:
testdisk_ffs	./src/ntfs_adv.c	/^static int testdisk_ffs(int x)$/;"	f	file:
text	./src/file_vdi.c	/^    char text[0x40];$/;"	m	struct:__anon57	file:
text_encoding	./src/file_sql.c	/^ uint32_t text_encoding;$/;"	m	struct:db_header	file:
text_end	./src/file_fcs.c	/^  unsigned char text_end[8];		\/* 18 *\/$/;"	m	struct:fcs_header	file:
text_start	./src/file_fcs.c	/^  unsigned char text_start[8];		\/* 10 *\/$/;"	m	struct:fcs_header	file:
this_disk	./src/md.h	/^	mdp_disk_t this_disk;$/;"	m	struct:mdp_superblock_s
tib2_footer	./src/file_tib.c	/^static const unsigned char tib2_footer[7]= {0x00, 0x00, 0x20, 0xa2, 0xb9, 0x24, 0xce};$/;"	v	file:
tiff_be_makernote	./src/file_tiff.c	/^static uint64_t tiff_be_makernote(FILE *in, const uint32_t tiff_diroff)$/;"	f	file:
tiff_be_read	./src/file_tiff.c	/^static unsigned int tiff_be_read(const void *val, const unsigned int type)$/;"	f	file:
tiff_diroff	./src/file_tiff.h	/^        uint32_t  tiff_diroff;    \/* byte offset to first directory *\/$/;"	m	struct:__anon42
tiff_le_makernote	./src/file_tiff.c	/^static uint64_t tiff_le_makernote(FILE *in, const uint32_t tiff_diroff)$/;"	f	file:
tiff_le_read	./src/file_tiff.c	/^static unsigned int tiff_le_read(const void *val, const unsigned int type)$/;"	f	file:
tiff_magic	./src/file_tiff.h	/^        uint16_t  tiff_magic;     \/* magic number (defines byte order) *\/$/;"	m	struct:__anon42
tiff_version	./src/file_tiff.h	/^        uint16_t  tiff_version;   \/* TIFF version number *\/$/;"	m	struct:__anon42
time	./src/fat.h	/^	uint16_t	time;           \/* 16 time, date and first cluster *\/$/;"	m	struct:msdos_dir_entry
time	./src/filegen.h	/^  time_t time;$/;"	m	struct:file_recovery_struct
time_division	./src/file_flp.c	/^  int16_t time_division;$/;"	m	struct:flp_header	file:
time_division	./src/file_mid.c	/^  int16_t time_division;$/;"	m	struct:midi_header	file:
time_hi_and_version	./src/common.h	/^  uint16_t time_hi_and_version;$/;"	m	struct:efi_guid_s
time_low	./src/common.h	/^  uint32_t time_low;$/;"	m	struct:efi_guid_s
time_mid	./src/common.h	/^  uint16_t time_mid;$/;"	m	struct:efi_guid_s
timer	./src/qphotorec.h	/^		QTimer 			*timer;$/;"	m	class:QPhotorec
timestamp	./src/file_flv.c	/^  uint8_t	timestamp[3];$/;"	m	struct:flv_tag	file:
timestamp	./src/file_mlv.c	/^  uint64_t    timestamp;$/;"	m	struct:__anon56	file:
timestamp_ext	./src/file_flv.c	/^  uint8_t	timestamp_ext;$/;"	m	struct:flv_tag	file:
timestruc_t	./src/jfs_superblock.h	/^struct timestruc_t {$/;"	s
title	./src/file_ra.c	/^  char     title[0];$/;"	m	struct:ra4_header	file:
title	./src/file_ra.c	/^  char title[0];$/;"	m	struct:ra3_header	file:
title_length	./src/file_ra.c	/^  uint8_t  title_length;$/;"	m	struct:ra4_header	file:
title_length	./src/file_ra.c	/^  uint8_t title_length;$/;"	m	struct:ra3_header	file:
tivo_header	./src/file_tivo.c	/^static const unsigned char tivo_header[7]=  {$/;"	v	file:
to_be_removed	./src/common.h	/^  int to_be_removed;$/;"	m	struct:list_part_struct
top	./src/file_emf.c	/^  int32_t top;$/;"	m	struct:__anon20	file:
totalSfntSize	./src/file_woff.c	/^  uint32_t	totalSfntSize;$/;"	m	struct:WOFFHeader	file:
total_blocks	./src/hfsp.h	/^        uint32_t		total_blocks;$/;"	m	struct:__anon54
total_blocks	./src/hfsp.h	/^        uint32_t         total_blocks;	\/\/ 2C$/;"	m	struct:hfsp_vh
total_bytes	./src/btrfs.h	/^	uint64_t total_bytes;$/;"	m	struct:btrfs_dev_item
total_bytes	./src/btrfs.h	/^	uint64_t total_bytes;$/;"	m	struct:btrfs_super_block
total_clusters	./src/exfat.h	/^	uint32_t  	total_clusters;         \/* number of total clusters *\/$/;"	m	struct:exfat_super_block
total_samples	./src/file_wv.c	/^    uint32_t total_samples;     \/\/ total samples for entire file, but this is$/;"	m	struct:__anon47	file:
total_sect	./src/fat.h	/^	uint32_t	total_sect;	\/* 0x20 number of sectors (if sectors == 0) *\/$/;"	m	struct:fat_boot_sector
total_sect	./src/ntfs.h	/^	uint32_t	total_sect;	\/* 0x20 number of sectors = 0 *\/$/;"	m	struct:ntfs_boot_sector
total_size	./src/hfsp.h	/^        uint64_t		total_size;  \/\/ logical size$/;"	m	struct:__anon54
total_space_allocated	./src/suspend.c	/^  long total_space_allocated;$/;"	m	struct:my_memory_mgr	file:
total_space_shadowed	./src/suspend.c	/^  long total_space_shadowed;$/;"	m	struct:my_memory_mgr	file:
track_no	./src/file_wv.c	/^    unsigned char track_no;     \/\/ track number (0 if not used, like now)$/;"	m	struct:__anon47	file:
tracks	./src/file_flp.c	/^  uint16_t tracks;$/;"	m	struct:flp_header	file:
tracks	./src/file_hds.c	/^    uint32_t tracks;$/;"	m	struct:parallels_header	file:
tracks	./src/file_mid.c	/^  uint16_t tracks;$/;"	m	struct:midi_header	file:
transaction_header	./src/file_fs.c	/^struct transaction_header$/;"	s	file:
tshv_header	./src/file_m2ts.c	/^static const unsigned char tshv_header[4] = { 'T','S','H','V'};$/;"	v	file:
ttf_offset_table	./src/file_ttf.c	/^struct ttf_offset_table$/;"	s	file:
ttf_table_directory	./src/file_ttf.c	/^struct ttf_table_directory$/;"	s	file:
tv_nsec	./src/jfs_superblock.h	/^	uint32_t tv_nsec;$/;"	m	struct:timestruc_t
tv_sec	./src/jfs_superblock.h	/^	uint32_t tv_sec;$/;"	m	struct:timestruc_t
tv_sec	./src/ufs.h	/^	uint32_t	tv_sec;$/;"	m	struct:ufs_timeval
tv_usec	./src/ufs.h	/^	uint32_t	tv_usec;$/;"	m	struct:ufs_timeval
txt_header_t	./src/file_txt.c	/^} txt_header_t;$/;"	t	typeref:struct:__anon46	file:
type	./src/btrfs.h	/^	uint64_t type;$/;"	m	struct:btrfs_dev_item
type	./src/exfat.h	/^  uint8_t  type;$/;"	m	struct:exfat_alloc_bitmap_entry
type	./src/exfat.h	/^  uint8_t  type;$/;"	m	struct:exfat_file_entry
type	./src/exfat.h	/^  uint8_t  type;$/;"	m	struct:exfat_stream_ext_entry
type	./src/file_ace.c	/^  uint8_t  type;       \/** indicates type of block *\/$/;"	m	struct:header_ace	file:
type	./src/file_bkf.c	/^  uint32_t	type;		\/* DBLK type *\/$/;"	m	struct:mtf_db_hdr	file:
type	./src/file_caf.c	/^  uint32_t type;$/;"	m	struct:chunk_struct	file:
type	./src/file_djv.c	/^  uint32_t type;$/;"	m	struct:djv_header	file:
type	./src/file_exe.c	/^  uint16_t type;$/;"	m	struct:PE_index	file:
type	./src/file_ico.c	/^  uint16_t	type;$/;"	m	struct:ico_header	file:
type	./src/file_jpg.c	/^  uint16_t type;$/;"	m	struct:MP_IFD_Field	file:
type	./src/file_lxo.c	/^  char type[3];$/;"	m	struct:lxo_header	file:
type	./src/file_mov.c	/^  uint32_t type;$/;"	m	struct:atom64_struct	file:
type	./src/file_mov.c	/^  uint32_t type;$/;"	m	struct:atom_struct	file:
type	./src/file_oci.c	/^  unsigned char type[4];$/;"	m	struct:oci_header	file:
type	./src/file_png.c	/^  uint32_t type;$/;"	m	struct:png_chunk	file:
type	./src/file_prc.c	/^  uint32_t      type;			\/* 0x3c *\/$/;"	m	struct:DatabaseHdrType_s	file:
type	./src/file_r3d.c	/^  uint32_t type;$/;"	m	struct:atom_struct	file:
type	./src/file_rm.c	/^  uint32_t type;$/;"	m	struct:rm_header	file:
type	./src/file_rpm.c	/^  uint16_t type;$/;"	m	struct:rpmlead	file:
type	./src/file_spe.c	/^  int16_t           type;              \/*  704   1 = new120 (Type II)              *\/$/;"	m	struct:header_spe	file:
type	./src/file_wmf.c	/^  uint16_t type;$/;"	m	struct:wmf_header	file:
type	./src/iso9660.h	/^	char type;$/;"	m	struct:iso_primary_descriptor
type	./src/lvm.h	/^  uint8_t type[8];        \/* 0x18 LVM2 001 *\/$/;"	m	struct:lvm2_label_header
type	./src/ntfs.h	/^  uint32_t type;		\/* Attribute Type (e.g. 0x10, 0x60) *\/$/;"	m	struct:_ntfs_attribheader
type	./src/ntfs.h	/^\/*  0*\/	uint32_t type;			\/* Type of the indexed attribute. Is$/;"	m	struct:__anon26
type	./src/ole.h	/^	char		type;		\/\/ 66$/;"	m	struct:OLE_DIR
type	./src/ole.h	/^	int32_t		type;$/;"	m	struct:DIRECTORY
type2size	./src/file_tiff.c	/^static unsigned int type2size(const unsigned int type)$/;"	f	file:
type_flags	./src/file_flv.c	/^  uint8_t	type_flags;$/;"	m	struct:flv_header	file:
type_ids_off	./src/file_dex.c	/^  uint32_t	type_ids_off;$/;"	m	struct:dex_header	file:
type_ids_size	./src/file_dex.c	/^  uint32_t	type_ids_size;$/;"	m	struct:dex_header	file:
type_l_path_tabl	./src/iso9660.h	/^	char type_l_path_tabl[4];$/;"	m	struct:iso_primary_descriptor
type_m_path_table	./src/iso9660.h	/^	char type_m_path_table[4];$/;"	m	struct:iso_primary_descriptor
tz2_header	./src/file_tz.c	/^static const unsigned char tz2_header[20]=$/;"	v	file:
tz_header	./src/file_tz.c	/^static const unsigned char tz_header[20]=$/;"	v	file:
uByteOrder	./src/ole.h	/^	uint16_t	uByteOrder;				\/*28*\/$/;"	m	struct:OLE_HDR
uDllVersion	./src/ole.h	/^	uint16_t	uDllVersion;			\/*26*\/$/;"	m	struct:OLE_HDR
uMiniSectorShift	./src/ole.h	/^	uint16_t	uMiniSectorShift;		\/*32*\/$/;"	m	struct:OLE_HDR
uMinorVersion	./src/ole.h	/^	uint16_t	uMinorVersion;			\/*24*\/$/;"	m	struct:OLE_HDR
uSectorShift	./src/ole.h	/^	uint16_t	uSectorShift;			\/*30*\/$/;"	m	struct:OLE_HDR
ufile	./src/ntfs_udl.c	/^struct ufile {$/;"	s	file:
ufile_to_file_data	./src/ntfs_udl.c	/^static file_info_t *ufile_to_file_data(const struct ufile *file, const struct data *d)$/;"	f	file:
ufs2_csum_total	./src/ufs.h	/^struct ufs2_csum_total {$/;"	s
ufs_blknum	./src/ufs.h	268;"	d
ufs_blkoff	./src/ufs.h	258;"	d
ufs_blkroundup	./src/ufs.h	263;"	d
ufs_blkstofrags	./src/ufs.h	266;"	d
ufs_cbtocylno	./src/ufs.h	245;"	d
ufs_cbtorpos	./src/ufs.h	247;"	d
ufs_cgbase	./src/ufs.h	216;"	d
ufs_cgcmin	./src/ufs.h	220;"	d
ufs_cgdmin	./src/ufs.h	222;"	d
ufs_cgimin	./src/ufs.h	221;"	d
ufs_cgsblock	./src/ufs.h	219;"	d
ufs_cgstart	./src/ufs.h	217;"	d
ufs_clear_opt	./src/ufs.h	186;"	d
ufs_csum	./src/ufs.h	/^struct ufs_csum {$/;"	s
ufs_dbtofsb	./src/ufs.h	210;"	d
ufs_dtog	./src/ufs.h	239;"	d
ufs_dtogd	./src/ufs.h	240;"	d
ufs_fragnum	./src/ufs.h	267;"	d
ufs_fragoff	./src/ufs.h	259;"	d
ufs_fragroundup	./src/ufs.h	264;"	d
ufs_fragstoblks	./src/ufs.h	265;"	d
ufs_fsbtodb	./src/ufs.h	209;"	d
ufs_inotocg	./src/ufs.h	230;"	d
ufs_inotocgoff	./src/ufs.h	231;"	d
ufs_inotofsba	./src/ufs.h	232;"	d
ufs_inotofsbo	./src/ufs.h	233;"	d
ufs_lblkno	./src/ufs.h	261;"	d
ufs_lblktosize	./src/ufs.h	260;"	d
ufs_numfrags	./src/ufs.h	262;"	d
ufs_set_opt	./src/ufs.h	187;"	d
ufs_super_block	./src/ufs.h	/^struct ufs_super_block {$/;"	s
ufs_test_opt	./src/ufs.h	188;"	d
ufs_timeval	./src/ufs.h	/^struct ufs_timeval {$/;"	s
uid	./src/cramfs.h	/^	uint32_t mode:CRAMFS_MODE_WIDTH, uid:CRAMFS_UID_WIDTH;$/;"	m	struct:cramfs_inode
uid	./src/file_a.c	/^  char uid[6];$/;"	m	struct:file_header	file:
uk1	./src/file_reg.c	/^  uint32_t uk1;$/;"	m	struct:creg_file_header	file:
uk1	./src/file_reg.c	/^  uint32_t uk1;$/;"	m	struct:rgdb_block	file:
uk2	./src/file_reg.c	/^  uint32_t uk2;$/;"	m	struct:creg_file_header	file:
uk3	./src/file_reg.c	/^  uint32_t uk3;$/;"	m	struct:creg_file_header	file:
uk4	./src/file_reg.c	/^  uint32_t uk4;$/;"	m	struct:creg_file_header	file:
un_b	./src/bsd.h	/^		} un_b;$/;"	m	union:disklabel::__anon69	typeref:struct:disklabel::__anon69::__anon70
un_d_boot0	./src/bsd.h	/^			char *un_d_boot0;	\/* primary bootstrap name *\/$/;"	m	struct:disklabel::__anon69::__anon70
un_d_boot1	./src/bsd.h	/^			char *un_d_boot1;	\/* secondary bootstrap name *\/$/;"	m	struct:disklabel::__anon69::__anon70
un_d_packname	./src/bsd.h	/^		char	un_d_packname[16];	\/* pack identifier *\/$/;"	m	union:disklabel::__anon69
uname	./src/ntfs_udl.c	/^	ntfschar	*uname;		\/* Filename in unicode *\/$/;"	m	struct:filename	file:
uname	./src/ntfs_udl.c	/^	ntfschar	*uname;		\/* Unicode stream name *\/$/;"	m	struct:data	file:
uname_len	./src/ntfs_udl.c	/^	int		 uname_len;	\/* and its length *\/$/;"	m	struct:data	file:
uname_len	./src/ntfs_udl.c	/^	int		 uname_len;	\/* and its length *\/$/;"	m	struct:filename	file:
uncomp_size	./src/file_lzh.c	/^  uint32_t uncomp_size;$/;"	m	struct:lzh_level0	file:
uncomp_size	./src/file_lzh.c	/^  uint32_t uncomp_size;$/;"	m	struct:lzh_level1	file:
uncomp_size	./src/file_lzh.c	/^  uint32_t uncomp_size;$/;"	m	struct:lzh_level2	file:
uncompressed_size	./src/file_zip.c	/^  uint32_t uncompressed_size;       \/** Uncompressed size *\/$/;"	m	struct:zip_file_entry	file:
uncompressed_size	./src/file_zip.c	/^  uint64_t uncompressed_size;$/;"	m	struct:zip64_extra_entry	file:
undelete_file	./src/ntfs_udl.c	/^static int undelete_file(ntfs_volume *vol, long long inode)$/;"	f	file:
unencrypted_file_size	./src/file_ecryptfs.c	/^  uint64_t unencrypted_file_size;$/;"	m	struct:ecrypfs_header	file:
uniqueIDSeed	./src/file_prc.c	/^  uint32_t      uniqueIDSeed;		\/* 0x44 *\/$/;"	m	struct:DatabaseHdrType_s	file:
unit	./src/common.h	/^  int unit;$/;"	m	struct:param_disk_struct
unk	./src/file_wpd.c	/^  uint32_t	unk;$/;"	m	struct:wpd_hdr	file:
unk1	./src/file_ari.c	/^  uint32_t unk1;$/;"	m	struct:arri_header	file:
unk1	./src/file_cwk.c	/^  uint16_t	unk1;$/;"	m	struct:cwk_header	file:
unk1	./src/file_d2s.c	/^  uint32_t unk1;$/;"	m	struct:d2s_header	file:
unk1	./src/file_dad.c	/^  uint32_t unk1;$/;"	m	struct:dad_header	file:
unk1	./src/file_mig.c	/^  uint32_t unk1;$/;"	m	struct:MIG_HDR	file:
unk1	./src/file_nk2.c	/^  uint32_t unk1;$/;"	m	struct:__anon7	file:
unk1	./src/file_ra.c	/^  char     unk1[12];$/;"	m	struct:ra4_header	file:
unk1	./src/file_ra.c	/^  char unk1[10];$/;"	m	struct:ra3_header	file:
unk1	./src/file_raf.c	/^  char unk1[4];		\/* 0201 *\/$/;"	m	struct:header_raf	file:
unk1	./src/parthumax.c	/^  char unk1[0x1be];$/;"	m	struct:humaxlabel	file:
unk1	./src/parthumax.c	/^  uint32_t unk1;$/;"	m	struct:partition_humax	file:
unk1	./src/partxbox.h	/^	char unk1[0x600];$/;"	m	struct:xbox_partition
unk2	./src/file_cwk.c	/^  uint32_t	unk2;$/;"	m	struct:cwk_header	file:
unk2	./src/file_d2s.c	/^  uint32_t unk2;$/;"	m	struct:d2s_header	file:
unk2	./src/file_dad.c	/^  uint32_t unk2;$/;"	m	struct:dad_header	file:
unk2	./src/file_mig.c	/^  uint32_t unk2;$/;"	m	struct:MIG_HDR	file:
unk2	./src/file_nk2.c	/^  uint32_t unk2;$/;"	m	struct:__anon7	file:
unk2	./src/file_ra.c	/^  uint16_t unk2;$/;"	m	struct:ra4_header	file:
unk2	./src/file_raf.c	/^  char unk2[8];		\/* FF393103 *\/$/;"	m	struct:header_raf	file:
unk2	./src/parthumax.c	/^  uint32_t unk2;$/;"	m	struct:partition_humax	file:
unk3	./src/file_mig.c	/^  uint32_t unk3;$/;"	m	struct:MIG_HDR	file:
unk3	./src/file_nk2.c	/^  uint32_t unk3;$/;"	m	struct:__anon7	file:
unk3	./src/file_ra.c	/^  uint16_t unk3;$/;"	m	struct:ra4_header	file:
unk3	./src/file_raf.c	/^  char unk3[20];$/;"	m	struct:header_raf	file:
unk4	./src/file_ra.c	/^  char     unk4[3];$/;"	m	struct:ra4_header	file:
unknown	./src/fatx.h	/^  uint32_t	unknown;$/;"	m	struct:disk_fatx
unknown	./src/netware.h	/^  char unknown;$/;"	m	struct:disk_netware
unknown1	./src/file_mrw.c	/^  uint8_t unknown1;$/;"	m	struct:prd	file:
unknown2	./src/file_mrw.c	/^  uint16_t unknown2;$/;"	m	struct:prd	file:
unknown2	./src/netware.h	/^  char unknown2[3];$/;"	m	struct:disk_netware
unknown3	./src/file_reg.c	/^  uint32_t unknown3;$/;"	m	struct:regf_file_header	file:
unknown3	./src/netware.h	/^  char unknown3[3]; \/* 0x10 *\/$/;"	m	struct:disk_netware
unknown4	./src/file_reg.c	/^  uint32_t unknown4;$/;"	m	struct:regf_file_header	file:
unknown5	./src/file_reg.c	/^  uint8_t unknown5[ 64 ];$/;"	m	struct:regf_file_header	file:
unknown6	./src/file_reg.c	/^  uint8_t unknown6[ 396 ];$/;"	m	struct:regf_file_header	file:
unused	./src/file_arj.c	/^  uint16_t	unused;$/;"	m	struct:arj_main_header	file:
unused	./src/file_ra.c	/^  uint16_t unused;	\/* always 0 *\/$/;"	m	struct:ra4_header	file:
unused	./src/ntfs.h	/^	uint8_t	unused;		\/* 0x25 *\/$/;"	m	struct:ntfs_boot_sector
unused0	./src/exfat.h	/^        unsigned char   unused0;                \/* 0x00... *\/$/;"	m	struct:exfat_super_block
unused1	./src/exfat.h	/^        uint32_t  	unused1[13];$/;"	m	struct:exfat_super_block
unused1	./src/file_vdi.c	/^    uint32_t unused1;$/;"	m	struct:__anon57	file:
unused1	./src/file_zip.c	/^  uint16_t unused1:2;               \/** Unused *\/$/;"	m	struct:zip_file_entry	file:
unused1	./src/iso9660.h	/^	char unused1;$/;"	m	struct:iso_primary_descriptor
unused2	./src/file_vdi.c	/^    uint64_t unused2[7];$/;"	m	struct:__anon57	file:
unused2	./src/file_zip.c	/^  uint16_t unused2:4;               \/** Unused *\/$/;"	m	struct:zip_file_entry	file:
unused2	./src/iso9660.h	/^	char unused2[8];$/;"	m	struct:iso_primary_descriptor
unused3	./src/file_zip.c	/^  uint16_t unused3:1;               \/** Reserved by PKWARE for enhanced compression. *\/$/;"	m	struct:zip_file_entry	file:
unused3	./src/iso9660.h	/^	char unused3[32];$/;"	m	struct:iso_primary_descriptor
unused4	./src/iso9660.h	/^	char unused4;$/;"	m	struct:iso_primary_descriptor
unused5	./src/iso9660.h	/^	char unused5[653];$/;"	m	struct:iso_primary_descriptor
unused_size	./src/file_reg.c	/^  uint32_t unused_size;$/;"	m	struct:rgdb_block	file:
up2power	./src/common.c	/^unsigned int up2power(const unsigned int number)$/;"	f
up2power_aux	./src/common.c	/^static unsigned int up2power_aux(const unsigned int number)$/;"	f	file:
upart_type	./src/common.h	/^  upart_type_t  upart_type;$/;"	m	struct:partition_struct
upart_type	./src/common.h	/^enum upart_type {$/;"	g
upart_type_t	./src/common.h	/^typedef enum upart_type upart_type_t;$/;"	t	typeref:enum:upart_type
update_blocksize	./src/photorec.c	/^void update_blocksize(const unsigned int blocksize, alloc_data_t *list_search_space, const uint64_t offset)$/;"	f
update_disk_car_fields	./src/hdaccess.c	/^void update_disk_car_fields(disk_t *disk_car)$/;"	f
update_location	./src/next.c	/^static void update_location(void)$/;"	f	file:
update_search_space_aux	./src/photorec.c	/^static void update_search_space_aux(alloc_data_t *list_search_space, const uint64_t start, const uint64_t end, alloc_data_t **new_current_search_space, uint64_t *offset)$/;"	f	file:
update_stats	./src/photorec.c	/^void update_stats(file_stat_t *file_stats, alloc_data_t *list_search_space)$/;"	f
usPartNumber	./src/file_wim.c	/^  uint16_t		usPartNumber;$/;"	m	struct:_WIMHEADER_V1_PACKED	file:
usTotalParts	./src/file_wim.c	/^  uint16_t		usTotalParts;$/;"	m	struct:_WIMHEADER_V1_PACKED	file:
usa_count	./src/ntfs.h	/^  uint16_t	usa_count;$/;"	m	struct:ntfs_mft_record
usa_ofs	./src/ntfs.h	/^  uint16_t	usa_ofs;$/;"	m	struct:ntfs_mft_record
use_backup	./src/godmode.c	/^static int use_backup(disk_t *disk_car, const list_part_t *list_part, const int verbose,const int dump_ind, const unsigned int expert, char**current_cmd)$/;"	f	file:
used_blocks	./src/bfs.h	/^    uint64_t        used_blocks;           \/* 0x38 *\/$/;"	m	struct:disk_super_block
userFlags	./src/ole.h	/^	uint32_t	userFlags;	\/\/ 96$/;"	m	struct:OLE_DIR
user_data_size	./src/file_dpx.c	/^  uint32_t   	user_data_size;   \/* user-defined data length in bytes *\/$/;"	m	struct:header_dpx	file:
user_max	./src/common.h	/^  uint64_t user_max;$/;"	m	struct:param_disk_struct
user_version	./src/file_sql.c	/^ uint32_t user_version;$/;"	m	struct:db_header	file:
uses_unicode	./src/file_zip.c	/^  uint16_t uses_unicode:1;          \/** Filename and comments are in UTF-8 *\/$/;"	m	struct:zip_file_entry	file:
utils_cluster_in_use	./src/ntfs_utl.c	/^int utils_cluster_in_use(ntfs_volume *vol, long long lcn)$/;"	f
utime	./src/md.h	/^	uint32_t utime;		\/*  0 Superblock update time		      *\/$/;"	m	struct:mdp_superblock_s
utime	./src/md.h	/^	uint64_t	utime;		\/* 40 bits second, 24 btes microseconds *\/$/;"	m	struct:mdp_superblock_1
uuid	./src/btrfs.h	/^	uint8_t uuid[BTRFS_UUID_SIZE];$/;"	m	struct:btrfs_dev_item
uuid	./src/file_x3f.c	/^  unsigned char uuid[16];$/;"	m	struct:x3f_header	file:
uuid	./src/luks.h	/^  uint8_t	uuid[UUID_STRING_L];$/;"	m	struct:luks_phdr
uuid	./src/rfs.h	/^  char uuid[16];          \/* unique id *\/$/;"	m	struct:reiser4_master_sb
uuid_image	./src/file_vdi.c	/^    uuid_t uuid_image;$/;"	m	struct:__anon57	file:
uuid_last_snap	./src/file_vdi.c	/^    uuid_t uuid_last_snap;$/;"	m	struct:__anon57	file:
uuid_link	./src/file_vdi.c	/^    uuid_t uuid_link;$/;"	m	struct:__anon57	file:
uuid_parent	./src/file_vdi.c	/^    uuid_t uuid_parent;$/;"	m	struct:__anon57	file:
uuid_t	./src/file_vdi.c	/^typedef unsigned char uuid_t[16];$/;"	t	file:
v7_super_block	./src/sysv.h	/^struct v7_super_block {$/;"	s
vaff_txt	./src/intrfn.c	/^int vaff_txt(int line, WINDOW *window, const char *_format, va_list ap)$/;"	f
val_len	./src/file_exe.c	/^  uint16_t val_len;$/;"	m	struct:PE_index	file:
valid_data_length	./src/exfat.h	/^  uint64_t valid_data_length;$/;"	m	struct:exfat_stream_ext_entry
value	./src/file_jpg.c	/^  char     value[0];$/;"	m	struct:MP_IFD_Field	file:
value	./src/filegen.h	/^  const void *value;$/;"	m	struct:__anon67
value_type	./src/file_nk2.c	/^  uint16_t value_type;$/;"	m	struct:__anon7	file:
vault_header	./src/file_vault.c	/^static const unsigned char vault_header[0x12]=  {$/;"	v	file:
vb_magic	./src/zfs.h	/^        uint64_t        vb_magic;               \/* VDEV_BOOT_MAGIC      *\/$/;"	m	struct:vdev_boot_header
vb_offset	./src/zfs.h	/^        uint64_t        vb_offset;              \/* start offset (bytes) *\/$/;"	m	struct:vdev_boot_header
vb_pad	./src/zfs.h	/^        char            vb_pad[VDEV_BOOT_HEADER_SIZE - 4 * sizeof (uint64_t)];$/;"	m	struct:vdev_boot_header
vb_size	./src/zfs.h	/^        uint64_t        vb_size;                \/* size (bytes)         *\/$/;"	m	struct:vdev_boot_header
vb_version	./src/zfs.h	/^        uint64_t        vb_version;             \/* VDEV_BOOT_VERSION    *\/$/;"	m	struct:vdev_boot_header
vdev_boot_header	./src/zfs.h	/^struct vdev_boot_header {$/;"	s
vendor_id	./src/hdaccess.c	/^  uint8_t vendor_id[8];$/;"	m	struct:_scsi_inquiry_data	file:
vendor_specific	./src/hdaccess.c	/^  uint8_t vendor_specific[20];$/;"	m	struct:_scsi_inquiry_data	file:
ver	./src/file_mrw.c	/^  char ver[8];$/;"	m	struct:prd	file:
verbose	./src/dir.h	/^  int verbose;$/;"	m	struct:dir_data
verbose	./src/photorec.h	/^  int verbose;$/;"	m	struct:ph_options
verify_parent	./src/ntfs_udl.c	/^static FILE_NAME_ATTR* verify_parent(struct filename* name, MFT_RECORD* rec)$/;"	f	file:
vers	./src/file_dpx.c	/^  char		vers[8];          \/* which header format version is being used (v1.0)*\/$/;"	m	struct:header_dpx	file:
version	./src/fat.h	/^	uint8_t	version[2];	\/* 0x2A major, minor filesystem version *\/$/;"	m	struct:fat_boot_sector
version	./src/file_1cd.c	/^  uint32_t version;$/;"	m	struct:header_1cd	file:
version	./src/file_ari.c	/^  uint32_t version;	\/* ie. 3 *\/$/;"	m	struct:arri_header	file:
version	./src/file_cow.c	/^    uint32_t version;$/;"	m	struct:QCowHeader	file:
version	./src/file_cow.c	/^    uint32_t version;$/;"	m	struct:__anon48	file:
version	./src/file_ecryptfs.c	/^  unsigned char	version;$/;"	m	struct:ecrypfs_header	file:
version	./src/file_flv.c	/^  uint8_t	version;$/;"	m	struct:flv_header	file:
version	./src/file_hds.c	/^    uint32_t version;$/;"	m	struct:parallels_header	file:
version	./src/file_psb.c	/^  uint16_t version;	\/* must be 2 *\/$/;"	m	struct:psb_file_header	file:
version	./src/file_psd.c	/^  uint16_t version;	\/* must be 1 *\/$/;"	m	struct:psd_file_header	file:
version	./src/file_ra.c	/^  uint16_t version;	\/* 3 *\/$/;"	m	struct:ra3_header	file:
version	./src/file_ra.c	/^  uint16_t version;	\/* 4 *\/$/;"	m	struct:ra4_header	file:
version	./src/file_rm.c	/^  uint16_t version;$/;"	m	struct:rm_header	file:
version	./src/file_sql.c	/^ uint32_t version;$/;"	m	struct:db_header	file:
version	./src/file_swf.c	/^  unsigned char version;$/;"	m	struct:swf_header	file:
version	./src/file_vdi.c	/^    uint32_t version;$/;"	m	struct:__anon57	file:
version	./src/file_vmdk.c	/^  uint32_t version;$/;"	m	struct:__anon38	file:
version	./src/file_vmdk.c	/^  uint32_t version;$/;"	m	struct:__anon39	file:
version	./src/file_wmf.c	/^  uint16_t version;$/;"	m	struct:wmf_header	file:
version	./src/file_wv.c	/^    uint16_t version;           \/\/ 0x402 to 0x410 are currently valid for decode$/;"	m	struct:__anon47	file:
version	./src/file_x3f.c	/^  uint32_t	version;$/;"	m	struct:x3f_header	file:
version	./src/file_xcf.c	/^  unsigned char version[4];$/;"	m	struct:xcf_header	file:
version	./src/file_zip.c	/^  uint16_t version;                 \/** Version needed to extract *\/$/;"	m	struct:zip_file_entry	file:
version	./src/hfsp.h	/^        uint16_t         version;     \/\/ 02: 4 for HFS+, 5 for HFSX$/;"	m	struct:hfsp_vh
version	./src/iso9660.h	/^	char version;$/;"	m	struct:iso_primary_descriptor
version	./src/luks.h	/^  uint16_t	version;$/;"	m	struct:luks_phdr
version	./src/lvm.h	/^	uint16_t version;		\/* HM lvm version *\/$/;"	m	struct:__anon13
version	./src/sun.h	/^  uint32_t version;$/;"	m	struct:struct_sun_partition_i386
version	./src/swap.h	/^	unsigned int version;$/;"	m	struct:swap_header::__anon62
version	./src/vmfs.h	/^  uint32_t version;$/;"	m	struct:vmfs_volume
version2	./src/file_ra.c	/^  uint16_t version2;$/;"	m	struct:ra4_header	file:
versionString	./src/file_mlv.c	/^  uint8_t     versionString[8];	\/* null-terminated C-string of the exact revision of this format *\/$/;"	m	struct:__anon55	file:
version_info	./src/hdaccess.c	/^  uint8_t version_info;$/;"	m	struct:_scsi_inquiry_data	file:
version_valid_for	./src/file_sql.c	/^ uint32_t version_valid_for;$/;"	m	struct:db_header	file:
vfb_header	./src/file_vfb.c	/^static const unsigned char vfb_header[8]=  {$/;"	v	file:
vg_name	./src/lvm.h	/^	uint8_t vg_name[NAME_LEN];$/;"	m	struct:__anon13
vg_on_disk	./src/lvm.h	/^	lvm_disk_data_t vg_on_disk;$/;"	m	struct:__anon13
videoClass	./src/file_mlv.c	/^  uint16_t    videoClass;	\/* 0=none, 1=RAW, 2=YUV, 3=JPEG, 4=H.264 *\/$/;"	m	struct:__anon55	file:
videoFrameCount	./src/file_mlv.c	/^  uint32_t    videoFrameCount;	\/* number of video frames in this file. set to 0 on start, updated when finished. *\/$/;"	m	struct:__anon55	file:
virt_barray_list	./src/suspend.c	/^  jvirt_barray_ptr virt_barray_list;$/;"	m	struct:my_memory_mgr	file:
virt_sarray_list	./src/suspend.c	/^  jvirt_sarray_ptr virt_sarray_list;$/;"	m	struct:my_memory_mgr	file:
vmfs_lvm	./src/vmfs.h	/^struct vmfs_lvm$/;"	s
vmfs_volume	./src/vmfs.h	/^struct vmfs_volume$/;"	s
vmg_header	./src/file_vmg.c	/^static const unsigned char vmg_header[0x28]=  {$/;"	v	file:
vol	./src/ntfs_inc.h	/^	ntfs_volume *vol;$/;"	m	struct:ntfs_dir_struct
vollabel	./src/sun.h	/^  unsigned char vollabel[128];$/;"	m	struct:struct_sun_partition_i386
volname	./src/sun.h	/^  unsigned char volname[8];$/;"	m	struct:struct_sun_partition_i386
volume_id	./src/fatx.h	/^  uint32_t 	volume_id;$/;"	m	struct:disk_fatx
volume_id	./src/iso9660.h	/^	char volume_id[32];$/;"	m	struct:iso_primary_descriptor
volume_sequence_number	./src/iso9660.h	/^	char volume_sequence_number[4];$/;"	m	struct:iso_primary_descriptor
volume_serial_number	./src/ntfs.h	/^	uint64_t 	volume_serial_number;       	\/* 0x48 Irrelevant (serial number). *\/$/;"	m	struct:ntfs_boot_sector
volume_set_id	./src/iso9660.h	/^	char volume_set_id[128];$/;"	m	struct:iso_primary_descriptor
volume_set_size	./src/iso9660.h	/^	char volume_set_size[4];$/;"	m	struct:iso_primary_descriptor
volume_space_size	./src/iso9660.h	/^	char volume_space_size[8];$/;"	m	struct:iso_primary_descriptor
vs_version_info	./src/file_exe.c	/^static char vs_version_info[32]={$/;"	v	file:
vsnprintf	./src/common.c	/^int vsnprintf(char *str, size_t size, const char *format, va_list ap)$/;"	f
warning_geometry_ncurses	./src/godmode.c	/^static void warning_geometry_ncurses(disk_t *disk_car, const unsigned int recommanded_heads_per_cylinder)$/;"	f	file:
wbfs_head	./src/wbfs.h	/^struct wbfs_head$/;"	s
wbfs_sec_sz_s	./src/wbfs.h	/^  uint8_t  wbfs_sec_sz_s;     	\/\/ size of a wbfs sec$/;"	m	struct:wbfs_head
wbuffer	./src/common.h	/^  void *wbuffer;$/;"	m	struct:param_disk_struct
wbuffer_size	./src/common.h	/^  unsigned int wbuffer_size;$/;"	m	struct:param_disk_struct
wgetch_nodelay	./src/intrfn.c	/^static int wgetch_nodelay(WINDOW *window)$/;"	f	file:
width	./src/file_ari.c	/^  uint32_t width;$/;"	m	struct:arri_header	file:
width	./src/file_cwk.c	/^  uint16_t	width;$/;"	m	struct:cwk_header	file:
width	./src/file_ico.c	/^  uint8_t	width;$/;"	m	struct:ico_directory	file:
width	./src/file_psb.c	/^  uint32_t width;	\/* max of 300,000 *\/$/;"	m	struct:psb_file_header	file:
width	./src/file_psd.c	/^  uint32_t width;	\/* max of 30,000 *\/$/;"	m	struct:psd_file_header	file:
width	./src/file_xcf.c	/^  uint32_t	width;$/;"	m	struct:xcf_header	file:
win_header	./src/file_win.c	/^static const unsigned char win_header[31]=  {$/;"	v	file:
wk4_header	./src/file_wks.c	/^static const unsigned char wk4_header[8]  = { 0x00, 0x00, 0x1a, 0x00, 0x02, 0x10, 0x04, 0x00};$/;"	v	file:
wks_header	./src/file_wks.c	/^static const unsigned char wks_header[10]  = { 0x00, 0x00, 0x02, 0x00, 0x04, 0x04,$/;"	v	file:
wmenuSelect	./src/intrfn.c	/^int wmenuSelect(WINDOW *window, const int yinfo, const int y, const int x, const struct MenuItem *menuItems, const unsigned int itemLength, const char *available, const int menuType, const unsigned int menuDefault)$/;"	f
wmenuSelect_ext	./src/intrfn.c	/^int wmenuSelect_ext(WINDOW *window, const int yinfo, const int y, const int x, const struct MenuItem *menuItems, const unsigned int itemLength, const char *available, const int menuType, unsigned int *current, int *real_key)$/;"	f
wmenuSimple	./src/intrfn.c	/^int wmenuSimple(WINDOW *window,const struct MenuItem *menuItems, const unsigned int menuDefault)$/;"	f
wmenuUpdate	./src/intrfn.c	/^static int wmenuUpdate(WINDOW *window, const int yinfo, int y, int x, const struct MenuItem *menuItems, const unsigned int itemLength, const char *available, const int menuType, unsigned int current)$/;"	f	file:
wmf_header	./src/file_wmf.c	/^struct wmf_header$/;"	s	file:
wnk_header	./src/file_wnk.c	/^static const unsigned char wnk_header[6]= {'R','P','K','W','I',0x02};$/;"	v	file:
working_disks	./src/md.h	/^	uint32_t working_disks;	\/*  3 Number of working disks		      *\/$/;"	m	struct:mdp_superblock_s
wpb_header	./src/file_wpb.c	/^static const unsigned char wpb_header[8]=  {$/;"	v	file:
wpd_hdr	./src/file_wpd.c	/^struct wpd_hdr$/;"	s	file:
write_FAT_boot_code_aux	./src/fat_adv.c	/^static int write_FAT_boot_code_aux(unsigned char *buffer)$/;"	f	file:
write_MBR_code	./src/common.h	/^  int (*write_MBR_code)(disk_t *disk);$/;"	m	struct:arch_fnct_struct
write_MBR_code	./src/tmbrcode.c	/^int write_MBR_code(disk_t *disk_car)$/;"	f
write_MBR_code_i386	./src/parti386.c	/^static int write_MBR_code_i386(disk_t *disk_car)$/;"	f	file:
write_MBR_code_i386_aux	./src/parti386.c	/^static int write_MBR_code_i386_aux(unsigned char *buffer)$/;"	f	file:
write_all_log_i386	./src/parti386.c	/^static int write_all_log_i386(disk_t *disk_car, const list_part_t *list_part, const int ro, const int verbose)$/;"	f	file:
write_clean_table	./src/tdelete.c	/^int write_clean_table(disk_t *disk_car)$/;"	f
write_count	./src/hfsp.h	/^        uint32_t         write_count;$/;"	m	struct:hfsp_vh
write_data	./src/ntfs_udl.c	/^static unsigned int write_data(int fd, const char *buffer,$/;"	f	file:
write_mbr_i386	./src/parti386.c	/^static int write_mbr_i386(disk_t *disk_car, const list_part_t *list_part, const int ro, const int verbose)$/;"	f	file:
write_part	./src/common.h	/^  int (*write_part)(disk_t *disk, const list_part_t *list_part, const int ro, const int verbose);$/;"	m	struct:arch_fnct_struct
write_part_gpt	./src/partgptro.c	/^int write_part_gpt(disk_t *disk_car, const list_part_t *list_part, const int ro, const int verbose)$/;"	f
write_part_gpt	./src/partgptw.c	/^int write_part_gpt(disk_t *disk_car, const list_part_t *list_part, const int ro, const int verbose)$/;"	f
write_part_gpt_i386	./src/partgptw.c	/^static int write_part_gpt_i386(disk_t *disk_car, const list_part_t *list_part)$/;"	f	file:
write_part_humax	./src/parthumax.c	/^static int write_part_humax(disk_t *disk_car, const list_part_t *list_part, const int ro, const int verbose)$/;"	f	file:
write_part_i386	./src/parti386.c	/^static int write_part_i386(disk_t *disk_car, const list_part_t *list_part, const int ro, const int verbose)$/;"	f	file:
write_part_mac	./src/partmac.c	/^static int write_part_mac(disk_t *disk_car, const list_part_t *list_part, const int ro, const int verbose)$/;"	f	file:
write_part_mac_warning_ncurses	./src/partmacn.c	/^void write_part_mac_warning_ncurses(void)$/;"	f
write_part_sun	./src/partsun.c	/^static int write_part_sun(disk_t *disk_car, const list_part_t *list_part, const int ro, const int verbose)$/;"	f	file:
write_part_xbox	./src/partxbox.c	/^static int write_part_xbox(disk_t *disk_car, const list_part_t *list_part, const int ro, const int verbose)$/;"	f	file:
write_stats_log	./src/photorec.c	/^void write_stats_log(const file_stat_t *file_stats)$/;"	f
write_used	./src/common.h	/^  int write_used;$/;"	m	struct:param_disk_struct
wtv_header	./src/file_wtv.c	/^static const unsigned char wtv_header[16]=  {$/;"	v	file:
wv_header	./src/file_wv.c	/^static const unsigned char wv_header[4]=  { 'w', 'v', 'p', 'k'};$/;"	v	file:
x	./src/file_mrw.c	/^    uint16_t x;$/;"	m	struct:prd::__anon1	file:
x	./src/file_mrw.c	/^    uint16_t x;$/;"	m	struct:prd::__anon2	file:
x3f_header	./src/file_x3f.c	/^struct x3f_header$/;"	s	file:
xDimDet	./src/file_spe.c	/^  uint16_t        xDimDet;           \/*    6  Detector x dimension of chip       *\/$/;"	m	struct:header_spe	file:
xbox_partition	./src/partxbox.h	/^struct xbox_partition$/;"	s
xbox_sys_types	./src/partxbox.c	/^static const struct systypes xbox_sys_types[] = {$/;"	v	typeref:struct:systypes	file:
xcal_calib_count	./src/file_spe.c	/^  char          xcal_calib_count;       \/* 3102  valid calibration data pairs       *\/$/;"	m	struct:header_spe	file:
xcal_calib_label	./src/file_spe.c	/^  char          xcal_calib_label[81];   \/* 3321  Calibration label (NULL term'd)    *\/$/;"	m	struct:header_spe	file:
xcal_calib_valid	./src/file_spe.c	/^  char          xcal_calib_valid;       \/* 3098  flag if calibration is valid       *\/$/;"	m	struct:header_spe	file:
xcal_calib_value	./src/file_spe.c	/^  double        xcal_calib_value[10];   \/* 3183  calibration VALUE at above pos     *\/$/;"	m	struct:header_spe	file:
xcal_current_unit	./src/file_spe.c	/^  char          xcal_current_unit;      \/* 3016  selected scaling unit              *\/$/;"	m	struct:header_spe	file:
xcal_expansion	./src/file_spe.c	/^  char          xcal_expansion[87];     \/* 3402  Calibration Expansion area         *\/$/;"	m	struct:header_spe	file:
xcal_factor	./src/file_spe.c	/^  double        xcal_factor;            \/* 3008  factor for absolute data scaling   *\/$/;"	m	struct:header_spe	file:
xcal_input_unit	./src/file_spe.c	/^  char          xcal_input_unit;        \/* 3099  current input units for            *\/$/;"	m	struct:header_spe	file:
xcal_laser_position	./src/file_spe.c	/^  double        xcal_laser_position;    \/* 3311  laser wavenumber for relativ WN    *\/$/;"	m	struct:header_spe	file:
xcal_new_calib_flag	./src/file_spe.c	/^  unsigned char xcal_new_calib_flag;    \/* 3320  If set to 200, valid label below   *\/$/;"	m	struct:header_spe	file:
xcal_offset	./src/file_spe.c	/^  double        xcal_offset;            \/* 3000  offset for absolute data scaling   *\/$/;"	m	struct:header_spe	file:
xcal_pixel_position	./src/file_spe.c	/^  double        xcal_pixel_position[10];\/* 3103  pixel pos. of calibration data     *\/$/;"	m	struct:header_spe	file:
xcal_polynom_coeff	./src/file_spe.c	/^  double        xcal_polynom_coeff[6];  \/* 3263  polynom COEFFICIENTS               *\/$/;"	m	struct:header_spe	file:
xcal_polynom_order	./src/file_spe.c	/^  char          xcal_polynom_order;     \/* 3101  ORDER of calibration POLYNOM       *\/$/;"	m	struct:header_spe	file:
xcal_polynom_unit	./src/file_spe.c	/^  char          xcal_polynom_unit;      \/* 3100  linear UNIT and used               *\/$/;"	m	struct:header_spe	file:
xcal_reserved1	./src/file_spe.c	/^  char          xcal_reserved1;         \/* 3017  reserved                           *\/$/;"	m	struct:header_spe	file:
xcal_reserved2	./src/file_spe.c	/^  char          xcal_reserved2[40];     \/* 3058  reserved                           *\/$/;"	m	struct:header_spe	file:
xcal_reserved3	./src/file_spe.c	/^  char          xcal_reserved3;         \/* 3319  reserved                           *\/$/;"	m	struct:header_spe	file:
xcal_string	./src/file_spe.c	/^  char          xcal_string[40];        \/* 3018  special string for scaling         *\/$/;"	m	struct:header_spe	file:
xcf_header	./src/file_xcf.c	/^struct xcf_header$/;"	s	file:
xdim	./src/file_spe.c	/^  uint16_t  xdim;              \/*   42  actual # of pixels on x axis       *\/$/;"	m	struct:header_spe	file:
xenix_super_block	./src/sysv.h	/^struct xenix_super_block {$/;"	s
xfi_header	./src/file_xfi.c	/^static const unsigned char xfi_header[0x20]=  {$/;"	v	file:
xfs_agblock_t	./src/xfs.h	/^typedef uint32_t	xfs_agblock_t;	\/* blockno in alloc. group *\/$/;"	t
xfs_agnumber_t	./src/xfs.h	/^typedef	uint32_t	xfs_agnumber_t;	\/* allocation group number *\/$/;"	t
xfs_dfsbno_t	./src/xfs.h	/^typedef uint64_t        xfs_dfsbno_t;$/;"	t
xfs_drfsbno_t	./src/xfs.h	/^typedef uint64_t	xfs_drfsbno_t;	\/* blockno in filesystem (raw) *\/$/;"	t
xfs_drtbno_t	./src/xfs.h	/^typedef	uint64_t	xfs_drtbno_t;	\/* extent (block) in realtime area *\/$/;"	t
xfs_extlen_t	./src/xfs.h	/^typedef	uint32_t	xfs_extlen_t;	\/* extent length in blocks *\/$/;"	t
xfs_ino_t	./src/xfs.h	/^typedef uint64_t	xfs_ino_t;	\/* <inode> type *\/$/;"	t
xfs_sb	./src/xfs.h	/^struct xfs_sb$/;"	s
xlabel	./src/file_spe.c	/^  char          xlabel[16];        \/*  602  Intensity display string           *\/$/;"	m	struct:header_spe	file:
xm_header	./src/file_xm.c	/^static const unsigned char xm_header[17]  = { 'E','x','t','e','n','d','e','d',' ','M','o','d','u','l','e',':',' '};$/;"	v	file:
xml_add_DFXML_creator	./src/dfxml.c	/^void xml_add_DFXML_creator(const char *package, const char *version)$/;"	f
xml_clear_command_line	./src/dfxml.c	/^void xml_clear_command_line(void)$/;"	f
xml_close	./src/dfxml.c	/^void xml_close()$/;"	f
xml_ctagout	./src/dfxml.c	/^static void xml_ctagout(const char *tag)$/;"	f	file:
xml_dir	./src/dfxml.c	/^static char xml_dir[2048];$/;"	v	file:
xml_fname	./src/dfxml.c	/^static char xml_fname[2048];			\/* what photorec uses elsewhere *\/$/;"	v	file:
xml_handle	./src/dfxml.c	/^static FILE *xml_handle = NULL;$/;"	v	file:
xml_header	./src/dfxml.c	/^static const char *xml_header = "<?xml version='1.0' encoding='UTF-8'?>\\n";$/;"	v	file:
xml_log_file_recovered	./src/dfxml.c	/^void xml_log_file_recovered(const file_recovery_t *file_recovery)$/;"	f
xml_open	./src/dfxml.c	/^FILE *xml_open(const char *recup_dir, const unsigned int dir_num)$/;"	f
xml_out2i	./src/dfxml.c	/^void xml_out2i(const char *tag, const uint64_t value)$/;"	f
xml_out2s	./src/dfxml.c	/^void xml_out2s(const char *tag, const char *value)$/;"	f
xml_pop	./src/dfxml.c	/^void xml_pop(const char *tag)$/;"	f
xml_printf	./src/dfxml.c	/^void xml_printf(const char *fmt,...)$/;"	f
xml_push	./src/dfxml.c	/^void xml_push(const char *tag,const char *attribute)$/;"	f
xml_set_command_line	./src/dfxml.c	/^void xml_set_command_line(const int argc, char **argv)$/;"	f
xml_setup	./src/dfxml.c	/^void xml_setup(disk_t *disk, const partition_t *partition)$/;"	f
xml_shutdown	./src/dfxml.c	/^void xml_shutdown(void)$/;"	f
xml_spaces	./src/dfxml.c	/^static void xml_spaces(void)$/;"	f	file:
xml_stack_depth	./src/dfxml.c	/^static int xml_stack_depth = 0;$/;"	v	file:
xml_tagout	./src/dfxml.c	/^static void xml_tagout(const char *tag,const char *attribute)$/;"	f	file:
xor_checksum	./src/file_reg.c	/^  uint32_t xor_checksum;$/;"	m	struct:regf_file_header	file:
xsv_header	./src/file_xsv.c	/^static const unsigned char xsv_header[9]= {'B','L','O','C', 'K', 'L', 0xDC, 0x1D, 'd'};$/;"	v	file:
xxxx01	./src/exfat.h	/^	unsigned char   xxxx01;                 \/* ??? (0x00 or any value (?)) *\/$/;"	m	struct:exfat_super_block
xxxx02	./src/exfat.h	/^	unsigned char   xxxx02;                 \/* ??? (0x01 or 0x00 (?)) *\/$/;"	m	struct:exfat_super_block
xxxx05	./src/exfat.h	/^	unsigned char   xxxx05[397];            \/* ??? (0x00...) *\/$/;"	m	struct:exfat_super_block
xz_header	./src/file_xz.c	/^static const unsigned char xz_header[7]=  {$/;"	v	file:
y	./src/file_mrw.c	/^    uint16_t y;$/;"	m	struct:prd::__anon1	file:
y	./src/file_mrw.c	/^    uint16_t y;$/;"	m	struct:prd::__anon2	file:
yDimDet	./src/file_spe.c	/^  uint16_t  yDimDet;           \/*   18  y dimension of CCD or detector.    *\/$/;"	m	struct:header_spe	file:
ycal_calib_count	./src/file_spe.c	/^  char          ycal_calib_count;       \/* 3591  valid calibration data pairs       *\/$/;"	m	struct:header_spe	file:
ycal_calib_label	./src/file_spe.c	/^  char          ycal_calib_label[81];   \/* 3810  Calibration label (NULL term'd)    *\/$/;"	m	struct:header_spe	file:
ycal_calib_valid	./src/file_spe.c	/^  char          ycal_calib_valid;       \/* 3587  flag if calibration is valid       *\/$/;"	m	struct:header_spe	file:
ycal_calib_value	./src/file_spe.c	/^  double        ycal_calib_value[10];   \/* 3672  calibration VALUE at above pos     *\/$/;"	m	struct:header_spe	file:
ycal_current_unit	./src/file_spe.c	/^  char          ycal_current_unit;      \/* 3505  selected scaling unit              *\/$/;"	m	struct:header_spe	file:
ycal_expansion	./src/file_spe.c	/^  char          ycal_expansion[87];     \/* 3891  Calibration Expansion area         *\/$/;"	m	struct:header_spe	file:
ycal_factor	./src/file_spe.c	/^  double        ycal_factor;            \/* 3497  factor for absolute data scaling   *\/$/;"	m	struct:header_spe	file:
ycal_input_unit	./src/file_spe.c	/^  char          ycal_input_unit;        \/* 3588  current input units for            *\/$/;"	m	struct:header_spe	file:
ycal_laser_position	./src/file_spe.c	/^  double        ycal_laser_position;    \/* 3800  laser wavenumber for relativ WN    *\/$/;"	m	struct:header_spe	file:
ycal_new_calib_flag	./src/file_spe.c	/^  unsigned char ycal_new_calib_flag;    \/* 3809  If set to 200, valid label below   *\/$/;"	m	struct:header_spe	file:
ycal_offset	./src/file_spe.c	/^  double        ycal_offset;            \/* 3489  offset for absolute data scaling   *\/$/;"	m	struct:header_spe	file:
ycal_pixel_position	./src/file_spe.c	/^  double        ycal_pixel_position[10];\/* 3592  pixel pos. of calibration data     *\/$/;"	m	struct:header_spe	file:
ycal_polynom_coeff	./src/file_spe.c	/^  double        ycal_polynom_coeff[6];  \/* 3752  polynom COEFFICIENTS               *\/$/;"	m	struct:header_spe	file:
ycal_polynom_order	./src/file_spe.c	/^  char          ycal_polynom_order;     \/* 3590  ORDER of calibration POLYNOM       *\/$/;"	m	struct:header_spe	file:
ycal_polynom_unit	./src/file_spe.c	/^  char          ycal_polynom_unit;      \/* 3589  linear UNIT and used               *\/$/;"	m	struct:header_spe	file:
ycal_reserved1	./src/file_spe.c	/^  char          ycal_reserved1;         \/* 3506  reserved                           *\/$/;"	m	struct:header_spe	file:
ycal_reserved2	./src/file_spe.c	/^  char          ycal_reserved2[40];     \/* 3547  reserved                           *\/$/;"	m	struct:header_spe	file:
ycal_reserved3	./src/file_spe.c	/^  char          ycal_reserved3;         \/* 3808  reserved                           *\/$/;"	m	struct:header_spe	file:
ycal_string	./src/file_spe.c	/^  char          ycal_string[40];        \/* 3507  special string for scaling         *\/$/;"	m	struct:header_spe	file:
ydim	./src/file_spe.c	/^  uint16_t  ydim;              \/*  656  y dimension of raw data.           *\/$/;"	m	struct:header_spe	file:
ylabel	./src/file_spe.c	/^  char          ylabel[16];  \/* 1458 y axis label.                       *\/$/;"	m	struct:header_spe	file:
z2d_header	./src/file_z2d.c	/^static const unsigned char z2d_header[2]=  { 0xc3, 0x40 };$/;"	v	file:
zero	./src/file_xcf.c	/^  unsigned char zero;$/;"	m	struct:xcf_header	file:
zip64_extra_entry	./src/file_zip.c	/^struct zip64_extra_entry$/;"	s	file:
zip64_extra_entry_t	./src/file_zip.c	/^typedef struct zip64_extra_entry zip64_extra_entry_t;$/;"	t	typeref:struct:zip64_extra_entry	file:
zip64_parse_end_central_dir	./src/file_zip.c	/^static int zip64_parse_end_central_dir(file_recovery_t *fr)$/;"	f	file:
zip64_parse_end_central_dir_locator	./src/file_zip.c	/^static int zip64_parse_end_central_dir_locator(file_recovery_t *fr)$/;"	f	file:
zip_file_entry	./src/file_zip.c	/^struct zip_file_entry {$/;"	s	file:
zip_file_entry_t	./src/file_zip.c	/^typedef struct zip_file_entry zip_file_entry_t;$/;"	t	typeref:struct:zip_file_entry	file:
zip_header	./src/file_zip.c	/^static const unsigned char zip_header[4]  = { 'P', 'K', 0x03, 0x04};$/;"	v	file:
zip_header2	./src/file_zip.c	/^static const unsigned char zip_header2[8]  = { 'P', 'K', '0', '0', 'P', 'K', 0x03, 0x04}; \/* WinZIPv8-compressed files. *\/$/;"	v	file:
zip_parse_central_dir	./src/file_zip.c	/^static int zip_parse_central_dir(file_recovery_t *fr)$/;"	f	file:
zip_parse_data_desc	./src/file_zip.c	/^static int zip_parse_data_desc(file_recovery_t *fr)$/;"	f	file:
zip_parse_end_central_dir	./src/file_zip.c	/^static int zip_parse_end_central_dir(file_recovery_t *fr)$/;"	f	file:
zip_parse_file_entry	./src/file_zip.c	/^static int zip_parse_file_entry(file_recovery_t *fr, const char **ext, const unsigned int file_nbr)$/;"	f	file:
zip_parse_signature	./src/file_zip.c	/^static int zip_parse_signature(file_recovery_t *fr)$/;"	f	file:
zzReserved001	./src/file_sp3.h	/^  char		zzReserved001[6];$/;"	m	struct:SP3FileInfo
zzReserved002	./src/file_sp3.h	/^  uint8_t       zzReserved002;			\/* 1 bytes   (    16     ) *\/$/;"	m	struct:SP3FileInfo
zzReserved003	./src/file_sp3.h	/^  char   	zzReserved003[6];		\/* 6 bytes   (  21 -  26 ) *\/$/;"	m	struct:SP3FileInfo
zzReserved004	./src/file_sp3.h	/^  char     	zzReserved004[2];		\/* 2 bytes   (  31 -  32 ) *\/$/;"	m	struct:SP3FileInfo
zzReserved005	./src/file_sp3.h	/^  char         	zzReserved005[2];		\/* 2 bytes   (  39 -  40 ) *\/$/;"	m	struct:SP3FileInfo
zzReserved006	./src/file_sp3.h	/^  char         	zzReserved006[2];		\/* 2 bytes   ( 175 - 176 ) *\/$/;"	m	struct:SP3FileInfo
zzReserved007	./src/file_sp3.h	/^  char       	zzReserved007[12];		\/* 12 bytes  ( 245 - 256 ) *\/$/;"	m	struct:SP3FileInfo
zzReserved008	./src/file_sp3.h	/^  char         	zzReserved008[8];		\/* 8 bytes   ( 273 - 280 ) *\/$/;"	m	struct:SP3FileInfo
zzReserved009	./src/file_sp3.h	/^  uint8_t       zzReserved009;			\/* 1 bytes   (    413    ) *\/$/;"	m	struct:SP3FileInfo
zzReserved010	./src/file_sp3.h	/^  char   	zzReserved010[3];		\/* 3 bytes   ( 415 - 417 ) *\/$/;"	m	struct:SP3FileInfo
zzReserved011	./src/file_sp3.h	/^  uint8_t       zzReserved011;			\/* 1 bytes   (    419    ) *\/$/;"	m	struct:SP3FileInfo
zzReserved012	./src/file_sp3.h	/^  char   	zzReserved012[5];		\/* 5 bytes   ( 421 - 425 ) *\/$/;"	m	struct:SP3FileInfo
zzReserved013	./src/file_sp3.h	/^  uint8_t       zzReserved013;			\/* 1 bytes   (    427    ) *\/$/;"	m	struct:SP3FileInfo
zzReserved014	./src/file_sp3.h	/^  uint8_t       zzReserved014;			\/* 1 bytes   (    429    ) *\/$/;"	m	struct:SP3FileInfo
zzReserved015	./src/file_sp3.h	/^  char   	zzReserved015[3];		\/* 3 bytes   ( 431 - 433 ) *\/$/;"	m	struct:SP3FileInfo
zzReserved016	./src/file_sp3.h	/^  uint8_t       zzReserved016;			\/* 1 bytes   (    435    ) *\/$/;"	m	struct:SP3FileInfo
zzReserved017	./src/file_sp3.h	/^  uint8_t       zzReserved017;			\/* 1 bytes   (    437    ) *\/$/;"	m	struct:SP3FileInfo
zzReserved018	./src/file_sp3.h	/^  char      	zzReserved018[11];            	\/* 11 bytes  ( 506 - 516 ) *\/$/;"	m	struct:SP3FileInfo
zzReserved019	./src/file_sp3.h	/^  char         	zzReserved019[4];		\/* 4 bytes   ( 533 - 536) *\/$/;"	m	struct:SP3FileInfo
zzReserved0201	./src/file_sp3.h	/^  char         	zzReserved0201[2];		\/* 2 bytes  ( 613 - 614) *\/$/;"	m	struct:SP3FileInfo
zzReserved0202	./src/file_sp3.h	/^  char         	zzReserved0202[2];		\/* 2 bytes  ( 653 - 654) *\/$/;"	m	struct:SP3FileInfo
zzReserved0203	./src/file_sp3.h	/^  char         	zzReserved0203[8];		\/* 30 bytes  ( 693 - 700) *\/$/;"	m	struct:SP3FileInfo
zzReserved021	./src/file_sp3.h	/^  char         	zzReserved021[8];		\/* 8 bytes   ( 713 - 720) *\/$/;"	m	struct:SP3FileInfo
zzReserved022	./src/file_sp3.h	/^  char         	zzReserved022[8];		\/* 8 bytes   ( 733 - 740) *\/$/;"	m	struct:SP3FileInfo
zzReserved023	./src/file_sp3.h	/^  char         	zzReserved023[8];		\/* 8 bytes   ( --- - 760) *\/$/;"	m	struct:SP3FileInfo
zzReserved024	./src/file_sp3.h	/^  char         	zzReserved024[8];		\/* 8 bytes   ( --- - 780) *\/$/;"	m	struct:SP3FileInfo
zzReserved025	./src/file_sp3.h	/^  char         	zzReserved025[8];		\/* 8 bytes   ( --- - 800) *\/$/;"	m	struct:SP3FileInfo
zzReserved026	./src/file_sp3.h	/^  char         	zzReserved026[8];		\/* 8 bytes   ( --- - 820) *\/$/;"	m	struct:SP3FileInfo
zzReserved027	./src/file_sp3.h	/^  char         	zzReserved027[8];		\/* 8 bytes   ( --- - 840) *\/$/;"	m	struct:SP3FileInfo
zzReserved028	./src/file_sp3.h	/^  char         	zzReserved028[8];		\/* 8 bytes   ( --- - 860) *\/$/;"	m	struct:SP3FileInfo
zzReserved029	./src/file_sp3.h	/^  char         	zzReserved029[8];		\/* 8 bytes   ( --- - 880) *\/$/;"	m	struct:SP3FileInfo
zzReserved030	./src/file_sp3.h	/^  char         	zzReserved030[8];		\/* 8 bytes   ( --- - 900) *\/$/;"	m	struct:SP3FileInfo
zzReserved031	./src/file_sp3.h	/^  char         	zzReserved031[8];		\/* 8 bytes   ( --- - 920) *\/$/;"	m	struct:SP3FileInfo
zzReserved032	./src/file_sp3.h	/^  char         	zzReserved032[8];		\/* 8 bytes   ( --- - 940) *\/$/;"	m	struct:SP3FileInfo
zzReserved033	./src/file_sp3.h	/^  char         	zzReserved033[8];		\/* 8 bytes   ( --- - 960) *\/$/;"	m	struct:SP3FileInfo
zzReserved034	./src/file_sp3.h	/^  char         	zzReserved034[8];		\/* 8 bytes   ( --- - 980) *\/$/;"	m	struct:SP3FileInfo
zzReserved035	./src/file_sp3.h	/^  char         	zzReserved035[8];		\/* 8 bytes   ( ---- - 1000) *\/$/;"	m	struct:SP3FileInfo
zzReserved036	./src/file_sp3.h	/^  char         	zzReserved036[8];		\/* 8 bytes   ( ---- - 1020) *\/$/;"	m	struct:SP3FileInfo
zzReserved037	./src/file_sp3.h	/^  char         	zzReserved037[8];		\/* 8 bytes   ( ---- - 1040) *\/$/;"	m	struct:SP3FileInfo
zzReserved038	./src/file_sp3.h	/^  char         	zzReserved038[8];		\/* 8 bytes   ( ---- - 1060) *\/$/;"	m	struct:SP3FileInfo
zzReserved039	./src/file_sp3.h	/^  char         	zzReserved039[8];		\/* 8 bytes   ( ---- - 1080) *\/$/;"	m	struct:SP3FileInfo
zzReserved040	./src/file_sp3.h	/^  char         	zzReserved040[8];		\/* 4 bytes   ( ---- - 1100) *\/$/;"	m	struct:SP3FileInfo
zzReserved041	./src/file_sp3.h	/^  char         	zzReserved041[8];		\/* 8 bytes   ( ---- - 1120) *\/$/;"	m	struct:SP3FileInfo
zzReserved042	./src/file_sp3.h	/^  char         	zzReserved042[8];		\/* 8 bytes   ( ---- - 1140) *\/$/;"	m	struct:SP3FileInfo
zzReserved043	./src/file_sp3.h	/^  char         	zzReserved043[8];		\/* 8 bytes   ( ---- - 1160) *\/$/;"	m	struct:SP3FileInfo
zzReserved044	./src/file_sp3.h	/^  char         	zzReserved044[8];		\/* 8 bytes   ( ---- - 1180) *\/$/;"	m	struct:SP3FileInfo
zzReserved045	./src/file_sp3.h	/^  char         	zzReserved045[8];		\/* 8 bytes   ( ---- - 1200) *\/$/;"	m	struct:SP3FileInfo
zzReserved046	./src/file_sp3.h	/^  char         	zzReserved046[8];		\/* 8 bytes   ( ---- - 1220) *\/$/;"	m	struct:SP3FileInfo
zzReserved047	./src/file_sp3.h	/^  char         	zzReserved047[8];		\/* 8 bytes   ( ---- - 1240) *\/$/;"	m	struct:SP3FileInfo
zzReserved048	./src/file_sp3.h	/^  char         	zzReserved048[8];		\/* 8 bytes   ( ---- - 1260) *\/$/;"	m	struct:SP3FileInfo
zzReserved049	./src/file_sp3.h	/^  char         	zzReserved049[8];		\/* 8 bytes   ( ---- - 1280) *\/$/;"	m	struct:SP3FileInfo
zzReserved050	./src/file_sp3.h	/^  char         	zzReserved050[8];		\/* 8 bytes   ( ---- - 1300) *\/$/;"	m	struct:SP3FileInfo
zzReserved999	./src/file_sp3.h	/^  char 		zzReserved999[1024*10-1312];$/;"	m	struct:SP3FileInfo
